
49022WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c70  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  08004d2c  08004d2c  00005d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fe0  08004fe0  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  08004fe0  08004fe0  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fe0  08004fe0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fe0  08004fe0  00005fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fe4  08004fe4  00005fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004fe8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  2000005c  08005044  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08005044  0000644c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a96b  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201d  00000000  00000000  000109ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  00012a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000064e  00000000  00000000  00013238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afb1  00000000  00000000  00013886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c400  00000000  00000000  0002e837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a09ca  00000000  00000000  0003ac37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db601  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002064  00000000  00000000  000db644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000dd6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004d14 	.word	0x08004d14

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08004d14 	.word	0x08004d14

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	@ 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	@ 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			@ (mov r8, r8)

08000414 <ESP_Init>:
/*****************************************************************************************************************************************/

int braille_arr[12] = {0,0,0,0,0,0,0,0,0,0,0,0};

void ESP_Init (char *SSID, char *PASSWD)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b099      	sub	sp, #100	@ 0x64
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 800041e:	f001 f887 	bl	8001530 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 8000422:	4a6e      	ldr	r2, [pc, #440]	@ (80005dc <ESP_Init+0x1c8>)
 8000424:	4b6e      	ldr	r3, [pc, #440]	@ (80005e0 <ESP_Init+0x1cc>)
 8000426:	0011      	movs	r1, r2
 8000428:	0018      	movs	r0, r3
 800042a:	f001 fa1d 	bl	8001868 <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 800042e:	4a6d      	ldr	r2, [pc, #436]	@ (80005e4 <ESP_Init+0x1d0>)
 8000430:	4b6d      	ldr	r3, [pc, #436]	@ (80005e8 <ESP_Init+0x1d4>)
 8000432:	0011      	movs	r1, r2
 8000434:	0018      	movs	r0, r3
 8000436:	f001 fa17 	bl	8001868 <Uart_sendstring>
	for (int i=0; i<7; i++)
 800043a:	2300      	movs	r3, #0
 800043c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800043e:	e00d      	b.n	800045c <ESP_Init+0x48>
	{
		Uart_sendstring(".", pc_uart);
 8000440:	4a68      	ldr	r2, [pc, #416]	@ (80005e4 <ESP_Init+0x1d0>)
 8000442:	4b6a      	ldr	r3, [pc, #424]	@ (80005ec <ESP_Init+0x1d8>)
 8000444:	0011      	movs	r1, r2
 8000446:	0018      	movs	r0, r3
 8000448:	f001 fa0e 	bl	8001868 <Uart_sendstring>
		HAL_Delay(1000);
 800044c:	23fa      	movs	r3, #250	@ 0xfa
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	0018      	movs	r0, r3
 8000452:	f001 fee3 	bl	800221c <HAL_Delay>
	for (int i=0; i<7; i++)
 8000456:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000458:	3301      	adds	r3, #1
 800045a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800045c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800045e:	2b06      	cmp	r3, #6
 8000460:	ddee      	ble.n	8000440 <ESP_Init+0x2c>
	}

	/********* AT **********/
	Uart_sendstring("AT\r\n", wifi_uart);
 8000462:	4a5e      	ldr	r2, [pc, #376]	@ (80005dc <ESP_Init+0x1c8>)
 8000464:	4b62      	ldr	r3, [pc, #392]	@ (80005f0 <ESP_Init+0x1dc>)
 8000466:	0011      	movs	r1, r2
 8000468:	0018      	movs	r0, r3
 800046a:	f001 f9fd 	bl	8001868 <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n", wifi_uart)));
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	4a5a      	ldr	r2, [pc, #360]	@ (80005dc <ESP_Init+0x1c8>)
 8000472:	4b60      	ldr	r3, [pc, #384]	@ (80005f4 <ESP_Init+0x1e0>)
 8000474:	0011      	movs	r1, r2
 8000476:	0018      	movs	r0, r3
 8000478:	f001 fa8e 	bl	8001998 <Wait_for>
 800047c:	1e03      	subs	r3, r0, #0
 800047e:	d0f7      	beq.n	8000470 <ESP_Init+0x5c>
	Uart_sendstring("AT---->OK\n\n", pc_uart);
 8000480:	4a58      	ldr	r2, [pc, #352]	@ (80005e4 <ESP_Init+0x1d0>)
 8000482:	4b5d      	ldr	r3, [pc, #372]	@ (80005f8 <ESP_Init+0x1e4>)
 8000484:	0011      	movs	r1, r2
 8000486:	0018      	movs	r0, r3
 8000488:	f001 f9ee 	bl	8001868 <Uart_sendstring>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 800048c:	4a53      	ldr	r2, [pc, #332]	@ (80005dc <ESP_Init+0x1c8>)
 800048e:	4b5b      	ldr	r3, [pc, #364]	@ (80005fc <ESP_Init+0x1e8>)
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f001 f9e8 	bl	8001868 <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", wifi_uart)));
 8000498:	46c0      	nop			@ (mov r8, r8)
 800049a:	4a50      	ldr	r2, [pc, #320]	@ (80005dc <ESP_Init+0x1c8>)
 800049c:	4b58      	ldr	r3, [pc, #352]	@ (8000600 <ESP_Init+0x1ec>)
 800049e:	0011      	movs	r1, r2
 80004a0:	0018      	movs	r0, r3
 80004a2:	f001 fa79 	bl	8001998 <Wait_for>
 80004a6:	1e03      	subs	r3, r0, #0
 80004a8:	d0f7      	beq.n	800049a <ESP_Init+0x86>
	Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 80004aa:	4a4e      	ldr	r2, [pc, #312]	@ (80005e4 <ESP_Init+0x1d0>)
 80004ac:	4b55      	ldr	r3, [pc, #340]	@ (8000604 <ESP_Init+0x1f0>)
 80004ae:	0011      	movs	r1, r2
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 f9d9 	bl	8001868 <Uart_sendstring>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 80004b6:	4a4b      	ldr	r2, [pc, #300]	@ (80005e4 <ESP_Init+0x1d0>)
 80004b8:	4b53      	ldr	r3, [pc, #332]	@ (8000608 <ESP_Init+0x1f4>)
 80004ba:	0011      	movs	r1, r2
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 f9d3 	bl	8001868 <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	4951      	ldr	r1, [pc, #324]	@ (800060c <ESP_Init+0x1f8>)
 80004c8:	2408      	movs	r4, #8
 80004ca:	1938      	adds	r0, r7, r4
 80004cc:	f003 ff60 	bl	8004390 <siprintf>
	Uart_sendstring(data, wifi_uart);
 80004d0:	4a42      	ldr	r2, [pc, #264]	@ (80005dc <ESP_Init+0x1c8>)
 80004d2:	193b      	adds	r3, r7, r4
 80004d4:	0011      	movs	r1, r2
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 f9c6 	bl	8001868 <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\r\n\r\nOK\r\n", SSID, PASSWD);
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	494b      	ldr	r1, [pc, #300]	@ (8000610 <ESP_Init+0x1fc>)
 80004e2:	1938      	adds	r0, r7, r4
 80004e4:	f003 ff54 	bl	8004390 <siprintf>
	while (!(Wait_for(data, wifi_uart)));
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	4a3c      	ldr	r2, [pc, #240]	@ (80005dc <ESP_Init+0x1c8>)
 80004ec:	2408      	movs	r4, #8
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f001 fa50 	bl	8001998 <Wait_for>
 80004f8:	1e03      	subs	r3, r0, #0
 80004fa:	d0f6      	beq.n	80004ea <ESP_Init+0xd6>
//	while (!(Copy_upto("\"",buffer, wifi_uart)));
//	while (!(Wait_for("OK\r\n", wifi_uart)));
	sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	4945      	ldr	r1, [pc, #276]	@ (8000614 <ESP_Init+0x200>)
 8000500:	193b      	adds	r3, r7, r4
 8000502:	0018      	movs	r0, r3
 8000504:	f003 ff44 	bl	8004390 <siprintf>
	Uart_sendstring(data,pc_uart);
 8000508:	4a36      	ldr	r2, [pc, #216]	@ (80005e4 <ESP_Init+0x1d0>)
 800050a:	193b      	adds	r3, r7, r4
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f001 f9aa 	bl	8001868 <Uart_sendstring>

	/********* AT+CIFSR **********/
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 8000514:	4a31      	ldr	r2, [pc, #196]	@ (80005dc <ESP_Init+0x1c8>)
 8000516:	4b40      	ldr	r3, [pc, #256]	@ (8000618 <ESP_Init+0x204>)
 8000518:	0011      	movs	r1, r2
 800051a:	0018      	movs	r0, r3
 800051c:	f001 f9a4 	bl	8001868 <Uart_sendstring>
	while (!(Wait_for("+CIFSR:STAIP,\"", wifi_uart)));
 8000520:	46c0      	nop			@ (mov r8, r8)
 8000522:	4a2e      	ldr	r2, [pc, #184]	@ (80005dc <ESP_Init+0x1c8>)
 8000524:	4b3d      	ldr	r3, [pc, #244]	@ (800061c <ESP_Init+0x208>)
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fa35 	bl	8001998 <Wait_for>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d0f7      	beq.n	8000522 <ESP_Init+0x10e>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	4a29      	ldr	r2, [pc, #164]	@ (80005dc <ESP_Init+0x1c8>)
 8000536:	493a      	ldr	r1, [pc, #232]	@ (8000620 <ESP_Init+0x20c>)
 8000538:	4b3a      	ldr	r3, [pc, #232]	@ (8000624 <ESP_Init+0x210>)
 800053a:	0018      	movs	r0, r3
 800053c:	f001 f9ae 	bl	800189c <Copy_upto>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d0f7      	beq.n	8000534 <ESP_Init+0x120>
//	while (!(Wait_for("OK\r\n", wifi_uart)));
	int len = strlen (buffer);
 8000544:	4b36      	ldr	r3, [pc, #216]	@ (8000620 <ESP_Init+0x20c>)
 8000546:	0018      	movs	r0, r3
 8000548:	f7ff fddc 	bl	8000104 <strlen>
 800054c:	0003      	movs	r3, r0
 800054e:	65bb      	str	r3, [r7, #88]	@ 0x58
	buffer[len-1] = '\0';
 8000550:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000552:	3b01      	subs	r3, #1
 8000554:	4a32      	ldr	r2, [pc, #200]	@ (8000620 <ESP_Init+0x20c>)
 8000556:	2100      	movs	r1, #0
 8000558:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\n\n", buffer);
 800055a:	4a31      	ldr	r2, [pc, #196]	@ (8000620 <ESP_Init+0x20c>)
 800055c:	4932      	ldr	r1, [pc, #200]	@ (8000628 <ESP_Init+0x214>)
 800055e:	2408      	movs	r4, #8
 8000560:	193b      	adds	r3, r7, r4
 8000562:	0018      	movs	r0, r3
 8000564:	f003 ff14 	bl	8004390 <siprintf>
	Uart_sendstring(data, pc_uart);
 8000568:	4a1e      	ldr	r2, [pc, #120]	@ (80005e4 <ESP_Init+0x1d0>)
 800056a:	193b      	adds	r3, r7, r4
 800056c:	0011      	movs	r1, r2
 800056e:	0018      	movs	r0, r3
 8000570:	f001 f97a 	bl	8001868 <Uart_sendstring>


	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 8000574:	4a19      	ldr	r2, [pc, #100]	@ (80005dc <ESP_Init+0x1c8>)
 8000576:	4b2d      	ldr	r3, [pc, #180]	@ (800062c <ESP_Init+0x218>)
 8000578:	0011      	movs	r1, r2
 800057a:	0018      	movs	r0, r3
 800057c:	f001 f974 	bl	8001868 <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", wifi_uart)));
 8000580:	46c0      	nop			@ (mov r8, r8)
 8000582:	4a16      	ldr	r2, [pc, #88]	@ (80005dc <ESP_Init+0x1c8>)
 8000584:	4b2a      	ldr	r3, [pc, #168]	@ (8000630 <ESP_Init+0x21c>)
 8000586:	0011      	movs	r1, r2
 8000588:	0018      	movs	r0, r3
 800058a:	f001 fa05 	bl	8001998 <Wait_for>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d0f7      	beq.n	8000582 <ESP_Init+0x16e>
	Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 8000592:	4a14      	ldr	r2, [pc, #80]	@ (80005e4 <ESP_Init+0x1d0>)
 8000594:	4b27      	ldr	r3, [pc, #156]	@ (8000634 <ESP_Init+0x220>)
 8000596:	0011      	movs	r1, r2
 8000598:	0018      	movs	r0, r3
 800059a:	f001 f965 	bl	8001868 <Uart_sendstring>

	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 800059e:	4a0f      	ldr	r2, [pc, #60]	@ (80005dc <ESP_Init+0x1c8>)
 80005a0:	4b25      	ldr	r3, [pc, #148]	@ (8000638 <ESP_Init+0x224>)
 80005a2:	0011      	movs	r1, r2
 80005a4:	0018      	movs	r0, r3
 80005a6:	f001 f95f 	bl	8001868 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	4a0b      	ldr	r2, [pc, #44]	@ (80005dc <ESP_Init+0x1c8>)
 80005ae:	4b23      	ldr	r3, [pc, #140]	@ (800063c <ESP_Init+0x228>)
 80005b0:	0011      	movs	r1, r2
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 f9f0 	bl	8001998 <Wait_for>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d0f7      	beq.n	80005ac <ESP_Init+0x198>
	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 80005bc:	4a09      	ldr	r2, [pc, #36]	@ (80005e4 <ESP_Init+0x1d0>)
 80005be:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <ESP_Init+0x22c>)
 80005c0:	0011      	movs	r1, r2
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 f950 	bl	8001868 <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 80005c8:	4a06      	ldr	r2, [pc, #24]	@ (80005e4 <ESP_Init+0x1d0>)
 80005ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000644 <ESP_Init+0x230>)
 80005cc:	0011      	movs	r1, r2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 f94a 	bl	8001868 <Uart_sendstring>

}
 80005d4:	46c0      	nop			@ (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b019      	add	sp, #100	@ 0x64
 80005da:	bd90      	pop	{r4, r7, pc}
 80005dc:	200001ec 	.word	0x200001ec
 80005e0:	08004d2c 	.word	0x08004d2c
 80005e4:	20000274 	.word	0x20000274
 80005e8:	08004d38 	.word	0x08004d38
 80005ec:	08004d44 	.word	0x08004d44
 80005f0:	08004d48 	.word	0x08004d48
 80005f4:	08004d50 	.word	0x08004d50
 80005f8:	08004d5c 	.word	0x08004d5c
 80005fc:	08004d68 	.word	0x08004d68
 8000600:	08004d78 	.word	0x08004d78
 8000604:	08004d90 	.word	0x08004d90
 8000608:	08004da0 	.word	0x08004da0
 800060c:	08004dc4 	.word	0x08004dc4
 8000610:	08004ddc 	.word	0x08004ddc
 8000614:	08004df8 	.word	0x08004df8
 8000618:	08004e0c 	.word	0x08004e0c
 800061c:	08004e18 	.word	0x08004e18
 8000620:	20000078 	.word	0x20000078
 8000624:	08004e28 	.word	0x08004e28
 8000628:	08004e2c 	.word	0x08004e2c
 800062c:	08004e3c 	.word	0x08004e3c
 8000630:	08004e4c 	.word	0x08004e4c
 8000634:	08004e64 	.word	0x08004e64
 8000638:	08004e74 	.word	0x08004e74
 800063c:	08004e88 	.word	0x08004e88
 8000640:	08004e90 	.word	0x08004e90
 8000644:	08004ea4 	.word	0x08004ea4

08000648 <Server_Send>:

int Server_Send (char *str, int Link_ID)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b099      	sub	sp, #100	@ 0x64
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	0018      	movs	r0, r3
 8000656:	f7ff fd55 	bl	8000104 <strlen>
 800065a:	0003      	movs	r3, r0
 800065c:	65fb      	str	r3, [r7, #92]	@ 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 800065e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	491f      	ldr	r1, [pc, #124]	@ (80006e0 <Server_Send+0x98>)
 8000664:	240c      	movs	r4, #12
 8000666:	1938      	adds	r0, r7, r4
 8000668:	f003 fe92 	bl	8004390 <siprintf>
	Uart_sendstring(data, wifi_uart);
 800066c:	4a1d      	ldr	r2, [pc, #116]	@ (80006e4 <Server_Send+0x9c>)
 800066e:	193b      	adds	r3, r7, r4
 8000670:	0011      	movs	r1, r2
 8000672:	0018      	movs	r0, r3
 8000674:	f001 f8f8 	bl	8001868 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 8000678:	46c0      	nop			@ (mov r8, r8)
 800067a:	4a1a      	ldr	r2, [pc, #104]	@ (80006e4 <Server_Send+0x9c>)
 800067c:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <Server_Send+0xa0>)
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f001 f989 	bl	8001998 <Wait_for>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d0f7      	beq.n	800067a <Server_Send+0x32>
	Uart_sendstring (str, wifi_uart);
 800068a:	4a16      	ldr	r2, [pc, #88]	@ (80006e4 <Server_Send+0x9c>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f001 f8e9 	bl	8001868 <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	4a12      	ldr	r2, [pc, #72]	@ (80006e4 <Server_Send+0x9c>)
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <Server_Send+0xa4>)
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 f97a 	bl	8001998 <Wait_for>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d0f7      	beq.n	8000698 <Server_Send+0x50>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 80006a8:	4a11      	ldr	r2, [pc, #68]	@ (80006f0 <Server_Send+0xa8>)
 80006aa:	240c      	movs	r4, #12
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	0011      	movs	r1, r2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f003 fe6d 	bl	8004390 <siprintf>
	Uart_sendstring(data, wifi_uart);
 80006b6:	4a0b      	ldr	r2, [pc, #44]	@ (80006e4 <Server_Send+0x9c>)
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	0011      	movs	r1, r2
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 f8d3 	bl	8001868 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	4a07      	ldr	r2, [pc, #28]	@ (80006e4 <Server_Send+0x9c>)
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <Server_Send+0xac>)
 80006c8:	0011      	movs	r1, r2
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 f964 	bl	8001998 <Wait_for>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d0f7      	beq.n	80006c4 <Server_Send+0x7c>
	return 1;
 80006d4:	2301      	movs	r3, #1
}
 80006d6:	0018      	movs	r0, r3
 80006d8:	46bd      	mov	sp, r7
 80006da:	b019      	add	sp, #100	@ 0x64
 80006dc:	bd90      	pop	{r4, r7, pc}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	08004ec4 	.word	0x08004ec4
 80006e4:	200001ec 	.word	0x200001ec
 80006e8:	08004ed8 	.word	0x08004ed8
 80006ec:	08004edc 	.word	0x08004edc
 80006f0:	08004ee4 	.word	0x08004ee4
 80006f4:	08004e88 	.word	0x08004e88

080006f8 <Server_Start>:
{

}

void Server_Start (void)
{
 80006f8:	b5b0      	push	{r4, r5, r7, lr}
 80006fa:	4c73      	ldr	r4, [pc, #460]	@ (80008c8 <Server_Start+0x1d0>)
 80006fc:	44a5      	add	sp, r4
 80006fe:	af00      	add	r7, sp, #0

	char response[256];
	char buffer[512];
	int Link_ID;

	if (Wait_for("+IPD,", wifi_uart) == 1)
 8000700:	4a72      	ldr	r2, [pc, #456]	@ (80008cc <Server_Start+0x1d4>)
 8000702:	4b73      	ldr	r3, [pc, #460]	@ (80008d0 <Server_Start+0x1d8>)
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f001 f946 	bl	8001998 <Wait_for>
 800070c:	0003      	movs	r3, r0
 800070e:	2b01      	cmp	r3, #1
 8000710:	d000      	beq.n	8000714 <Server_Start+0x1c>
 8000712:	e0d2      	b.n	80008ba <Server_Start+0x1c2>
//		sprintf(log_msg, "GET string received at %lu ms\r\n", start_time);
//		Uart_sendstring(log_msg, pc_uart);

		// Get Link ID
		char link_id_char;
		while (!IsDataAvailable(wifi_uart));
 8000714:	46c0      	nop			@ (mov r8, r8)
 8000716:	4b6d      	ldr	r3, [pc, #436]	@ (80008cc <Server_Start+0x1d4>)
 8000718:	0018      	movs	r0, r3
 800071a:	f001 f86b 	bl	80017f4 <IsDataAvailable>
 800071e:	1e03      	subs	r3, r0, #0
 8000720:	d0f9      	beq.n	8000716 <Server_Start+0x1e>
		link_id_char = Uart_read(wifi_uart);
 8000722:	4b6a      	ldr	r3, [pc, #424]	@ (80008cc <Server_Start+0x1d4>)
 8000724:	0018      	movs	r0, r3
 8000726:	f000 ffa7 	bl	8001678 <Uart_read>
 800072a:	0002      	movs	r2, r0
 800072c:	4969      	ldr	r1, [pc, #420]	@ (80008d4 <Server_Start+0x1dc>)
 800072e:	187b      	adds	r3, r7, r1
 8000730:	701a      	strb	r2, [r3, #0]
		Link_ID = link_id_char - '0';
 8000732:	187b      	adds	r3, r7, r1
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	3b30      	subs	r3, #48	@ 0x30
 8000738:	22c4      	movs	r2, #196	@ 0xc4
 800073a:	0092      	lsls	r2, r2, #2
 800073c:	18ba      	adds	r2, r7, r2
 800073e:	6013      	str	r3, [r2, #0]

		// Skip until ':' (start of data)
		while (Uart_read(wifi_uart) != ':');
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	4b62      	ldr	r3, [pc, #392]	@ (80008cc <Server_Start+0x1d4>)
 8000744:	0018      	movs	r0, r3
 8000746:	f000 ff97 	bl	8001678 <Uart_read>
 800074a:	0003      	movs	r3, r0
 800074c:	2b3a      	cmp	r3, #58	@ 0x3a
 800074e:	d1f8      	bne.n	8000742 <Server_Start+0x4a>

		// Read request line (GET /?... HTTP/1.1)
		int i = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	22c7      	movs	r2, #199	@ 0xc7
 8000754:	0092      	lsls	r2, r2, #2
 8000756:	18ba      	adds	r2, r7, r2
 8000758:	6013      	str	r3, [r2, #0]
		int char_count = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	22c6      	movs	r2, #198	@ 0xc6
 800075e:	0092      	lsls	r2, r2, #2
 8000760:	18ba      	adds	r2, r7, r2
 8000762:	6013      	str	r3, [r2, #0]
		while (1)
		{
			while (!IsDataAvailable(wifi_uart));
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	4b59      	ldr	r3, [pc, #356]	@ (80008cc <Server_Start+0x1d4>)
 8000768:	0018      	movs	r0, r3
 800076a:	f001 f843 	bl	80017f4 <IsDataAvailable>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d0f9      	beq.n	8000766 <Server_Start+0x6e>
			char c = Uart_read(wifi_uart);
 8000772:	4b56      	ldr	r3, [pc, #344]	@ (80008cc <Server_Start+0x1d4>)
 8000774:	0018      	movs	r0, r3
 8000776:	f000 ff7f 	bl	8001678 <Uart_read>
 800077a:	0002      	movs	r2, r0
 800077c:	4856      	ldr	r0, [pc, #344]	@ (80008d8 <Server_Start+0x1e0>)
 800077e:	183b      	adds	r3, r7, r0
 8000780:	701a      	strb	r2, [r3, #0]
			if (c == '\n' || i >= sizeof(buffer) - 1) break;
 8000782:	183b      	adds	r3, r7, r0
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b0a      	cmp	r3, #10
 8000788:	d015      	beq.n	80007b6 <Server_Start+0xbe>
 800078a:	21c7      	movs	r1, #199	@ 0xc7
 800078c:	0089      	lsls	r1, r1, #2
 800078e:	187b      	adds	r3, r7, r1
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	23ff      	movs	r3, #255	@ 0xff
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	429a      	cmp	r2, r3
 8000798:	d80d      	bhi.n	80007b6 <Server_Start+0xbe>
			buffer[i++] = c;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	1879      	adds	r1, r7, r1
 80007a2:	600a      	str	r2, [r1, #0]
 80007a4:	4a48      	ldr	r2, [pc, #288]	@ (80008c8 <Server_Start+0x1d0>)
 80007a6:	21c8      	movs	r1, #200	@ 0xc8
 80007a8:	0089      	lsls	r1, r1, #2
 80007aa:	1852      	adds	r2, r2, r1
 80007ac:	19d2      	adds	r2, r2, r7
 80007ae:	1839      	adds	r1, r7, r0
 80007b0:	7809      	ldrb	r1, [r1, #0]
 80007b2:	54d1      	strb	r1, [r2, r3]
		{
 80007b4:	e7d6      	b.n	8000764 <Server_Start+0x6c>
		}
		buffer[i] = '\0';
 80007b6:	4b44      	ldr	r3, [pc, #272]	@ (80008c8 <Server_Start+0x1d0>)
 80007b8:	22c8      	movs	r2, #200	@ 0xc8
 80007ba:	0092      	lsls	r2, r2, #2
 80007bc:	189b      	adds	r3, r3, r2
 80007be:	19da      	adds	r2, r3, r7
 80007c0:	23c7      	movs	r3, #199	@ 0xc7
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	18fb      	adds	r3, r7, r3
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	18d3      	adds	r3, r2, r3
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]

		// Parse GET parameters
		char *param_start = strstr(buffer, "GET /?");
 80007ce:	4a43      	ldr	r2, [pc, #268]	@ (80008dc <Server_Start+0x1e4>)
 80007d0:	003b      	movs	r3, r7
 80007d2:	0011      	movs	r1, r2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f003 fe11 	bl	80043fc <strstr>
 80007da:	0003      	movs	r3, r0
 80007dc:	24c2      	movs	r4, #194	@ 0xc2
 80007de:	00a4      	lsls	r4, r4, #2
 80007e0:	193a      	adds	r2, r7, r4
 80007e2:	6013      	str	r3, [r2, #0]
		if (param_start)
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d066      	beq.n	80008ba <Server_Start+0x1c2>
		{
			param_start += strlen("GET /?");
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3306      	adds	r3, #6
 80007f2:	193a      	adds	r2, r7, r4
 80007f4:	6013      	str	r3, [r2, #0]
			char *param_end = strchr(param_start, ' ');
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	2120      	movs	r1, #32
 80007fc:	0018      	movs	r0, r3
 80007fe:	f003 fdef 	bl	80043e0 <strchr>
 8000802:	0003      	movs	r3, r0
 8000804:	22c1      	movs	r2, #193	@ 0xc1
 8000806:	0092      	lsls	r2, r2, #2
 8000808:	18b9      	adds	r1, r7, r2
 800080a:	600b      	str	r3, [r1, #0]
			if (param_end)
 800080c:	18bb      	adds	r3, r7, r2
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d052      	beq.n	80008ba <Server_Start+0x1c2>
			{
				*param_end = '\0'; // Null-terminate param string
 8000814:	18bb      	adds	r3, r7, r2
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]

				// Optional debug
				Uart_sendstring("GET parameters: ", pc_uart);
 800081c:	4a30      	ldr	r2, [pc, #192]	@ (80008e0 <Server_Start+0x1e8>)
 800081e:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <Server_Start+0x1ec>)
 8000820:	0011      	movs	r1, r2
 8000822:	0018      	movs	r0, r3
 8000824:	f001 f820 	bl	8001868 <Uart_sendstring>
				Uart_sendstring(param_start, pc_uart);
 8000828:	4a2d      	ldr	r2, [pc, #180]	@ (80008e0 <Server_Start+0x1e8>)
 800082a:	193b      	adds	r3, r7, r4
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f001 f819 	bl	8001868 <Uart_sendstring>
				Uart_sendstring("\n", pc_uart);
 8000836:	4a2a      	ldr	r2, [pc, #168]	@ (80008e0 <Server_Start+0x1e8>)
 8000838:	4b2b      	ldr	r3, [pc, #172]	@ (80008e8 <Server_Start+0x1f0>)
 800083a:	0011      	movs	r1, r2
 800083c:	0018      	movs	r0, r3
 800083e:	f001 f813 	bl	8001868 <Uart_sendstring>

				sprintf(response,
 8000842:	4a2a      	ldr	r2, [pc, #168]	@ (80008ec <Server_Start+0x1f4>)
 8000844:	2480      	movs	r4, #128	@ 0x80
 8000846:	00a4      	lsls	r4, r4, #2
 8000848:	193b      	adds	r3, r7, r4
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f003 fd9f 	bl	8004390 <siprintf>
					"HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\nOK\r\n");

				Server_Send(response, Link_ID);
 8000852:	23c4      	movs	r3, #196	@ 0xc4
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	18fb      	adds	r3, r7, r3
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	193b      	adds	r3, r7, r4
 800085c:	0011      	movs	r1, r2
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff fef2 	bl	8000648 <Server_Send>
//				Reset_Braille();
//				Handle_Braille_Second(param_start[0]);

//				Reset_Braille();
//
				uint32_t end_time = HAL_GetTick();
 8000864:	f001 fcd0 	bl	8002208 <HAL_GetTick>
 8000868:	0003      	movs	r3, r0
 800086a:	22c0      	movs	r2, #192	@ 0xc0
 800086c:	0092      	lsls	r2, r2, #2
 800086e:	18ba      	adds	r2, r7, r2
 8000870:	6013      	str	r3, [r2, #0]
//				sprintf(log_msg, "Finished processing at %lu ms\r\n", end_time);
//				Uart_sendstring(log_msg, pc_uart);
				do {
						Handle_Braille_Second(param_start[char_count]);
 8000872:	24c6      	movs	r4, #198	@ 0xc6
 8000874:	00a4      	lsls	r4, r4, #2
 8000876:	193b      	adds	r3, r7, r4
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	25c2      	movs	r5, #194	@ 0xc2
 800087c:	00ad      	lsls	r5, r5, #2
 800087e:	197a      	adds	r2, r7, r5
 8000880:	6812      	ldr	r2, [r2, #0]
 8000882:	18d3      	adds	r3, r2, r3
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	0018      	movs	r0, r3
 8000888:	f000 f8d8 	bl	8000a3c <Handle_Braille_Second>

						char_count += 1;
 800088c:	193b      	adds	r3, r7, r4
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	3301      	adds	r3, #1
 8000892:	193a      	adds	r2, r7, r4
 8000894:	6013      	str	r3, [r2, #0]
						HAL_Delay(1000);
 8000896:	23fa      	movs	r3, #250	@ 0xfa
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fcbe 	bl	800221c <HAL_Delay>
//						Reset_Braille();
				} while (strlen(param_start) - char_count > 0);
 80008a0:	197b      	adds	r3, r7, r5
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	0018      	movs	r0, r3
 80008a6:	f7ff fc2d 	bl	8000104 <strlen>
 80008aa:	0002      	movs	r2, r0
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d1de      	bne.n	8000872 <Server_Start+0x17a>
				Handle_Braille_Second('_');
 80008b4:	205f      	movs	r0, #95	@ 0x5f
 80008b6:	f000 f8c1 	bl	8000a3c <Handle_Braille_Second>
			}
		}


	}
}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	23c8      	movs	r3, #200	@ 0xc8
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	449d      	add	sp, r3
 80008c4:	bdb0      	pop	{r4, r5, r7, pc}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	fffffce0 	.word	0xfffffce0
 80008cc:	200001ec 	.word	0x200001ec
 80008d0:	08004ef4 	.word	0x08004ef4
 80008d4:	00000317 	.word	0x00000317
 80008d8:	0000030f 	.word	0x0000030f
 80008dc:	08004efc 	.word	0x08004efc
 80008e0:	20000274 	.word	0x20000274
 80008e4:	08004f04 	.word	0x08004f04
 80008e8:	08004f18 	.word	0x08004f18
 80008ec:	08004f1c 	.word	0x08004f1c

080008f0 <setvalue>:
{
	Handle_Braille(letter1);
	Handle_Braille_Second(letter2);
}

void setvalue(int value, int state, int* braille_arr){
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
    if(braille_arr[value] == state){
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	18d3      	adds	r3, r2, r3
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	429a      	cmp	r2, r3
 800090a:	d100      	bne.n	800090e <setvalue+0x1e>
 800090c:	e076      	b.n	80009fc <setvalue+0x10c>
        return;
    }
    setpin(13,value/6);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2106      	movs	r1, #6
 8000912:	0018      	movs	r0, r3
 8000914:	f7ff fc92 	bl	800023c <__divsi3>
 8000918:	0003      	movs	r3, r0
 800091a:	0019      	movs	r1, r3
 800091c:	200d      	movs	r0, #13
 800091e:	f000 f873 	bl	8000a08 <setpin>
    setpin(8,(value % 6) % 2);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2106      	movs	r1, #6
 8000926:	0018      	movs	r0, r3
 8000928:	f7ff fd6e 	bl	8000408 <__aeabi_idivmod>
 800092c:	000b      	movs	r3, r1
 800092e:	001a      	movs	r2, r3
 8000930:	4b34      	ldr	r3, [pc, #208]	@ (8000a04 <setvalue+0x114>)
 8000932:	4013      	ands	r3, r2
 8000934:	d504      	bpl.n	8000940 <setvalue+0x50>
 8000936:	3b01      	subs	r3, #1
 8000938:	2202      	movs	r2, #2
 800093a:	4252      	negs	r2, r2
 800093c:	4313      	orrs	r3, r2
 800093e:	3301      	adds	r3, #1
 8000940:	0019      	movs	r1, r3
 8000942:	2008      	movs	r0, #8
 8000944:	f000 f860 	bl	8000a08 <setpin>
    setpin(9,((value % 6) / 2) % 2);
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2106      	movs	r1, #6
 800094c:	0018      	movs	r0, r3
 800094e:	f7ff fd5b 	bl	8000408 <__aeabi_idivmod>
 8000952:	1e0b      	subs	r3, r1, #0
 8000954:	da00      	bge.n	8000958 <setvalue+0x68>
 8000956:	3301      	adds	r3, #1
 8000958:	105b      	asrs	r3, r3, #1
 800095a:	001a      	movs	r2, r3
 800095c:	4b29      	ldr	r3, [pc, #164]	@ (8000a04 <setvalue+0x114>)
 800095e:	4013      	ands	r3, r2
 8000960:	d504      	bpl.n	800096c <setvalue+0x7c>
 8000962:	3b01      	subs	r3, #1
 8000964:	2202      	movs	r2, #2
 8000966:	4252      	negs	r2, r2
 8000968:	4313      	orrs	r3, r2
 800096a:	3301      	adds	r3, #1
 800096c:	0019      	movs	r1, r3
 800096e:	2009      	movs	r0, #9
 8000970:	f000 f84a 	bl	8000a08 <setpin>
    setpin(10,((value % 6) / 4) % 2);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2106      	movs	r1, #6
 8000978:	0018      	movs	r0, r3
 800097a:	f7ff fd45 	bl	8000408 <__aeabi_idivmod>
 800097e:	1e0b      	subs	r3, r1, #0
 8000980:	da00      	bge.n	8000984 <setvalue+0x94>
 8000982:	3303      	adds	r3, #3
 8000984:	109b      	asrs	r3, r3, #2
 8000986:	001a      	movs	r2, r3
 8000988:	4b1e      	ldr	r3, [pc, #120]	@ (8000a04 <setvalue+0x114>)
 800098a:	4013      	ands	r3, r2
 800098c:	d504      	bpl.n	8000998 <setvalue+0xa8>
 800098e:	3b01      	subs	r3, #1
 8000990:	2202      	movs	r2, #2
 8000992:	4252      	negs	r2, r2
 8000994:	4313      	orrs	r3, r2
 8000996:	3301      	adds	r3, #1
 8000998:	0019      	movs	r1, r3
 800099a:	200a      	movs	r0, #10
 800099c:	f000 f834 	bl	8000a08 <setpin>
    if(state == 0){
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10d      	bne.n	80009c2 <setvalue+0xd2>
        setpin(11,0);
 80009a6:	2100      	movs	r1, #0
 80009a8:	200b      	movs	r0, #11
 80009aa:	f000 f82d 	bl	8000a08 <setpin>
        setpin(12,1);
 80009ae:	2101      	movs	r1, #1
 80009b0:	200c      	movs	r0, #12
 80009b2:	f000 f829 	bl	8000a08 <setpin>
        braille_arr[value] = 0;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	18d3      	adds	r3, r2, r3
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
    }
    if(state == 1){
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d10d      	bne.n	80009e4 <setvalue+0xf4>
        setpin(11,1);
 80009c8:	2101      	movs	r1, #1
 80009ca:	200b      	movs	r0, #11
 80009cc:	f000 f81c 	bl	8000a08 <setpin>
        setpin(12,0);
 80009d0:	2100      	movs	r1, #0
 80009d2:	200c      	movs	r0, #12
 80009d4:	f000 f818 	bl	8000a08 <setpin>
        braille_arr[value] = 1;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	18d3      	adds	r3, r2, r3
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
    }

    HAL_Delay(200);
 80009e4:	20c8      	movs	r0, #200	@ 0xc8
 80009e6:	f001 fc19 	bl	800221c <HAL_Delay>

    setpin(11,0);
 80009ea:	2100      	movs	r1, #0
 80009ec:	200b      	movs	r0, #11
 80009ee:	f000 f80b 	bl	8000a08 <setpin>
    setpin(12,0);
 80009f2:	2100      	movs	r1, #0
 80009f4:	200c      	movs	r0, #12
 80009f6:	f000 f807 	bl	8000a08 <setpin>
 80009fa:	e000      	b.n	80009fe <setvalue+0x10e>
        return;
 80009fc:	46c0      	nop			@ (mov r8, r8)
}
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b004      	add	sp, #16
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	80000001 	.word	0x80000001

08000a08 <setpin>:

void setpin(int pin, int state) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
    if (state) {
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d005      	beq.n	8000a24 <setpin+0x1c>
        GPIOB->BSRR = (1 << pin);  // Set pin (turn ON)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	409a      	lsls	r2, r3
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <setpin+0x30>)
 8000a20:	619a      	str	r2, [r3, #24]
    } else {
        GPIOB->BSRR = (1 << (pin + 16)); // Reset pin (turn OFF)
    }
}
 8000a22:	e005      	b.n	8000a30 <setpin+0x28>
        GPIOB->BSRR = (1 << (pin + 16)); // Reset pin (turn OFF)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3310      	adds	r3, #16
 8000a28:	2201      	movs	r2, #1
 8000a2a:	409a      	lsls	r2, r3
 8000a2c:	4b02      	ldr	r3, [pc, #8]	@ (8000a38 <setpin+0x30>)
 8000a2e:	619a      	str	r2, [r3, #24]
}
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b002      	add	sp, #8
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	48000400 	.word	0x48000400

08000a3c <Handle_Braille_Second>:
		  setvalue(4, 1, braille_arr);
		  setvalue(5, 1, braille_arr);
	  }
}

void Handle_Braille_Second (char letter) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	0002      	movs	r2, r0
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	701a      	strb	r2, [r3, #0]
	  if(letter == 'a' || letter == 'A')
 8000a48:	1dfb      	adds	r3, r7, #7
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b61      	cmp	r3, #97	@ 0x61
 8000a4e:	d003      	beq.n	8000a58 <Handle_Braille_Second+0x1c>
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b41      	cmp	r3, #65	@ 0x41
 8000a56:	d125      	bne.n	8000aa4 <Handle_Braille_Second+0x68>
	  {
		  setvalue(6, 1, braille_arr);
 8000a58:	4be1      	ldr	r3, [pc, #900]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	2006      	movs	r0, #6
 8000a60:	f7ff ff46 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 8000a64:	4bde      	ldr	r3, [pc, #888]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000a66:	001a      	movs	r2, r3
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2007      	movs	r0, #7
 8000a6c:	f7ff ff40 	bl	80008f0 <setvalue>
		  setvalue(8, 0, braille_arr);
 8000a70:	4bdb      	ldr	r3, [pc, #876]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000a72:	001a      	movs	r2, r3
 8000a74:	2100      	movs	r1, #0
 8000a76:	2008      	movs	r0, #8
 8000a78:	f7ff ff3a 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 8000a7c:	4bd8      	ldr	r3, [pc, #864]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000a7e:	001a      	movs	r2, r3
 8000a80:	2100      	movs	r1, #0
 8000a82:	2009      	movs	r0, #9
 8000a84:	f7ff ff34 	bl	80008f0 <setvalue>
		  setvalue(10, 0, braille_arr);
 8000a88:	4bd5      	ldr	r3, [pc, #852]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	200a      	movs	r0, #10
 8000a90:	f7ff ff2e 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000a94:	4bd2      	ldr	r3, [pc, #840]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000a96:	001a      	movs	r2, r3
 8000a98:	2100      	movs	r1, #0
 8000a9a:	200b      	movs	r0, #11
 8000a9c:	f7ff ff28 	bl	80008f0 <setvalue>
 8000aa0:	f000 fd42 	bl	8001528 <Handle_Braille_Second+0xaec>

	  }
	  else if(letter == 'b' || letter == 'B')
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b62      	cmp	r3, #98	@ 0x62
 8000aaa:	d003      	beq.n	8000ab4 <Handle_Braille_Second+0x78>
 8000aac:	1dfb      	adds	r3, r7, #7
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b42      	cmp	r3, #66	@ 0x42
 8000ab2:	d125      	bne.n	8000b00 <Handle_Braille_Second+0xc4>
	  {
		  setvalue(6, 1, braille_arr);
 8000ab4:	4bca      	ldr	r3, [pc, #808]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	2101      	movs	r1, #1
 8000aba:	2006      	movs	r0, #6
 8000abc:	f7ff ff18 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 8000ac0:	4bc7      	ldr	r3, [pc, #796]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2007      	movs	r0, #7
 8000ac8:	f7ff ff12 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 8000acc:	4bc4      	ldr	r3, [pc, #784]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000ace:	001a      	movs	r2, r3
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	2008      	movs	r0, #8
 8000ad4:	f7ff ff0c 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 8000ad8:	4bc1      	ldr	r3, [pc, #772]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000ada:	001a      	movs	r2, r3
 8000adc:	2100      	movs	r1, #0
 8000ade:	2009      	movs	r0, #9
 8000ae0:	f7ff ff06 	bl	80008f0 <setvalue>
		  setvalue(10, 0, braille_arr);
 8000ae4:	4bbe      	ldr	r3, [pc, #760]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000ae6:	001a      	movs	r2, r3
 8000ae8:	2100      	movs	r1, #0
 8000aea:	200a      	movs	r0, #10
 8000aec:	f7ff ff00 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000af0:	4bbb      	ldr	r3, [pc, #748]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000af2:	001a      	movs	r2, r3
 8000af4:	2100      	movs	r1, #0
 8000af6:	200b      	movs	r0, #11
 8000af8:	f7ff fefa 	bl	80008f0 <setvalue>
 8000afc:	f000 fd14 	bl	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'c' || letter == 'C')
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b63      	cmp	r3, #99	@ 0x63
 8000b06:	d003      	beq.n	8000b10 <Handle_Braille_Second+0xd4>
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b43      	cmp	r3, #67	@ 0x43
 8000b0e:	d125      	bne.n	8000b5c <Handle_Braille_Second+0x120>
	  {
		  setvalue(6, 1, braille_arr);
 8000b10:	4bb3      	ldr	r3, [pc, #716]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000b12:	001a      	movs	r2, r3
 8000b14:	2101      	movs	r1, #1
 8000b16:	2006      	movs	r0, #6
 8000b18:	f7ff feea 	bl	80008f0 <setvalue>
		  setvalue(7, 1, braille_arr);
 8000b1c:	4bb0      	ldr	r3, [pc, #704]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000b1e:	001a      	movs	r2, r3
 8000b20:	2101      	movs	r1, #1
 8000b22:	2007      	movs	r0, #7
 8000b24:	f7ff fee4 	bl	80008f0 <setvalue>
		  setvalue(8, 0, braille_arr);
 8000b28:	4bad      	ldr	r3, [pc, #692]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000b2a:	001a      	movs	r2, r3
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2008      	movs	r0, #8
 8000b30:	f7ff fede 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 8000b34:	4baa      	ldr	r3, [pc, #680]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000b36:	001a      	movs	r2, r3
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2009      	movs	r0, #9
 8000b3c:	f7ff fed8 	bl	80008f0 <setvalue>
		  setvalue(10, 0, braille_arr);
 8000b40:	4ba7      	ldr	r3, [pc, #668]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000b42:	001a      	movs	r2, r3
 8000b44:	2100      	movs	r1, #0
 8000b46:	200a      	movs	r0, #10
 8000b48:	f7ff fed2 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000b4c:	4ba4      	ldr	r3, [pc, #656]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000b4e:	001a      	movs	r2, r3
 8000b50:	2100      	movs	r1, #0
 8000b52:	200b      	movs	r0, #11
 8000b54:	f7ff fecc 	bl	80008f0 <setvalue>
 8000b58:	f000 fce6 	bl	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'd' ||  letter == 'D')
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b64      	cmp	r3, #100	@ 0x64
 8000b62:	d003      	beq.n	8000b6c <Handle_Braille_Second+0x130>
 8000b64:	1dfb      	adds	r3, r7, #7
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b44      	cmp	r3, #68	@ 0x44
 8000b6a:	d125      	bne.n	8000bb8 <Handle_Braille_Second+0x17c>
	  {
		  setvalue(6, 1, braille_arr);
 8000b6c:	4b9c      	ldr	r3, [pc, #624]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000b6e:	001a      	movs	r2, r3
 8000b70:	2101      	movs	r1, #1
 8000b72:	2006      	movs	r0, #6
 8000b74:	f7ff febc 	bl	80008f0 <setvalue>
		  setvalue(7, 1, braille_arr);
 8000b78:	4b99      	ldr	r3, [pc, #612]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	2007      	movs	r0, #7
 8000b80:	f7ff feb6 	bl	80008f0 <setvalue>
		  setvalue(8, 0, braille_arr);
 8000b84:	4b96      	ldr	r3, [pc, #600]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000b86:	001a      	movs	r2, r3
 8000b88:	2100      	movs	r1, #0
 8000b8a:	2008      	movs	r0, #8
 8000b8c:	f7ff feb0 	bl	80008f0 <setvalue>
		  setvalue(9, 1, braille_arr);
 8000b90:	4b93      	ldr	r3, [pc, #588]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000b92:	001a      	movs	r2, r3
 8000b94:	2101      	movs	r1, #1
 8000b96:	2009      	movs	r0, #9
 8000b98:	f7ff feaa 	bl	80008f0 <setvalue>
		  setvalue(10, 0, braille_arr);
 8000b9c:	4b90      	ldr	r3, [pc, #576]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	200a      	movs	r0, #10
 8000ba4:	f7ff fea4 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000ba8:	4b8d      	ldr	r3, [pc, #564]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000baa:	001a      	movs	r2, r3
 8000bac:	2100      	movs	r1, #0
 8000bae:	200b      	movs	r0, #11
 8000bb0:	f7ff fe9e 	bl	80008f0 <setvalue>
 8000bb4:	f000 fcb8 	bl	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'e' || letter == 'E')
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b65      	cmp	r3, #101	@ 0x65
 8000bbe:	d003      	beq.n	8000bc8 <Handle_Braille_Second+0x18c>
 8000bc0:	1dfb      	adds	r3, r7, #7
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b45      	cmp	r3, #69	@ 0x45
 8000bc6:	d125      	bne.n	8000c14 <Handle_Braille_Second+0x1d8>
	  {
		  setvalue(6, 1, braille_arr);
 8000bc8:	4b85      	ldr	r3, [pc, #532]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000bca:	001a      	movs	r2, r3
 8000bcc:	2101      	movs	r1, #1
 8000bce:	2006      	movs	r0, #6
 8000bd0:	f7ff fe8e 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 8000bd4:	4b82      	ldr	r3, [pc, #520]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000bd6:	001a      	movs	r2, r3
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2007      	movs	r0, #7
 8000bdc:	f7ff fe88 	bl	80008f0 <setvalue>
		  setvalue(8, 0, braille_arr);
 8000be0:	4b7f      	ldr	r3, [pc, #508]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000be2:	001a      	movs	r2, r3
 8000be4:	2100      	movs	r1, #0
 8000be6:	2008      	movs	r0, #8
 8000be8:	f7ff fe82 	bl	80008f0 <setvalue>
		  setvalue(9, 1, braille_arr);
 8000bec:	4b7c      	ldr	r3, [pc, #496]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000bee:	001a      	movs	r2, r3
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2009      	movs	r0, #9
 8000bf4:	f7ff fe7c 	bl	80008f0 <setvalue>
		  setvalue(10, 0, braille_arr);
 8000bf8:	4b79      	ldr	r3, [pc, #484]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	200a      	movs	r0, #10
 8000c00:	f7ff fe76 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000c04:	4b76      	ldr	r3, [pc, #472]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000c06:	001a      	movs	r2, r3
 8000c08:	2100      	movs	r1, #0
 8000c0a:	200b      	movs	r0, #11
 8000c0c:	f7ff fe70 	bl	80008f0 <setvalue>
 8000c10:	f000 fc8a 	bl	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'f' || letter == 'F')
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b66      	cmp	r3, #102	@ 0x66
 8000c1a:	d003      	beq.n	8000c24 <Handle_Braille_Second+0x1e8>
 8000c1c:	1dfb      	adds	r3, r7, #7
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b46      	cmp	r3, #70	@ 0x46
 8000c22:	d125      	bne.n	8000c70 <Handle_Braille_Second+0x234>
	  {
		  setvalue(6, 1, braille_arr);
 8000c24:	4b6e      	ldr	r3, [pc, #440]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000c26:	001a      	movs	r2, r3
 8000c28:	2101      	movs	r1, #1
 8000c2a:	2006      	movs	r0, #6
 8000c2c:	f7ff fe60 	bl	80008f0 <setvalue>
		  setvalue(7, 1, braille_arr);
 8000c30:	4b6b      	ldr	r3, [pc, #428]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000c32:	001a      	movs	r2, r3
 8000c34:	2101      	movs	r1, #1
 8000c36:	2007      	movs	r0, #7
 8000c38:	f7ff fe5a 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 8000c3c:	4b68      	ldr	r3, [pc, #416]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000c3e:	001a      	movs	r2, r3
 8000c40:	2101      	movs	r1, #1
 8000c42:	2008      	movs	r0, #8
 8000c44:	f7ff fe54 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 8000c48:	4b65      	ldr	r3, [pc, #404]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000c4a:	001a      	movs	r2, r3
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2009      	movs	r0, #9
 8000c50:	f7ff fe4e 	bl	80008f0 <setvalue>
		  setvalue(10, 0, braille_arr);
 8000c54:	4b62      	ldr	r3, [pc, #392]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000c56:	001a      	movs	r2, r3
 8000c58:	2100      	movs	r1, #0
 8000c5a:	200a      	movs	r0, #10
 8000c5c:	f7ff fe48 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000c60:	4b5f      	ldr	r3, [pc, #380]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000c62:	001a      	movs	r2, r3
 8000c64:	2100      	movs	r1, #0
 8000c66:	200b      	movs	r0, #11
 8000c68:	f7ff fe42 	bl	80008f0 <setvalue>
 8000c6c:	f000 fc5c 	bl	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'g' || letter == 'G')
 8000c70:	1dfb      	adds	r3, r7, #7
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b67      	cmp	r3, #103	@ 0x67
 8000c76:	d003      	beq.n	8000c80 <Handle_Braille_Second+0x244>
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b47      	cmp	r3, #71	@ 0x47
 8000c7e:	d125      	bne.n	8000ccc <Handle_Braille_Second+0x290>
	  {
		  setvalue(6, 1, braille_arr);
 8000c80:	4b57      	ldr	r3, [pc, #348]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000c82:	001a      	movs	r2, r3
 8000c84:	2101      	movs	r1, #1
 8000c86:	2006      	movs	r0, #6
 8000c88:	f7ff fe32 	bl	80008f0 <setvalue>
		  setvalue(7, 1, braille_arr);
 8000c8c:	4b54      	ldr	r3, [pc, #336]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000c8e:	001a      	movs	r2, r3
 8000c90:	2101      	movs	r1, #1
 8000c92:	2007      	movs	r0, #7
 8000c94:	f7ff fe2c 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 8000c98:	4b51      	ldr	r3, [pc, #324]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000c9a:	001a      	movs	r2, r3
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	2008      	movs	r0, #8
 8000ca0:	f7ff fe26 	bl	80008f0 <setvalue>
		  setvalue(9, 1, braille_arr);
 8000ca4:	4b4e      	ldr	r3, [pc, #312]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	2101      	movs	r1, #1
 8000caa:	2009      	movs	r0, #9
 8000cac:	f7ff fe20 	bl	80008f0 <setvalue>
		  setvalue(10, 0, braille_arr);
 8000cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	200a      	movs	r0, #10
 8000cb8:	f7ff fe1a 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000cbc:	4b48      	ldr	r3, [pc, #288]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000cbe:	001a      	movs	r2, r3
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	200b      	movs	r0, #11
 8000cc4:	f7ff fe14 	bl	80008f0 <setvalue>
 8000cc8:	f000 fc2e 	bl	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'h' || letter == 'H')
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b68      	cmp	r3, #104	@ 0x68
 8000cd2:	d003      	beq.n	8000cdc <Handle_Braille_Second+0x2a0>
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b48      	cmp	r3, #72	@ 0x48
 8000cda:	d125      	bne.n	8000d28 <Handle_Braille_Second+0x2ec>
	  {
		  setvalue(6, 1, braille_arr);
 8000cdc:	4b40      	ldr	r3, [pc, #256]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000cde:	001a      	movs	r2, r3
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	2006      	movs	r0, #6
 8000ce4:	f7ff fe04 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 8000ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000cea:	001a      	movs	r2, r3
 8000cec:	2100      	movs	r1, #0
 8000cee:	2007      	movs	r0, #7
 8000cf0:	f7ff fdfe 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	2008      	movs	r0, #8
 8000cfc:	f7ff fdf8 	bl	80008f0 <setvalue>
		  setvalue(9, 1, braille_arr);
 8000d00:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000d02:	001a      	movs	r2, r3
 8000d04:	2101      	movs	r1, #1
 8000d06:	2009      	movs	r0, #9
 8000d08:	f7ff fdf2 	bl	80008f0 <setvalue>
		  setvalue(10, 0, braille_arr);
 8000d0c:	4b34      	ldr	r3, [pc, #208]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000d0e:	001a      	movs	r2, r3
 8000d10:	2100      	movs	r1, #0
 8000d12:	200a      	movs	r0, #10
 8000d14:	f7ff fdec 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000d18:	4b31      	ldr	r3, [pc, #196]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	200b      	movs	r0, #11
 8000d20:	f7ff fde6 	bl	80008f0 <setvalue>
 8000d24:	f000 fc00 	bl	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'i' || letter == 'I')
 8000d28:	1dfb      	adds	r3, r7, #7
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b69      	cmp	r3, #105	@ 0x69
 8000d2e:	d003      	beq.n	8000d38 <Handle_Braille_Second+0x2fc>
 8000d30:	1dfb      	adds	r3, r7, #7
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b49      	cmp	r3, #73	@ 0x49
 8000d36:	d125      	bne.n	8000d84 <Handle_Braille_Second+0x348>
	  {
		  setvalue(6, 0, braille_arr);
 8000d38:	4b29      	ldr	r3, [pc, #164]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000d3a:	001a      	movs	r2, r3
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2006      	movs	r0, #6
 8000d40:	f7ff fdd6 	bl	80008f0 <setvalue>
		  setvalue(7, 1, braille_arr);
 8000d44:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000d46:	001a      	movs	r2, r3
 8000d48:	2101      	movs	r1, #1
 8000d4a:	2007      	movs	r0, #7
 8000d4c:	f7ff fdd0 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 8000d50:	4b23      	ldr	r3, [pc, #140]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000d52:	001a      	movs	r2, r3
 8000d54:	2101      	movs	r1, #1
 8000d56:	2008      	movs	r0, #8
 8000d58:	f7ff fdca 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 8000d5c:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000d5e:	001a      	movs	r2, r3
 8000d60:	2100      	movs	r1, #0
 8000d62:	2009      	movs	r0, #9
 8000d64:	f7ff fdc4 	bl	80008f0 <setvalue>
		  setvalue(10, 0, braille_arr);
 8000d68:	4b1d      	ldr	r3, [pc, #116]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000d6a:	001a      	movs	r2, r3
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	200a      	movs	r0, #10
 8000d70:	f7ff fdbe 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000d74:	4b1a      	ldr	r3, [pc, #104]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000d76:	001a      	movs	r2, r3
 8000d78:	2100      	movs	r1, #0
 8000d7a:	200b      	movs	r0, #11
 8000d7c:	f7ff fdb8 	bl	80008f0 <setvalue>
 8000d80:	f000 fbd2 	bl	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'j' || letter == 'J')
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b6a      	cmp	r3, #106	@ 0x6a
 8000d8a:	d003      	beq.n	8000d94 <Handle_Braille_Second+0x358>
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b4a      	cmp	r3, #74	@ 0x4a
 8000d92:	d127      	bne.n	8000de4 <Handle_Braille_Second+0x3a8>
	  {
		  setvalue(6, 0, braille_arr);
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000d96:	001a      	movs	r2, r3
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2006      	movs	r0, #6
 8000d9c:	f7ff fda8 	bl	80008f0 <setvalue>
		  setvalue(7, 1, braille_arr);
 8000da0:	4b0f      	ldr	r3, [pc, #60]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000da2:	001a      	movs	r2, r3
 8000da4:	2101      	movs	r1, #1
 8000da6:	2007      	movs	r0, #7
 8000da8:	f7ff fda2 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000dae:	001a      	movs	r2, r3
 8000db0:	2101      	movs	r1, #1
 8000db2:	2008      	movs	r0, #8
 8000db4:	f7ff fd9c 	bl	80008f0 <setvalue>
		  setvalue(9, 1, braille_arr);
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000dba:	001a      	movs	r2, r3
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	2009      	movs	r0, #9
 8000dc0:	f7ff fd96 	bl	80008f0 <setvalue>
		  setvalue(10, 0, braille_arr);
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000dc6:	001a      	movs	r2, r3
 8000dc8:	2100      	movs	r1, #0
 8000dca:	200a      	movs	r0, #10
 8000dcc:	f7ff fd90 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000dd0:	4b03      	ldr	r3, [pc, #12]	@ (8000de0 <Handle_Braille_Second+0x3a4>)
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	200b      	movs	r0, #11
 8000dd8:	f7ff fd8a 	bl	80008f0 <setvalue>
 8000ddc:	f000 fba4 	bl	8001528 <Handle_Braille_Second+0xaec>
 8000de0:	2000008c 	.word	0x2000008c
	  }
	  else if(letter == 'k' || letter == 'K')
 8000de4:	1dfb      	adds	r3, r7, #7
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b6b      	cmp	r3, #107	@ 0x6b
 8000dea:	d003      	beq.n	8000df4 <Handle_Braille_Second+0x3b8>
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b4b      	cmp	r3, #75	@ 0x4b
 8000df2:	d124      	bne.n	8000e3e <Handle_Braille_Second+0x402>
	  {
		  setvalue(6, 1, braille_arr);
 8000df4:	4bdc      	ldr	r3, [pc, #880]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000df6:	001a      	movs	r2, r3
 8000df8:	2101      	movs	r1, #1
 8000dfa:	2006      	movs	r0, #6
 8000dfc:	f7ff fd78 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 8000e00:	4bd9      	ldr	r3, [pc, #868]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000e02:	001a      	movs	r2, r3
 8000e04:	2100      	movs	r1, #0
 8000e06:	2007      	movs	r0, #7
 8000e08:	f7ff fd72 	bl	80008f0 <setvalue>
		  setvalue(8, 0, braille_arr);
 8000e0c:	4bd6      	ldr	r3, [pc, #856]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000e0e:	001a      	movs	r2, r3
 8000e10:	2100      	movs	r1, #0
 8000e12:	2008      	movs	r0, #8
 8000e14:	f7ff fd6c 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 8000e18:	4bd3      	ldr	r3, [pc, #844]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000e1a:	001a      	movs	r2, r3
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2009      	movs	r0, #9
 8000e20:	f7ff fd66 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 8000e24:	4bd0      	ldr	r3, [pc, #832]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000e26:	001a      	movs	r2, r3
 8000e28:	2101      	movs	r1, #1
 8000e2a:	200a      	movs	r0, #10
 8000e2c:	f7ff fd60 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000e30:	4bcd      	ldr	r3, [pc, #820]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000e32:	001a      	movs	r2, r3
 8000e34:	2100      	movs	r1, #0
 8000e36:	200b      	movs	r0, #11
 8000e38:	f7ff fd5a 	bl	80008f0 <setvalue>
 8000e3c:	e374      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'l' || letter == 'L')
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b6c      	cmp	r3, #108	@ 0x6c
 8000e44:	d003      	beq.n	8000e4e <Handle_Braille_Second+0x412>
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b4c      	cmp	r3, #76	@ 0x4c
 8000e4c:	d124      	bne.n	8000e98 <Handle_Braille_Second+0x45c>
	  {
		  setvalue(6, 1, braille_arr);
 8000e4e:	4bc6      	ldr	r3, [pc, #792]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000e50:	001a      	movs	r2, r3
 8000e52:	2101      	movs	r1, #1
 8000e54:	2006      	movs	r0, #6
 8000e56:	f7ff fd4b 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 8000e5a:	4bc3      	ldr	r3, [pc, #780]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2007      	movs	r0, #7
 8000e62:	f7ff fd45 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 8000e66:	4bc0      	ldr	r3, [pc, #768]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000e68:	001a      	movs	r2, r3
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	2008      	movs	r0, #8
 8000e6e:	f7ff fd3f 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 8000e72:	4bbd      	ldr	r3, [pc, #756]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000e74:	001a      	movs	r2, r3
 8000e76:	2100      	movs	r1, #0
 8000e78:	2009      	movs	r0, #9
 8000e7a:	f7ff fd39 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 8000e7e:	4bba      	ldr	r3, [pc, #744]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000e80:	001a      	movs	r2, r3
 8000e82:	2101      	movs	r1, #1
 8000e84:	200a      	movs	r0, #10
 8000e86:	f7ff fd33 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000e8a:	4bb7      	ldr	r3, [pc, #732]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	2100      	movs	r1, #0
 8000e90:	200b      	movs	r0, #11
 8000e92:	f7ff fd2d 	bl	80008f0 <setvalue>
 8000e96:	e347      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'm' || letter == 'M')
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b6d      	cmp	r3, #109	@ 0x6d
 8000e9e:	d003      	beq.n	8000ea8 <Handle_Braille_Second+0x46c>
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b4d      	cmp	r3, #77	@ 0x4d
 8000ea6:	d124      	bne.n	8000ef2 <Handle_Braille_Second+0x4b6>
	  {
		  setvalue(6, 1, braille_arr);
 8000ea8:	4baf      	ldr	r3, [pc, #700]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000eaa:	001a      	movs	r2, r3
 8000eac:	2101      	movs	r1, #1
 8000eae:	2006      	movs	r0, #6
 8000eb0:	f7ff fd1e 	bl	80008f0 <setvalue>
		  setvalue(7, 1, braille_arr);
 8000eb4:	4bac      	ldr	r3, [pc, #688]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	2101      	movs	r1, #1
 8000eba:	2007      	movs	r0, #7
 8000ebc:	f7ff fd18 	bl	80008f0 <setvalue>
		  setvalue(8, 0, braille_arr);
 8000ec0:	4ba9      	ldr	r3, [pc, #676]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2008      	movs	r0, #8
 8000ec8:	f7ff fd12 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 8000ecc:	4ba6      	ldr	r3, [pc, #664]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000ece:	001a      	movs	r2, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2009      	movs	r0, #9
 8000ed4:	f7ff fd0c 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 8000ed8:	4ba3      	ldr	r3, [pc, #652]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000eda:	001a      	movs	r2, r3
 8000edc:	2101      	movs	r1, #1
 8000ede:	200a      	movs	r0, #10
 8000ee0:	f7ff fd06 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000ee4:	4ba0      	ldr	r3, [pc, #640]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000ee6:	001a      	movs	r2, r3
 8000ee8:	2100      	movs	r1, #0
 8000eea:	200b      	movs	r0, #11
 8000eec:	f7ff fd00 	bl	80008f0 <setvalue>
 8000ef0:	e31a      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'n' || letter == 'N')
 8000ef2:	1dfb      	adds	r3, r7, #7
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b6e      	cmp	r3, #110	@ 0x6e
 8000ef8:	d003      	beq.n	8000f02 <Handle_Braille_Second+0x4c6>
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b4e      	cmp	r3, #78	@ 0x4e
 8000f00:	d124      	bne.n	8000f4c <Handle_Braille_Second+0x510>
	  {
		  setvalue(6, 1, braille_arr);
 8000f02:	4b99      	ldr	r3, [pc, #612]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000f04:	001a      	movs	r2, r3
 8000f06:	2101      	movs	r1, #1
 8000f08:	2006      	movs	r0, #6
 8000f0a:	f7ff fcf1 	bl	80008f0 <setvalue>
		  setvalue(7, 1, braille_arr);
 8000f0e:	4b96      	ldr	r3, [pc, #600]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000f10:	001a      	movs	r2, r3
 8000f12:	2101      	movs	r1, #1
 8000f14:	2007      	movs	r0, #7
 8000f16:	f7ff fceb 	bl	80008f0 <setvalue>
		  setvalue(8, 0, braille_arr);
 8000f1a:	4b93      	ldr	r3, [pc, #588]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2008      	movs	r0, #8
 8000f22:	f7ff fce5 	bl	80008f0 <setvalue>
		  setvalue(9, 1, braille_arr);
 8000f26:	4b90      	ldr	r3, [pc, #576]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000f28:	001a      	movs	r2, r3
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	2009      	movs	r0, #9
 8000f2e:	f7ff fcdf 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 8000f32:	4b8d      	ldr	r3, [pc, #564]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000f34:	001a      	movs	r2, r3
 8000f36:	2101      	movs	r1, #1
 8000f38:	200a      	movs	r0, #10
 8000f3a:	f7ff fcd9 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000f3e:	4b8a      	ldr	r3, [pc, #552]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000f40:	001a      	movs	r2, r3
 8000f42:	2100      	movs	r1, #0
 8000f44:	200b      	movs	r0, #11
 8000f46:	f7ff fcd3 	bl	80008f0 <setvalue>
 8000f4a:	e2ed      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'o' || letter == 'O')
 8000f4c:	1dfb      	adds	r3, r7, #7
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b6f      	cmp	r3, #111	@ 0x6f
 8000f52:	d003      	beq.n	8000f5c <Handle_Braille_Second+0x520>
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b4f      	cmp	r3, #79	@ 0x4f
 8000f5a:	d124      	bne.n	8000fa6 <Handle_Braille_Second+0x56a>
	  {
		  setvalue(6, 1, braille_arr);
 8000f5c:	4b82      	ldr	r3, [pc, #520]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000f5e:	001a      	movs	r2, r3
 8000f60:	2101      	movs	r1, #1
 8000f62:	2006      	movs	r0, #6
 8000f64:	f7ff fcc4 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 8000f68:	4b7f      	ldr	r3, [pc, #508]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2007      	movs	r0, #7
 8000f70:	f7ff fcbe 	bl	80008f0 <setvalue>
		  setvalue(8, 0, braille_arr);
 8000f74:	4b7c      	ldr	r3, [pc, #496]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000f76:	001a      	movs	r2, r3
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2008      	movs	r0, #8
 8000f7c:	f7ff fcb8 	bl	80008f0 <setvalue>
		  setvalue(9, 1, braille_arr);
 8000f80:	4b79      	ldr	r3, [pc, #484]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000f82:	001a      	movs	r2, r3
 8000f84:	2101      	movs	r1, #1
 8000f86:	2009      	movs	r0, #9
 8000f88:	f7ff fcb2 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 8000f8c:	4b76      	ldr	r3, [pc, #472]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000f8e:	001a      	movs	r2, r3
 8000f90:	2101      	movs	r1, #1
 8000f92:	200a      	movs	r0, #10
 8000f94:	f7ff fcac 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000f98:	4b73      	ldr	r3, [pc, #460]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	200b      	movs	r0, #11
 8000fa0:	f7ff fca6 	bl	80008f0 <setvalue>
 8000fa4:	e2c0      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'p' || letter == 'P')
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b70      	cmp	r3, #112	@ 0x70
 8000fac:	d003      	beq.n	8000fb6 <Handle_Braille_Second+0x57a>
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b50      	cmp	r3, #80	@ 0x50
 8000fb4:	d124      	bne.n	8001000 <Handle_Braille_Second+0x5c4>
	  {
		  setvalue(6, 1, braille_arr);
 8000fb6:	4b6c      	ldr	r3, [pc, #432]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000fb8:	001a      	movs	r2, r3
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2006      	movs	r0, #6
 8000fbe:	f7ff fc97 	bl	80008f0 <setvalue>
		  setvalue(7, 1, braille_arr);
 8000fc2:	4b69      	ldr	r3, [pc, #420]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2007      	movs	r0, #7
 8000fca:	f7ff fc91 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 8000fce:	4b66      	ldr	r3, [pc, #408]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	2008      	movs	r0, #8
 8000fd6:	f7ff fc8b 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 8000fda:	4b63      	ldr	r3, [pc, #396]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000fdc:	001a      	movs	r2, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2009      	movs	r0, #9
 8000fe2:	f7ff fc85 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 8000fe6:	4b60      	ldr	r3, [pc, #384]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000fe8:	001a      	movs	r2, r3
 8000fea:	2101      	movs	r1, #1
 8000fec:	200a      	movs	r0, #10
 8000fee:	f7ff fc7f 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8000ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	200b      	movs	r0, #11
 8000ffa:	f7ff fc79 	bl	80008f0 <setvalue>
 8000ffe:	e293      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'q' || letter == 'Q')
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b71      	cmp	r3, #113	@ 0x71
 8001006:	d003      	beq.n	8001010 <Handle_Braille_Second+0x5d4>
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b51      	cmp	r3, #81	@ 0x51
 800100e:	d124      	bne.n	800105a <Handle_Braille_Second+0x61e>
	  {
		  setvalue(6, 1, braille_arr);
 8001010:	4b55      	ldr	r3, [pc, #340]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8001012:	001a      	movs	r2, r3
 8001014:	2101      	movs	r1, #1
 8001016:	2006      	movs	r0, #6
 8001018:	f7ff fc6a 	bl	80008f0 <setvalue>
		  setvalue(7, 1, braille_arr);
 800101c:	4b52      	ldr	r3, [pc, #328]	@ (8001168 <Handle_Braille_Second+0x72c>)
 800101e:	001a      	movs	r2, r3
 8001020:	2101      	movs	r1, #1
 8001022:	2007      	movs	r0, #7
 8001024:	f7ff fc64 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 8001028:	4b4f      	ldr	r3, [pc, #316]	@ (8001168 <Handle_Braille_Second+0x72c>)
 800102a:	001a      	movs	r2, r3
 800102c:	2101      	movs	r1, #1
 800102e:	2008      	movs	r0, #8
 8001030:	f7ff fc5e 	bl	80008f0 <setvalue>
		  setvalue(9, 1, braille_arr);
 8001034:	4b4c      	ldr	r3, [pc, #304]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8001036:	001a      	movs	r2, r3
 8001038:	2101      	movs	r1, #1
 800103a:	2009      	movs	r0, #9
 800103c:	f7ff fc58 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 8001040:	4b49      	ldr	r3, [pc, #292]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8001042:	001a      	movs	r2, r3
 8001044:	2101      	movs	r1, #1
 8001046:	200a      	movs	r0, #10
 8001048:	f7ff fc52 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 800104c:	4b46      	ldr	r3, [pc, #280]	@ (8001168 <Handle_Braille_Second+0x72c>)
 800104e:	001a      	movs	r2, r3
 8001050:	2100      	movs	r1, #0
 8001052:	200b      	movs	r0, #11
 8001054:	f7ff fc4c 	bl	80008f0 <setvalue>
 8001058:	e266      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'r' || letter == 'R')
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b72      	cmp	r3, #114	@ 0x72
 8001060:	d003      	beq.n	800106a <Handle_Braille_Second+0x62e>
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b52      	cmp	r3, #82	@ 0x52
 8001068:	d124      	bne.n	80010b4 <Handle_Braille_Second+0x678>
	  {
		  setvalue(6, 1, braille_arr);
 800106a:	4b3f      	ldr	r3, [pc, #252]	@ (8001168 <Handle_Braille_Second+0x72c>)
 800106c:	001a      	movs	r2, r3
 800106e:	2101      	movs	r1, #1
 8001070:	2006      	movs	r0, #6
 8001072:	f7ff fc3d 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 8001076:	4b3c      	ldr	r3, [pc, #240]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8001078:	001a      	movs	r2, r3
 800107a:	2100      	movs	r1, #0
 800107c:	2007      	movs	r0, #7
 800107e:	f7ff fc37 	bl	80008f0 <setvalue>
		  setvalue(8, 0, braille_arr);
 8001082:	4b39      	ldr	r3, [pc, #228]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8001084:	001a      	movs	r2, r3
 8001086:	2100      	movs	r1, #0
 8001088:	2008      	movs	r0, #8
 800108a:	f7ff fc31 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 800108e:	4b36      	ldr	r3, [pc, #216]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8001090:	001a      	movs	r2, r3
 8001092:	2100      	movs	r1, #0
 8001094:	2009      	movs	r0, #9
 8001096:	f7ff fc2b 	bl	80008f0 <setvalue>
		  setvalue(10, 0, braille_arr);
 800109a:	4b33      	ldr	r3, [pc, #204]	@ (8001168 <Handle_Braille_Second+0x72c>)
 800109c:	001a      	movs	r2, r3
 800109e:	2100      	movs	r1, #0
 80010a0:	200a      	movs	r0, #10
 80010a2:	f7ff fc25 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 80010a6:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <Handle_Braille_Second+0x72c>)
 80010a8:	001a      	movs	r2, r3
 80010aa:	2100      	movs	r1, #0
 80010ac:	200b      	movs	r0, #11
 80010ae:	f7ff fc1f 	bl	80008f0 <setvalue>
 80010b2:	e239      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 's' || letter == 'S')
 80010b4:	1dfb      	adds	r3, r7, #7
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b73      	cmp	r3, #115	@ 0x73
 80010ba:	d003      	beq.n	80010c4 <Handle_Braille_Second+0x688>
 80010bc:	1dfb      	adds	r3, r7, #7
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b53      	cmp	r3, #83	@ 0x53
 80010c2:	d124      	bne.n	800110e <Handle_Braille_Second+0x6d2>
	  {
		  setvalue(6, 0, braille_arr);
 80010c4:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <Handle_Braille_Second+0x72c>)
 80010c6:	001a      	movs	r2, r3
 80010c8:	2100      	movs	r1, #0
 80010ca:	2006      	movs	r0, #6
 80010cc:	f7ff fc10 	bl	80008f0 <setvalue>
		  setvalue(7, 1, braille_arr);
 80010d0:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <Handle_Braille_Second+0x72c>)
 80010d2:	001a      	movs	r2, r3
 80010d4:	2101      	movs	r1, #1
 80010d6:	2007      	movs	r0, #7
 80010d8:	f7ff fc0a 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 80010dc:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <Handle_Braille_Second+0x72c>)
 80010de:	001a      	movs	r2, r3
 80010e0:	2101      	movs	r1, #1
 80010e2:	2008      	movs	r0, #8
 80010e4:	f7ff fc04 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 80010e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <Handle_Braille_Second+0x72c>)
 80010ea:	001a      	movs	r2, r3
 80010ec:	2100      	movs	r1, #0
 80010ee:	2009      	movs	r0, #9
 80010f0:	f7ff fbfe 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 80010f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001168 <Handle_Braille_Second+0x72c>)
 80010f6:	001a      	movs	r2, r3
 80010f8:	2101      	movs	r1, #1
 80010fa:	200a      	movs	r0, #10
 80010fc:	f7ff fbf8 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8001100:	4b19      	ldr	r3, [pc, #100]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8001102:	001a      	movs	r2, r3
 8001104:	2100      	movs	r1, #0
 8001106:	200b      	movs	r0, #11
 8001108:	f7ff fbf2 	bl	80008f0 <setvalue>
 800110c:	e20c      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 't' || letter == 'T')
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b74      	cmp	r3, #116	@ 0x74
 8001114:	d003      	beq.n	800111e <Handle_Braille_Second+0x6e2>
 8001116:	1dfb      	adds	r3, r7, #7
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	2b54      	cmp	r3, #84	@ 0x54
 800111c:	d126      	bne.n	800116c <Handle_Braille_Second+0x730>
	  {
		  setvalue(6, 0, braille_arr);
 800111e:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8001120:	001a      	movs	r2, r3
 8001122:	2100      	movs	r1, #0
 8001124:	2006      	movs	r0, #6
 8001126:	f7ff fbe3 	bl	80008f0 <setvalue>
		  setvalue(7, 1, braille_arr);
 800112a:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <Handle_Braille_Second+0x72c>)
 800112c:	001a      	movs	r2, r3
 800112e:	2101      	movs	r1, #1
 8001130:	2007      	movs	r0, #7
 8001132:	f7ff fbdd 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 8001136:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8001138:	001a      	movs	r2, r3
 800113a:	2101      	movs	r1, #1
 800113c:	2008      	movs	r0, #8
 800113e:	f7ff fbd7 	bl	80008f0 <setvalue>
		  setvalue(9, 1, braille_arr);
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8001144:	001a      	movs	r2, r3
 8001146:	2101      	movs	r1, #1
 8001148:	2009      	movs	r0, #9
 800114a:	f7ff fbd1 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <Handle_Braille_Second+0x72c>)
 8001150:	001a      	movs	r2, r3
 8001152:	2101      	movs	r1, #1
 8001154:	200a      	movs	r0, #10
 8001156:	f7ff fbcb 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 800115a:	4b03      	ldr	r3, [pc, #12]	@ (8001168 <Handle_Braille_Second+0x72c>)
 800115c:	001a      	movs	r2, r3
 800115e:	2100      	movs	r1, #0
 8001160:	200b      	movs	r0, #11
 8001162:	f7ff fbc5 	bl	80008f0 <setvalue>
 8001166:	e1df      	b.n	8001528 <Handle_Braille_Second+0xaec>
 8001168:	2000008c 	.word	0x2000008c
	  }
	  else if(letter == 'u' || letter == 'U')
 800116c:	1dfb      	adds	r3, r7, #7
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b75      	cmp	r3, #117	@ 0x75
 8001172:	d003      	beq.n	800117c <Handle_Braille_Second+0x740>
 8001174:	1dfb      	adds	r3, r7, #7
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b55      	cmp	r3, #85	@ 0x55
 800117a:	d124      	bne.n	80011c6 <Handle_Braille_Second+0x78a>
	  {
		  setvalue(6, 1, braille_arr);
 800117c:	4be9      	ldr	r3, [pc, #932]	@ (8001524 <Handle_Braille_Second+0xae8>)
 800117e:	001a      	movs	r2, r3
 8001180:	2101      	movs	r1, #1
 8001182:	2006      	movs	r0, #6
 8001184:	f7ff fbb4 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 8001188:	4be6      	ldr	r3, [pc, #920]	@ (8001524 <Handle_Braille_Second+0xae8>)
 800118a:	001a      	movs	r2, r3
 800118c:	2100      	movs	r1, #0
 800118e:	2007      	movs	r0, #7
 8001190:	f7ff fbae 	bl	80008f0 <setvalue>
		  setvalue(8, 0, braille_arr);
 8001194:	4be3      	ldr	r3, [pc, #908]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001196:	001a      	movs	r2, r3
 8001198:	2100      	movs	r1, #0
 800119a:	2008      	movs	r0, #8
 800119c:	f7ff fba8 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 80011a0:	4be0      	ldr	r3, [pc, #896]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80011a2:	001a      	movs	r2, r3
 80011a4:	2100      	movs	r1, #0
 80011a6:	2009      	movs	r0, #9
 80011a8:	f7ff fba2 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 80011ac:	4bdd      	ldr	r3, [pc, #884]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80011ae:	001a      	movs	r2, r3
 80011b0:	2101      	movs	r1, #1
 80011b2:	200a      	movs	r0, #10
 80011b4:	f7ff fb9c 	bl	80008f0 <setvalue>
		  setvalue(11, 1, braille_arr);
 80011b8:	4bda      	ldr	r3, [pc, #872]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80011ba:	001a      	movs	r2, r3
 80011bc:	2101      	movs	r1, #1
 80011be:	200b      	movs	r0, #11
 80011c0:	f7ff fb96 	bl	80008f0 <setvalue>
 80011c4:	e1b0      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'v' || letter == 'V')
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b76      	cmp	r3, #118	@ 0x76
 80011cc:	d003      	beq.n	80011d6 <Handle_Braille_Second+0x79a>
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b56      	cmp	r3, #86	@ 0x56
 80011d4:	d124      	bne.n	8001220 <Handle_Braille_Second+0x7e4>
	  {
		  setvalue(6, 1, braille_arr);
 80011d6:	4bd3      	ldr	r3, [pc, #844]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80011d8:	001a      	movs	r2, r3
 80011da:	2101      	movs	r1, #1
 80011dc:	2006      	movs	r0, #6
 80011de:	f7ff fb87 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 80011e2:	4bd0      	ldr	r3, [pc, #832]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80011e4:	001a      	movs	r2, r3
 80011e6:	2100      	movs	r1, #0
 80011e8:	2007      	movs	r0, #7
 80011ea:	f7ff fb81 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 80011ee:	4bcd      	ldr	r3, [pc, #820]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80011f0:	001a      	movs	r2, r3
 80011f2:	2101      	movs	r1, #1
 80011f4:	2008      	movs	r0, #8
 80011f6:	f7ff fb7b 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 80011fa:	4bca      	ldr	r3, [pc, #808]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80011fc:	001a      	movs	r2, r3
 80011fe:	2100      	movs	r1, #0
 8001200:	2009      	movs	r0, #9
 8001202:	f7ff fb75 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 8001206:	4bc7      	ldr	r3, [pc, #796]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001208:	001a      	movs	r2, r3
 800120a:	2101      	movs	r1, #1
 800120c:	200a      	movs	r0, #10
 800120e:	f7ff fb6f 	bl	80008f0 <setvalue>
		  setvalue(11, 1, braille_arr);
 8001212:	4bc4      	ldr	r3, [pc, #784]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001214:	001a      	movs	r2, r3
 8001216:	2101      	movs	r1, #1
 8001218:	200b      	movs	r0, #11
 800121a:	f7ff fb69 	bl	80008f0 <setvalue>
 800121e:	e183      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'w' || letter == 'W')
 8001220:	1dfb      	adds	r3, r7, #7
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b77      	cmp	r3, #119	@ 0x77
 8001226:	d003      	beq.n	8001230 <Handle_Braille_Second+0x7f4>
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b57      	cmp	r3, #87	@ 0x57
 800122e:	d124      	bne.n	800127a <Handle_Braille_Second+0x83e>
	  {
		  setvalue(6, 0, braille_arr);
 8001230:	4bbc      	ldr	r3, [pc, #752]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001232:	001a      	movs	r2, r3
 8001234:	2100      	movs	r1, #0
 8001236:	2006      	movs	r0, #6
 8001238:	f7ff fb5a 	bl	80008f0 <setvalue>
		  setvalue(7, 1, braille_arr);
 800123c:	4bb9      	ldr	r3, [pc, #740]	@ (8001524 <Handle_Braille_Second+0xae8>)
 800123e:	001a      	movs	r2, r3
 8001240:	2101      	movs	r1, #1
 8001242:	2007      	movs	r0, #7
 8001244:	f7ff fb54 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 8001248:	4bb6      	ldr	r3, [pc, #728]	@ (8001524 <Handle_Braille_Second+0xae8>)
 800124a:	001a      	movs	r2, r3
 800124c:	2101      	movs	r1, #1
 800124e:	2008      	movs	r0, #8
 8001250:	f7ff fb4e 	bl	80008f0 <setvalue>
		  setvalue(9, 1, braille_arr);
 8001254:	4bb3      	ldr	r3, [pc, #716]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001256:	001a      	movs	r2, r3
 8001258:	2101      	movs	r1, #1
 800125a:	2009      	movs	r0, #9
 800125c:	f7ff fb48 	bl	80008f0 <setvalue>
		  setvalue(10, 0, braille_arr);
 8001260:	4bb0      	ldr	r3, [pc, #704]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001262:	001a      	movs	r2, r3
 8001264:	2100      	movs	r1, #0
 8001266:	200a      	movs	r0, #10
 8001268:	f7ff fb42 	bl	80008f0 <setvalue>
		  setvalue(11, 1, braille_arr);
 800126c:	4bad      	ldr	r3, [pc, #692]	@ (8001524 <Handle_Braille_Second+0xae8>)
 800126e:	001a      	movs	r2, r3
 8001270:	2101      	movs	r1, #1
 8001272:	200b      	movs	r0, #11
 8001274:	f7ff fb3c 	bl	80008f0 <setvalue>
 8001278:	e156      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'x' || letter == 'X')
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b78      	cmp	r3, #120	@ 0x78
 8001280:	d003      	beq.n	800128a <Handle_Braille_Second+0x84e>
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b58      	cmp	r3, #88	@ 0x58
 8001288:	d124      	bne.n	80012d4 <Handle_Braille_Second+0x898>
	  {
		  setvalue(6, 1, braille_arr);
 800128a:	4ba6      	ldr	r3, [pc, #664]	@ (8001524 <Handle_Braille_Second+0xae8>)
 800128c:	001a      	movs	r2, r3
 800128e:	2101      	movs	r1, #1
 8001290:	2006      	movs	r0, #6
 8001292:	f7ff fb2d 	bl	80008f0 <setvalue>
		  setvalue(7, 1, braille_arr);
 8001296:	4ba3      	ldr	r3, [pc, #652]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001298:	001a      	movs	r2, r3
 800129a:	2101      	movs	r1, #1
 800129c:	2007      	movs	r0, #7
 800129e:	f7ff fb27 	bl	80008f0 <setvalue>
		  setvalue(8, 0, braille_arr);
 80012a2:	4ba0      	ldr	r3, [pc, #640]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80012a4:	001a      	movs	r2, r3
 80012a6:	2100      	movs	r1, #0
 80012a8:	2008      	movs	r0, #8
 80012aa:	f7ff fb21 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 80012ae:	4b9d      	ldr	r3, [pc, #628]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80012b0:	001a      	movs	r2, r3
 80012b2:	2100      	movs	r1, #0
 80012b4:	2009      	movs	r0, #9
 80012b6:	f7ff fb1b 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 80012ba:	4b9a      	ldr	r3, [pc, #616]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80012bc:	001a      	movs	r2, r3
 80012be:	2101      	movs	r1, #1
 80012c0:	200a      	movs	r0, #10
 80012c2:	f7ff fb15 	bl	80008f0 <setvalue>
		  setvalue(11, 1, braille_arr);
 80012c6:	4b97      	ldr	r3, [pc, #604]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80012c8:	001a      	movs	r2, r3
 80012ca:	2101      	movs	r1, #1
 80012cc:	200b      	movs	r0, #11
 80012ce:	f7ff fb0f 	bl	80008f0 <setvalue>
 80012d2:	e129      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'y' || letter == 'Y')
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b79      	cmp	r3, #121	@ 0x79
 80012da:	d003      	beq.n	80012e4 <Handle_Braille_Second+0x8a8>
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b59      	cmp	r3, #89	@ 0x59
 80012e2:	d124      	bne.n	800132e <Handle_Braille_Second+0x8f2>
	  {
		  setvalue(6, 1, braille_arr);
 80012e4:	4b8f      	ldr	r3, [pc, #572]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80012e6:	001a      	movs	r2, r3
 80012e8:	2101      	movs	r1, #1
 80012ea:	2006      	movs	r0, #6
 80012ec:	f7ff fb00 	bl	80008f0 <setvalue>
		  setvalue(7, 1, braille_arr);
 80012f0:	4b8c      	ldr	r3, [pc, #560]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80012f2:	001a      	movs	r2, r3
 80012f4:	2101      	movs	r1, #1
 80012f6:	2007      	movs	r0, #7
 80012f8:	f7ff fafa 	bl	80008f0 <setvalue>
		  setvalue(8, 0, braille_arr);
 80012fc:	4b89      	ldr	r3, [pc, #548]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80012fe:	001a      	movs	r2, r3
 8001300:	2100      	movs	r1, #0
 8001302:	2008      	movs	r0, #8
 8001304:	f7ff faf4 	bl	80008f0 <setvalue>
		  setvalue(9, 1, braille_arr);
 8001308:	4b86      	ldr	r3, [pc, #536]	@ (8001524 <Handle_Braille_Second+0xae8>)
 800130a:	001a      	movs	r2, r3
 800130c:	2101      	movs	r1, #1
 800130e:	2009      	movs	r0, #9
 8001310:	f7ff faee 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 8001314:	4b83      	ldr	r3, [pc, #524]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001316:	001a      	movs	r2, r3
 8001318:	2101      	movs	r1, #1
 800131a:	200a      	movs	r0, #10
 800131c:	f7ff fae8 	bl	80008f0 <setvalue>
		  setvalue(11, 1, braille_arr);
 8001320:	4b80      	ldr	r3, [pc, #512]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001322:	001a      	movs	r2, r3
 8001324:	2101      	movs	r1, #1
 8001326:	200b      	movs	r0, #11
 8001328:	f7ff fae2 	bl	80008f0 <setvalue>
 800132c:	e0fc      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == 'z' || letter == 'Z')
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b7a      	cmp	r3, #122	@ 0x7a
 8001334:	d003      	beq.n	800133e <Handle_Braille_Second+0x902>
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b5a      	cmp	r3, #90	@ 0x5a
 800133c:	d124      	bne.n	8001388 <Handle_Braille_Second+0x94c>
	  {
		  setvalue(6, 1, braille_arr);
 800133e:	4b79      	ldr	r3, [pc, #484]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001340:	001a      	movs	r2, r3
 8001342:	2101      	movs	r1, #1
 8001344:	2006      	movs	r0, #6
 8001346:	f7ff fad3 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 800134a:	4b76      	ldr	r3, [pc, #472]	@ (8001524 <Handle_Braille_Second+0xae8>)
 800134c:	001a      	movs	r2, r3
 800134e:	2100      	movs	r1, #0
 8001350:	2007      	movs	r0, #7
 8001352:	f7ff facd 	bl	80008f0 <setvalue>
		  setvalue(8, 0, braille_arr);
 8001356:	4b73      	ldr	r3, [pc, #460]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001358:	001a      	movs	r2, r3
 800135a:	2100      	movs	r1, #0
 800135c:	2008      	movs	r0, #8
 800135e:	f7ff fac7 	bl	80008f0 <setvalue>
		  setvalue(9, 1, braille_arr);
 8001362:	4b70      	ldr	r3, [pc, #448]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001364:	001a      	movs	r2, r3
 8001366:	2101      	movs	r1, #1
 8001368:	2009      	movs	r0, #9
 800136a:	f7ff fac1 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 800136e:	4b6d      	ldr	r3, [pc, #436]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001370:	001a      	movs	r2, r3
 8001372:	2101      	movs	r1, #1
 8001374:	200a      	movs	r0, #10
 8001376:	f7ff fabb 	bl	80008f0 <setvalue>
		  setvalue(11, 1, braille_arr);
 800137a:	4b6a      	ldr	r3, [pc, #424]	@ (8001524 <Handle_Braille_Second+0xae8>)
 800137c:	001a      	movs	r2, r3
 800137e:	2101      	movs	r1, #1
 8001380:	200b      	movs	r0, #11
 8001382:	f7ff fab5 	bl	80008f0 <setvalue>
 8001386:	e0cf      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  }
	  else if(letter == '.')
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b2e      	cmp	r3, #46	@ 0x2e
 800138e:	d124      	bne.n	80013da <Handle_Braille_Second+0x99e>
	  {
		  setvalue(6, 0, braille_arr);
 8001390:	4b64      	ldr	r3, [pc, #400]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001392:	001a      	movs	r2, r3
 8001394:	2100      	movs	r1, #0
 8001396:	2006      	movs	r0, #6
 8001398:	f7ff faaa 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 800139c:	4b61      	ldr	r3, [pc, #388]	@ (8001524 <Handle_Braille_Second+0xae8>)
 800139e:	001a      	movs	r2, r3
 80013a0:	2100      	movs	r1, #0
 80013a2:	2007      	movs	r0, #7
 80013a4:	f7ff faa4 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 80013a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80013aa:	001a      	movs	r2, r3
 80013ac:	2101      	movs	r1, #1
 80013ae:	2008      	movs	r0, #8
 80013b0:	f7ff fa9e 	bl	80008f0 <setvalue>
		  setvalue(9, 1, braille_arr);
 80013b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80013b6:	001a      	movs	r2, r3
 80013b8:	2101      	movs	r1, #1
 80013ba:	2009      	movs	r0, #9
 80013bc:	f7ff fa98 	bl	80008f0 <setvalue>
		  setvalue(10, 0, braille_arr);
 80013c0:	4b58      	ldr	r3, [pc, #352]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80013c2:	001a      	movs	r2, r3
 80013c4:	2100      	movs	r1, #0
 80013c6:	200a      	movs	r0, #10
 80013c8:	f7ff fa92 	bl	80008f0 <setvalue>
		  setvalue(11, 1, braille_arr);
 80013cc:	4b55      	ldr	r3, [pc, #340]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80013ce:	001a      	movs	r2, r3
 80013d0:	2101      	movs	r1, #1
 80013d2:	200b      	movs	r0, #11
 80013d4:	f7ff fa8c 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
		  setvalue(9, 0, braille_arr);
		  setvalue(10, 1, braille_arr);
		  setvalue(11, 1, braille_arr);
	  }
}
 80013d8:	e0a6      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  else if(letter == ',')
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b2c      	cmp	r3, #44	@ 0x2c
 80013e0:	d124      	bne.n	800142c <Handle_Braille_Second+0x9f0>
		  setvalue(6, 0, braille_arr);
 80013e2:	4b50      	ldr	r3, [pc, #320]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80013e4:	001a      	movs	r2, r3
 80013e6:	2100      	movs	r1, #0
 80013e8:	2006      	movs	r0, #6
 80013ea:	f7ff fa81 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 80013ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80013f0:	001a      	movs	r2, r3
 80013f2:	2100      	movs	r1, #0
 80013f4:	2007      	movs	r0, #7
 80013f6:	f7ff fa7b 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 80013fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80013fc:	001a      	movs	r2, r3
 80013fe:	2101      	movs	r1, #1
 8001400:	2008      	movs	r0, #8
 8001402:	f7ff fa75 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 8001406:	4b47      	ldr	r3, [pc, #284]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001408:	001a      	movs	r2, r3
 800140a:	2100      	movs	r1, #0
 800140c:	2009      	movs	r0, #9
 800140e:	f7ff fa6f 	bl	80008f0 <setvalue>
		  setvalue(10, 0, braille_arr);
 8001412:	4b44      	ldr	r3, [pc, #272]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001414:	001a      	movs	r2, r3
 8001416:	2100      	movs	r1, #0
 8001418:	200a      	movs	r0, #10
 800141a:	f7ff fa69 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 800141e:	4b41      	ldr	r3, [pc, #260]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001420:	001a      	movs	r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	200b      	movs	r0, #11
 8001426:	f7ff fa63 	bl	80008f0 <setvalue>
}
 800142a:	e07d      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  else if(letter == '_')
 800142c:	1dfb      	adds	r3, r7, #7
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b5f      	cmp	r3, #95	@ 0x5f
 8001432:	d124      	bne.n	800147e <Handle_Braille_Second+0xa42>
		  setvalue(6, 0, braille_arr);
 8001434:	4b3b      	ldr	r3, [pc, #236]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001436:	001a      	movs	r2, r3
 8001438:	2100      	movs	r1, #0
 800143a:	2006      	movs	r0, #6
 800143c:	f7ff fa58 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 8001440:	4b38      	ldr	r3, [pc, #224]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001442:	001a      	movs	r2, r3
 8001444:	2100      	movs	r1, #0
 8001446:	2007      	movs	r0, #7
 8001448:	f7ff fa52 	bl	80008f0 <setvalue>
		  setvalue(8, 0, braille_arr);
 800144c:	4b35      	ldr	r3, [pc, #212]	@ (8001524 <Handle_Braille_Second+0xae8>)
 800144e:	001a      	movs	r2, r3
 8001450:	2100      	movs	r1, #0
 8001452:	2008      	movs	r0, #8
 8001454:	f7ff fa4c 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 8001458:	4b32      	ldr	r3, [pc, #200]	@ (8001524 <Handle_Braille_Second+0xae8>)
 800145a:	001a      	movs	r2, r3
 800145c:	2100      	movs	r1, #0
 800145e:	2009      	movs	r0, #9
 8001460:	f7ff fa46 	bl	80008f0 <setvalue>
		  setvalue(10, 0, braille_arr);
 8001464:	4b2f      	ldr	r3, [pc, #188]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001466:	001a      	movs	r2, r3
 8001468:	2100      	movs	r1, #0
 800146a:	200a      	movs	r0, #10
 800146c:	f7ff fa40 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 8001470:	4b2c      	ldr	r3, [pc, #176]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001472:	001a      	movs	r2, r3
 8001474:	2100      	movs	r1, #0
 8001476:	200b      	movs	r0, #11
 8001478:	f7ff fa3a 	bl	80008f0 <setvalue>
}
 800147c:	e054      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  else if(letter == '!')
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b21      	cmp	r3, #33	@ 0x21
 8001484:	d124      	bne.n	80014d0 <Handle_Braille_Second+0xa94>
		  setvalue(6, 0, braille_arr);
 8001486:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001488:	001a      	movs	r2, r3
 800148a:	2100      	movs	r1, #0
 800148c:	2006      	movs	r0, #6
 800148e:	f7ff fa2f 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 8001492:	4b24      	ldr	r3, [pc, #144]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001494:	001a      	movs	r2, r3
 8001496:	2100      	movs	r1, #0
 8001498:	2007      	movs	r0, #7
 800149a:	f7ff fa29 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80014a0:	001a      	movs	r2, r3
 80014a2:	2101      	movs	r1, #1
 80014a4:	2008      	movs	r0, #8
 80014a6:	f7ff fa23 	bl	80008f0 <setvalue>
		  setvalue(9, 1, braille_arr);
 80014aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80014ac:	001a      	movs	r2, r3
 80014ae:	2101      	movs	r1, #1
 80014b0:	2009      	movs	r0, #9
 80014b2:	f7ff fa1d 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 80014b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80014b8:	001a      	movs	r2, r3
 80014ba:	2101      	movs	r1, #1
 80014bc:	200a      	movs	r0, #10
 80014be:	f7ff fa17 	bl	80008f0 <setvalue>
		  setvalue(11, 0, braille_arr);
 80014c2:	4b18      	ldr	r3, [pc, #96]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80014c4:	001a      	movs	r2, r3
 80014c6:	2100      	movs	r1, #0
 80014c8:	200b      	movs	r0, #11
 80014ca:	f7ff fa11 	bl	80008f0 <setvalue>
}
 80014ce:	e02b      	b.n	8001528 <Handle_Braille_Second+0xaec>
	  else if(letter == '!')
 80014d0:	1dfb      	adds	r3, r7, #7
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b21      	cmp	r3, #33	@ 0x21
 80014d6:	d127      	bne.n	8001528 <Handle_Braille_Second+0xaec>
		  setvalue(6, 0, braille_arr);
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80014da:	001a      	movs	r2, r3
 80014dc:	2100      	movs	r1, #0
 80014de:	2006      	movs	r0, #6
 80014e0:	f7ff fa06 	bl	80008f0 <setvalue>
		  setvalue(7, 0, braille_arr);
 80014e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80014e6:	001a      	movs	r2, r3
 80014e8:	2100      	movs	r1, #0
 80014ea:	2007      	movs	r0, #7
 80014ec:	f7ff fa00 	bl	80008f0 <setvalue>
		  setvalue(8, 1, braille_arr);
 80014f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80014f2:	001a      	movs	r2, r3
 80014f4:	2101      	movs	r1, #1
 80014f6:	2008      	movs	r0, #8
 80014f8:	f7ff f9fa 	bl	80008f0 <setvalue>
		  setvalue(9, 0, braille_arr);
 80014fc:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <Handle_Braille_Second+0xae8>)
 80014fe:	001a      	movs	r2, r3
 8001500:	2100      	movs	r1, #0
 8001502:	2009      	movs	r0, #9
 8001504:	f7ff f9f4 	bl	80008f0 <setvalue>
		  setvalue(10, 1, braille_arr);
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <Handle_Braille_Second+0xae8>)
 800150a:	001a      	movs	r2, r3
 800150c:	2101      	movs	r1, #1
 800150e:	200a      	movs	r0, #10
 8001510:	f7ff f9ee 	bl	80008f0 <setvalue>
		  setvalue(11, 1, braille_arr);
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <Handle_Braille_Second+0xae8>)
 8001516:	001a      	movs	r2, r3
 8001518:	2101      	movs	r1, #1
 800151a:	200b      	movs	r0, #11
 800151c:	f7ff f9e8 	bl	80008f0 <setvalue>
}
 8001520:	e002      	b.n	8001528 <Handle_Braille_Second+0xaec>
 8001522:	46c0      	nop			@ (mov r8, r8)
 8001524:	2000008c 	.word	0x2000008c
 8001528:	46c0      	nop			@ (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	b002      	add	sp, #8
 800152e:	bd80      	pop	{r7, pc}

08001530 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8001534:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <Ringbuf_init+0x64>)
 8001536:	4a18      	ldr	r2, [pc, #96]	@ (8001598 <Ringbuf_init+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <Ringbuf_init+0x6c>)
 800153c:	4a18      	ldr	r2, [pc, #96]	@ (80015a0 <Ringbuf_init+0x70>)
 800153e:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8001540:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <Ringbuf_init+0x74>)
 8001542:	4a19      	ldr	r2, [pc, #100]	@ (80015a8 <Ringbuf_init+0x78>)
 8001544:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 8001546:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <Ringbuf_init+0x7c>)
 8001548:	4a19      	ldr	r2, [pc, #100]	@ (80015b0 <Ringbuf_init+0x80>)
 800154a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 800154c:	4b19      	ldr	r3, [pc, #100]	@ (80015b4 <Ringbuf_init+0x84>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <Ringbuf_init+0x84>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2101      	movs	r1, #1
 8001558:	430a      	orrs	r2, r1
 800155a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 800155c:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <Ringbuf_init+0x88>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <Ringbuf_init+0x88>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2101      	movs	r1, #1
 8001568:	430a      	orrs	r2, r1
 800156a:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <Ringbuf_init+0x84>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <Ringbuf_init+0x84>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2120      	movs	r1, #32
 8001578:	430a      	orrs	r2, r1
 800157a:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 800157c:	4b0e      	ldr	r3, [pc, #56]	@ (80015b8 <Ringbuf_init+0x88>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <Ringbuf_init+0x88>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2120      	movs	r1, #32
 8001588:	430a      	orrs	r2, r1
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	46c0      	nop			@ (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	200001dc 	.word	0x200001dc
 8001598:	200000bc 	.word	0x200000bc
 800159c:	200001e0 	.word	0x200001e0
 80015a0:	20000104 	.word	0x20000104
 80015a4:	200001e4 	.word	0x200001e4
 80015a8:	2000014c 	.word	0x2000014c
 80015ac:	200001e8 	.word	0x200001e8
 80015b0:	20000194 	.word	0x20000194
 80015b4:	200001ec 	.word	0x200001ec
 80015b8:	20000274 	.word	0x20000274

080015bc <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	0002      	movs	r2, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	701a      	strb	r2, [r3, #0]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	3301      	adds	r3, #1
 80015d0:	001a      	movs	r2, r3
 80015d2:	233f      	movs	r3, #63	@ 0x3f
 80015d4:	4013      	ands	r3, r2
 80015d6:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d008      	beq.n	80015f4 <store_char+0x38>
    buffer->buffer[buffer->head] = c;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	1df9      	adds	r1, r7, #7
 80015ea:	7809      	ldrb	r1, [r1, #0]
 80015ec:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80015f4:	46c0      	nop			@ (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b004      	add	sp, #16
 80015fa:	bd80      	pop	{r7, pc}

080015fc <Uart_peek>:
	}
}


int Uart_peek(UART_HandleTypeDef *uart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	4b18      	ldr	r3, [pc, #96]	@ (8001668 <Uart_peek+0x6c>)
 8001608:	429a      	cmp	r2, r3
 800160a:	d111      	bne.n	8001630 <Uart_peek+0x34>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 800160c:	4b17      	ldr	r3, [pc, #92]	@ (800166c <Uart_peek+0x70>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001612:	4b16      	ldr	r3, [pc, #88]	@ (800166c <Uart_peek+0x70>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001618:	429a      	cmp	r2, r3
 800161a:	d102      	bne.n	8001622 <Uart_peek+0x26>
		  {
		    return -1;
 800161c:	2301      	movs	r3, #1
 800161e:	425b      	negs	r3, r3
 8001620:	e01e      	b.n	8001660 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 8001622:	4b12      	ldr	r3, [pc, #72]	@ (800166c <Uart_peek+0x70>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b11      	ldr	r3, [pc, #68]	@ (800166c <Uart_peek+0x70>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162c:	5cd3      	ldrb	r3, [r2, r3]
 800162e:	e017      	b.n	8001660 <Uart_peek+0x64>
		  }
	}

	else if (uart == pc_uart)
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <Uart_peek+0x74>)
 8001634:	429a      	cmp	r2, r3
 8001636:	d111      	bne.n	800165c <Uart_peek+0x60>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8001638:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <Uart_peek+0x78>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800163e:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <Uart_peek+0x78>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001644:	429a      	cmp	r2, r3
 8001646:	d102      	bne.n	800164e <Uart_peek+0x52>
		  {
		    return -1;
 8001648:	2301      	movs	r3, #1
 800164a:	425b      	negs	r3, r3
 800164c:	e008      	b.n	8001660 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <Uart_peek+0x78>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <Uart_peek+0x78>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001658:	5cd3      	ldrb	r3, [r2, r3]
 800165a:	e001      	b.n	8001660 <Uart_peek+0x64>
		  }
	}

	return -1;
 800165c:	2301      	movs	r3, #1
 800165e:	425b      	negs	r3, r3
}
 8001660:	0018      	movs	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	b002      	add	sp, #8
 8001666:	bd80      	pop	{r7, pc}
 8001668:	200001ec 	.word	0x200001ec
 800166c:	200001dc 	.word	0x200001dc
 8001670:	20000274 	.word	0x20000274
 8001674:	200001e4 	.word	0x200001e4

08001678 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	4b26      	ldr	r3, [pc, #152]	@ (800171c <Uart_read+0xa4>)
 8001684:	429a      	cmp	r2, r3
 8001686:	d11f      	bne.n	80016c8 <Uart_read+0x50>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8001688:	4b25      	ldr	r3, [pc, #148]	@ (8001720 <Uart_read+0xa8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800168e:	4b24      	ldr	r3, [pc, #144]	@ (8001720 <Uart_read+0xa8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001694:	429a      	cmp	r2, r3
 8001696:	d102      	bne.n	800169e <Uart_read+0x26>
		  {
		    return -1;
 8001698:	2301      	movs	r3, #1
 800169a:	425b      	negs	r3, r3
 800169c:	e03a      	b.n	8001714 <Uart_read+0x9c>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 800169e:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <Uart_read+0xa8>)
 80016a0:	6819      	ldr	r1, [r3, #0]
 80016a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <Uart_read+0xa8>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016a8:	200e      	movs	r0, #14
 80016aa:	183b      	adds	r3, r7, r0
 80016ac:	5c8a      	ldrb	r2, [r1, r2]
 80016ae:	701a      	strb	r2, [r3, #0]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <Uart_read+0xa8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	4b19      	ldr	r3, [pc, #100]	@ (8001720 <Uart_read+0xa8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	213f      	movs	r1, #63	@ 0x3f
 80016be:	400a      	ands	r2, r1
 80016c0:	645a      	str	r2, [r3, #68]	@ 0x44
		    return c;
 80016c2:	183b      	adds	r3, r7, r0
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	e025      	b.n	8001714 <Uart_read+0x9c>
		  }
	}

	else if (uart == pc_uart)
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <Uart_read+0xac>)
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d11f      	bne.n	8001710 <Uart_read+0x98>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80016d0:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <Uart_read+0xb0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016d6:	4b14      	ldr	r3, [pc, #80]	@ (8001728 <Uart_read+0xb0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016dc:	429a      	cmp	r2, r3
 80016de:	d102      	bne.n	80016e6 <Uart_read+0x6e>
		  {
		    return -1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	425b      	negs	r3, r3
 80016e4:	e016      	b.n	8001714 <Uart_read+0x9c>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 80016e6:	4b10      	ldr	r3, [pc, #64]	@ (8001728 <Uart_read+0xb0>)
 80016e8:	6819      	ldr	r1, [r3, #0]
 80016ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001728 <Uart_read+0xb0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80016f0:	200f      	movs	r0, #15
 80016f2:	183b      	adds	r3, r7, r0
 80016f4:	5c8a      	ldrb	r2, [r1, r2]
 80016f6:	701a      	strb	r2, [r3, #0]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 80016f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <Uart_read+0xb0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <Uart_read+0xb0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	213f      	movs	r1, #63	@ 0x3f
 8001706:	400a      	ands	r2, r1
 8001708:	645a      	str	r2, [r3, #68]	@ 0x44
		    return c;
 800170a:	183b      	adds	r3, r7, r0
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	e001      	b.n	8001714 <Uart_read+0x9c>
		  }
	}

	else return -1;
 8001710:	2301      	movs	r3, #1
 8001712:	425b      	negs	r3, r3
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b004      	add	sp, #16
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200001ec 	.word	0x200001ec
 8001720:	200001dc 	.word	0x200001dc
 8001724:	20000274 	.word	0x20000274
 8001728:	200001e4 	.word	0x200001e4

0800172c <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db4e      	blt.n	80017da <Uart_write+0xae>
	{
		if (uart == device_uart){
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	4b29      	ldr	r3, [pc, #164]	@ (80017e4 <Uart_write+0xb8>)
 8001740:	429a      	cmp	r2, r3
 8001742:	d123      	bne.n	800178c <Uart_write+0x60>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8001744:	4b28      	ldr	r3, [pc, #160]	@ (80017e8 <Uart_write+0xbc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	3301      	adds	r3, #1
 800174c:	001a      	movs	r2, r3
 800174e:	233f      	movs	r3, #63	@ 0x3f
 8001750:	4013      	ands	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8001754:	46c0      	nop			@ (mov r8, r8)
 8001756:	4b24      	ldr	r3, [pc, #144]	@ (80017e8 <Uart_write+0xbc>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	429a      	cmp	r2, r3
 8001760:	d0f9      	beq.n	8001756 <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8001762:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <Uart_write+0xbc>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	4b20      	ldr	r3, [pc, #128]	@ (80017e8 <Uart_write+0xbc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	b2c9      	uxtb	r1, r1
 8001770:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8001772:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <Uart_write+0xbc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	641a      	str	r2, [r3, #64]	@ 0x40

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 800177a:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <Uart_write+0xb8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <Uart_write+0xb8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2180      	movs	r1, #128	@ 0x80
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 800178a:	e026      	b.n	80017da <Uart_write+0xae>
		else if (uart == pc_uart){
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	4b17      	ldr	r3, [pc, #92]	@ (80017ec <Uart_write+0xc0>)
 8001790:	429a      	cmp	r2, r3
 8001792:	d122      	bne.n	80017da <Uart_write+0xae>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8001794:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <Uart_write+0xc4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	3301      	adds	r3, #1
 800179c:	001a      	movs	r2, r3
 800179e:	233f      	movs	r3, #63	@ 0x3f
 80017a0:	4013      	ands	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 80017a4:	46c0      	nop			@ (mov r8, r8)
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <Uart_write+0xc4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d0f9      	beq.n	80017a6 <Uart_write+0x7a>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 80017b2:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <Uart_write+0xc4>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <Uart_write+0xc4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	b2c9      	uxtb	r1, r1
 80017c0:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <Uart_write+0xc4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	641a      	str	r2, [r3, #64]	@ 0x40
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 80017ca:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <Uart_write+0xc0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <Uart_write+0xc0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2180      	movs	r1, #128	@ 0x80
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	46bd      	mov	sp, r7
 80017de:	b004      	add	sp, #16
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	200001ec 	.word	0x200001ec
 80017e8:	200001e0 	.word	0x200001e0
 80017ec:	20000274 	.word	0x20000274
 80017f0:	200001e8 	.word	0x200001e8

080017f4 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <IsDataAvailable+0x64>)
 8001800:	429a      	cmp	r2, r3
 8001802:	d10f      	bne.n	8001824 <IsDataAvailable+0x30>
 8001804:	4b15      	ldr	r3, [pc, #84]	@ (800185c <IsDataAvailable+0x68>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	b29a      	uxth	r2, r3
 800180c:	4b13      	ldr	r3, [pc, #76]	@ (800185c <IsDataAvailable+0x68>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	b29b      	uxth	r3, r3
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	b29b      	uxth	r3, r3
 8001818:	3340      	adds	r3, #64	@ 0x40
 800181a:	b29b      	uxth	r3, r3
 800181c:	001a      	movs	r2, r3
 800181e:	233f      	movs	r3, #63	@ 0x3f
 8001820:	4013      	ands	r3, r2
 8001822:	e015      	b.n	8001850 <IsDataAvailable+0x5c>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <IsDataAvailable+0x6c>)
 8001828:	429a      	cmp	r2, r3
 800182a:	d10f      	bne.n	800184c <IsDataAvailable+0x58>
 800182c:	4b0d      	ldr	r3, [pc, #52]	@ (8001864 <IsDataAvailable+0x70>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	b29a      	uxth	r2, r3
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <IsDataAvailable+0x70>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	b29b      	uxth	r3, r3
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	b29b      	uxth	r3, r3
 8001840:	3340      	adds	r3, #64	@ 0x40
 8001842:	b29b      	uxth	r3, r3
 8001844:	001a      	movs	r2, r3
 8001846:	233f      	movs	r3, #63	@ 0x3f
 8001848:	4013      	ands	r3, r2
 800184a:	e001      	b.n	8001850 <IsDataAvailable+0x5c>
	return -1;
 800184c:	2301      	movs	r3, #1
 800184e:	425b      	negs	r3, r3
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b002      	add	sp, #8
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200001ec 	.word	0x200001ec
 800185c:	200001dc 	.word	0x200001dc
 8001860:	20000274 	.word	0x20000274
 8001864:	200001e4 	.word	0x200001e4

08001868 <Uart_sendstring>:
	}
	return 1;
}

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8001872:	e009      	b.n	8001888 <Uart_sendstring+0x20>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	001a      	movs	r2, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	0019      	movs	r1, r3
 8001882:	0010      	movs	r0, r2
 8001884:	f7ff ff52 	bl	800172c <Uart_write>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f1      	bne.n	8001874 <Uart_sendstring+0xc>
}
 8001890:	46c0      	nop			@ (mov r8, r8)
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b002      	add	sp, #8
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
	int so_far =0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	0018      	movs	r0, r3
 80018b0:	f7fe fc28 	bl	8000104 <strlen>
 80018b4:	0003      	movs	r3, r0
 80018b6:	617b      	str	r3, [r7, #20]
	int indx = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 80018bc:	46c0      	nop			@ (mov r8, r8)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	0018      	movs	r0, r3
 80018c2:	f7ff ff97 	bl	80017f4 <IsDataAvailable>
 80018c6:	1e03      	subs	r3, r0, #0
 80018c8:	d0f9      	beq.n	80018be <Copy_upto+0x22>
	while (Uart_peek(uart) != string[so_far])
 80018ca:	e01c      	b.n	8001906 <Copy_upto+0x6a>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 80018cc:	4b31      	ldr	r3, [pc, #196]	@ (8001994 <Copy_upto+0xf8>)
 80018ce:	6819      	ldr	r1, [r3, #0]
 80018d0:	4b30      	ldr	r3, [pc, #192]	@ (8001994 <Copy_upto+0xf8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	68b8      	ldr	r0, [r7, #8]
 80018da:	18c3      	adds	r3, r0, r3
 80018dc:	5c8a      	ldrb	r2, [r1, r2]
 80018de:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80018e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001994 <Copy_upto+0xf8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	1c5a      	adds	r2, r3, #1
 80018e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001994 <Copy_upto+0xf8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	213f      	movs	r1, #63	@ 0x3f
 80018ee:	400a      	ands	r2, r1
 80018f0:	645a      	str	r2, [r3, #68]	@ 0x44
			indx++;
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	3301      	adds	r3, #1
 80018f6:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 80018f8:	46c0      	nop			@ (mov r8, r8)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	0018      	movs	r0, r3
 80018fe:	f7ff ff79 	bl	80017f4 <IsDataAvailable>
 8001902:	1e03      	subs	r3, r0, #0
 8001904:	d0f9      	beq.n	80018fa <Copy_upto+0x5e>
	while (Uart_peek(uart) != string[so_far])
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff fe77 	bl	80015fc <Uart_peek>
 800190e:	0001      	movs	r1, r0
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	18d3      	adds	r3, r2, r3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4299      	cmp	r1, r3
 800191a:	d1d7      	bne.n	80018cc <Copy_upto+0x30>

		}
	while (Uart_peek(uart) == string [so_far])
 800191c:	e01c      	b.n	8001958 <Copy_upto+0xbc>
	{
		so_far++;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3301      	adds	r3, #1
 8001922:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	0018      	movs	r0, r3
 8001928:	f7ff fea6 	bl	8001678 <Uart_read>
 800192c:	0001      	movs	r1, r0
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	1c5a      	adds	r2, r3, #1
 8001932:	61ba      	str	r2, [r7, #24]
 8001934:	001a      	movs	r2, r3
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	189b      	adds	r3, r3, r2
 800193a:	b2ca      	uxtb	r2, r1
 800193c:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 800193e:	69fa      	ldr	r2, [r7, #28]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	429a      	cmp	r2, r3
 8001944:	d101      	bne.n	800194a <Copy_upto+0xae>
 8001946:	2301      	movs	r3, #1
 8001948:	e020      	b.n	800198c <Copy_upto+0xf0>
		while (!IsDataAvailable(uart));
 800194a:	46c0      	nop			@ (mov r8, r8)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	0018      	movs	r0, r3
 8001950:	f7ff ff50 	bl	80017f4 <IsDataAvailable>
 8001954:	1e03      	subs	r3, r0, #0
 8001956:	d0f9      	beq.n	800194c <Copy_upto+0xb0>
	while (Uart_peek(uart) == string [so_far])
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	0018      	movs	r0, r3
 800195c:	f7ff fe4e 	bl	80015fc <Uart_peek>
 8001960:	0001      	movs	r1, r0
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	18d3      	adds	r3, r2, r3
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	4299      	cmp	r1, r3
 800196c:	d0d7      	beq.n	800191e <Copy_upto+0x82>
	}

	if (so_far != len)
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	429a      	cmp	r2, r3
 8001974:	d002      	beq.n	800197c <Copy_upto+0xe0>
	{
		so_far = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
		goto again;
 800197a:	e79f      	b.n	80018bc <Copy_upto+0x20>
	}

	if (so_far == len) return 1;
 800197c:	69fa      	ldr	r2, [r7, #28]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	429a      	cmp	r2, r3
 8001982:	d101      	bne.n	8001988 <Copy_upto+0xec>
 8001984:	2301      	movs	r3, #1
 8001986:	e001      	b.n	800198c <Copy_upto+0xf0>
	else return -1;
 8001988:	2301      	movs	r3, #1
 800198a:	425b      	negs	r3, r3

}
 800198c:	0018      	movs	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	b008      	add	sp, #32
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200001dc 	.word	0x200001dc

08001998 <Wait_for>:

int Wait_for (char *string, UART_HandleTypeDef *uart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7fe fbab 	bl	8000104 <strlen>
 80019ae:	0003      	movs	r3, r0
 80019b0:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable(uart));
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	0018      	movs	r0, r3
 80019b8:	f7ff ff1c 	bl	80017f4 <IsDataAvailable>
 80019bc:	1e03      	subs	r3, r0, #0
 80019be:	d0f9      	beq.n	80019b4 <Wait_for+0x1c>
	if (uart == device_uart)
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	4b32      	ldr	r3, [pc, #200]	@ (8001a8c <Wait_for+0xf4>)
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d115      	bne.n	80019f4 <Wait_for+0x5c>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80019c8:	e008      	b.n	80019dc <Wait_for+0x44>
 80019ca:	4b31      	ldr	r3, [pc, #196]	@ (8001a90 <Wait_for+0xf8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a90 <Wait_for+0xf8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	213f      	movs	r1, #63	@ 0x3f
 80019d8:	400a      	ands	r2, r1
 80019da:	645a      	str	r2, [r3, #68]	@ 0x44
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	0018      	movs	r0, r3
 80019e0:	f7ff fe0c 	bl	80015fc <Uart_peek>
 80019e4:	0001      	movs	r1, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	18d3      	adds	r3, r2, r3
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4299      	cmp	r1, r3
 80019f0:	d1eb      	bne.n	80019ca <Wait_for+0x32>
 80019f2:	e02d      	b.n	8001a50 <Wait_for+0xb8>
	else if (uart == pc_uart)
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	4b27      	ldr	r3, [pc, #156]	@ (8001a94 <Wait_for+0xfc>)
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d129      	bne.n	8001a50 <Wait_for+0xb8>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 80019fc:	e008      	b.n	8001a10 <Wait_for+0x78>
 80019fe:	4b26      	ldr	r3, [pc, #152]	@ (8001a98 <Wait_for+0x100>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <Wait_for+0x100>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	213f      	movs	r1, #63	@ 0x3f
 8001a0c:	400a      	ands	r2, r1
 8001a0e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	0018      	movs	r0, r3
 8001a14:	f7ff fdf2 	bl	80015fc <Uart_peek>
 8001a18:	0001      	movs	r1, r0
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	18d3      	adds	r3, r2, r3
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	4299      	cmp	r1, r3
 8001a24:	d1eb      	bne.n	80019fe <Wait_for+0x66>
	while (Uart_peek(uart) == string [so_far])
 8001a26:	e013      	b.n	8001a50 <Wait_for+0xb8>
	{
		so_far++;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff fe21 	bl	8001678 <Uart_read>
		if (so_far == len) return 1;
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d101      	bne.n	8001a42 <Wait_for+0xaa>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e020      	b.n	8001a84 <Wait_for+0xec>
		while (!IsDataAvailable(uart));
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7ff fed4 	bl	80017f4 <IsDataAvailable>
 8001a4c:	1e03      	subs	r3, r0, #0
 8001a4e:	d0f9      	beq.n	8001a44 <Wait_for+0xac>
	while (Uart_peek(uart) == string [so_far])
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	0018      	movs	r0, r3
 8001a54:	f7ff fdd2 	bl	80015fc <Uart_peek>
 8001a58:	0001      	movs	r1, r0
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	18d3      	adds	r3, r2, r3
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	4299      	cmp	r1, r3
 8001a64:	d0e0      	beq.n	8001a28 <Wait_for+0x90>
	}

	if (so_far != len)
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d002      	beq.n	8001a74 <Wait_for+0xdc>
	{
		so_far = 0;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
		goto again;
 8001a72:	e79e      	b.n	80019b2 <Wait_for+0x1a>
	}

	if (so_far == len) return 1;
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d101      	bne.n	8001a80 <Wait_for+0xe8>
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e001      	b.n	8001a84 <Wait_for+0xec>
	else return -1;
 8001a80:	2301      	movs	r3, #1
 8001a82:	425b      	negs	r3, r3
}
 8001a84:	0018      	movs	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b004      	add	sp, #16
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200001ec 	.word	0x200001ec
 8001a90:	200001dc 	.word	0x200001dc
 8001a94:	20000274 	.word	0x20000274
 8001a98:	200001e4 	.word	0x200001e4

08001a9c <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d028      	beq.n	8001b0e <Uart_isr+0x72>
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d024      	beq.n	8001b0e <Uart_isr+0x72>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	701a      	strb	r2, [r3, #0]
        if (huart == device_uart)
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd8 <Uart_isr+0x13c>)
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d108      	bne.n	8001af2 <Uart_isr+0x56>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8001ae0:	4b3e      	ldr	r3, [pc, #248]	@ (8001bdc <Uart_isr+0x140>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	0011      	movs	r1, r2
 8001aea:	0018      	movs	r0, r3
 8001aec:	f7ff fd66 	bl	80015bc <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8001af0:	e06b      	b.n	8001bca <Uart_isr+0x12e>
        else if (huart == pc_uart)
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	4b3a      	ldr	r3, [pc, #232]	@ (8001be0 <Uart_isr+0x144>)
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d167      	bne.n	8001bca <Uart_isr+0x12e>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8001afa:	4b3a      	ldr	r3, [pc, #232]	@ (8001be4 <Uart_isr+0x148>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	230f      	movs	r3, #15
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	0011      	movs	r1, r2
 8001b06:	0018      	movs	r0, r3
 8001b08:	f7ff fd58 	bl	80015bc <store_char>
        return;
 8001b0c:	e05d      	b.n	8001bca <Uart_isr+0x12e>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	2280      	movs	r2, #128	@ 0x80
 8001b12:	4013      	ands	r3, r2
 8001b14:	d05c      	beq.n	8001bd0 <Uart_isr+0x134>
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	2280      	movs	r2, #128	@ 0x80
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d058      	beq.n	8001bd0 <Uart_isr+0x134>
    {
    	if (huart == device_uart){
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd8 <Uart_isr+0x13c>)
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d126      	bne.n	8001b74 <Uart_isr+0xd8>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8001b26:	4b30      	ldr	r3, [pc, #192]	@ (8001be8 <Uart_isr+0x14c>)
 8001b28:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001be8 <Uart_isr+0x14c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d108      	bne.n	8001b44 <Uart_isr+0xa8>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2180      	movs	r1, #128	@ 0x80
 8001b3e:	438a      	bics	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]
        	      huart->Instance->ISR;
        	      huart->Instance->TDR = c;

        	    }
        	}
    	return;
 8001b42:	e044      	b.n	8001bce <Uart_isr+0x132>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8001b44:	4b28      	ldr	r3, [pc, #160]	@ (8001be8 <Uart_isr+0x14c>)
 8001b46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b48:	200d      	movs	r0, #13
 8001b4a:	183b      	adds	r3, r7, r0
 8001b4c:	4926      	ldr	r1, [pc, #152]	@ (8001be8 <Uart_isr+0x14c>)
 8001b4e:	5c8a      	ldrb	r2, [r1, r2]
 8001b50:	701a      	strb	r2, [r3, #0]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8001b52:	4b25      	ldr	r3, [pc, #148]	@ (8001be8 <Uart_isr+0x14c>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	3301      	adds	r3, #1
 8001b58:	223f      	movs	r2, #63	@ 0x3f
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	4b22      	ldr	r3, [pc, #136]	@ (8001be8 <Uart_isr+0x14c>)
 8001b5e:	645a      	str	r2, [r3, #68]	@ 0x44
    	      huart->Instance->ISR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->TDR = c;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	183a      	adds	r2, r7, r0
 8001b6c:	7812      	ldrb	r2, [r2, #0]
 8001b6e:	b292      	uxth	r2, r2
 8001b70:	851a      	strh	r2, [r3, #40]	@ 0x28
    	return;
 8001b72:	e02c      	b.n	8001bce <Uart_isr+0x132>
    	else if (huart == pc_uart){
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <Uart_isr+0x144>)
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d128      	bne.n	8001bce <Uart_isr+0x132>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <Uart_isr+0x150>)
 8001b7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b80:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <Uart_isr+0x150>)
 8001b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d108      	bne.n	8001b9a <Uart_isr+0xfe>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2180      	movs	r1, #128	@ 0x80
 8001b94:	438a      	bics	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]
    	return;
 8001b98:	e019      	b.n	8001bce <Uart_isr+0x132>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001b9a:	4b14      	ldr	r3, [pc, #80]	@ (8001bec <Uart_isr+0x150>)
 8001b9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b9e:	200e      	movs	r0, #14
 8001ba0:	183b      	adds	r3, r7, r0
 8001ba2:	4912      	ldr	r1, [pc, #72]	@ (8001bec <Uart_isr+0x150>)
 8001ba4:	5c8a      	ldrb	r2, [r1, r2]
 8001ba6:	701a      	strb	r2, [r3, #0]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001ba8:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <Uart_isr+0x150>)
 8001baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bac:	3301      	adds	r3, #1
 8001bae:	223f      	movs	r2, #63	@ 0x3f
 8001bb0:	401a      	ands	r2, r3
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <Uart_isr+0x150>)
 8001bb4:	645a      	str	r2, [r3, #68]	@ 0x44
        	      huart->Instance->ISR;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	69db      	ldr	r3, [r3, #28]
        	      huart->Instance->TDR = c;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	183a      	adds	r2, r7, r0
 8001bc2:	7812      	ldrb	r2, [r2, #0]
 8001bc4:	b292      	uxth	r2, r2
 8001bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
    	return;
 8001bc8:	e001      	b.n	8001bce <Uart_isr+0x132>
        return;
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	e000      	b.n	8001bd0 <Uart_isr+0x134>
    	return;
 8001bce:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b006      	add	sp, #24
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			@ (mov r8, r8)
 8001bd8:	200001ec 	.word	0x200001ec
 8001bdc:	200001dc 	.word	0x200001dc
 8001be0:	20000274 	.word	0x20000274
 8001be4:	200001e4 	.word	0x200001e4
 8001be8:	20000104 	.word	0x20000104
 8001bec:	20000194 	.word	0x20000194

08001bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf4:	f000 faae 	bl	8002154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf8:	f000 f814 	bl	8001c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bfc:	f000 f8d6 	bl	8001dac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001c00:	f000 f874 	bl	8001cec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001c04:	f000 f8a2 	bl	8001d4c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Init("DESKTOP-BFVT10T 8599", "434?tT46");
 8001c08:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <main+0x2c>)
 8001c0a:	4b05      	ldr	r3, [pc, #20]	@ (8001c20 <main+0x30>)
 8001c0c:	0011      	movs	r1, r2
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f7fe fc00 	bl	8000414 <ESP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Server_Start();
 8001c14:	f7fe fd70 	bl	80006f8 <Server_Start>
 8001c18:	e7fc      	b.n	8001c14 <main+0x24>
 8001c1a:	46c0      	nop			@ (mov r8, r8)
 8001c1c:	08004f50 	.word	0x08004f50
 8001c20:	08004f5c 	.word	0x08004f5c

08001c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b099      	sub	sp, #100	@ 0x64
 8001c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c2a:	242c      	movs	r4, #44	@ 0x2c
 8001c2c:	193b      	adds	r3, r7, r4
 8001c2e:	0018      	movs	r0, r3
 8001c30:	2334      	movs	r3, #52	@ 0x34
 8001c32:	001a      	movs	r2, r3
 8001c34:	2100      	movs	r1, #0
 8001c36:	f002 fbcb 	bl	80043d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c3a:	231c      	movs	r3, #28
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	0018      	movs	r0, r3
 8001c40:	2310      	movs	r3, #16
 8001c42:	001a      	movs	r2, r3
 8001c44:	2100      	movs	r1, #0
 8001c46:	f002 fbc3 	bl	80043d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c4a:	003b      	movs	r3, r7
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	231c      	movs	r3, #28
 8001c50:	001a      	movs	r2, r3
 8001c52:	2100      	movs	r1, #0
 8001c54:	f002 fbbc 	bl	80043d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c58:	0021      	movs	r1, r4
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	2201      	movs	r2, #1
 8001c64:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c66:	187b      	adds	r3, r7, r1
 8001c68:	2210      	movs	r2, #16
 8001c6a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	2202      	movs	r2, #2
 8001c70:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c72:	187b      	adds	r3, r7, r1
 8001c74:	2280      	movs	r2, #128	@ 0x80
 8001c76:	0212      	lsls	r2, r2, #8
 8001c78:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	2200      	movs	r2, #0
 8001c84:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c86:	187b      	adds	r3, r7, r1
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f000 fddd 	bl	8002848 <HAL_RCC_OscConfig>
 8001c8e:	1e03      	subs	r3, r0, #0
 8001c90:	d001      	beq.n	8001c96 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001c92:	f000 f8fd 	bl	8001e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c96:	211c      	movs	r1, #28
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	2207      	movs	r2, #7
 8001c9c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	2200      	movs	r2, #0
 8001cae:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f001 f94d 	bl	8002f54 <HAL_RCC_ClockConfig>
 8001cba:	1e03      	subs	r3, r0, #0
 8001cbc:	d001      	beq.n	8001cc2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001cbe:	f000 f8e7 	bl	8001e90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8001cc2:	003b      	movs	r3, r7
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001cc8:	003b      	movs	r3, r7
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cce:	003b      	movs	r3, r7
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cd4:	003b      	movs	r3, r7
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f001 faa8 	bl	800322c <HAL_RCCEx_PeriphCLKConfig>
 8001cdc:	1e03      	subs	r3, r0, #0
 8001cde:	d001      	beq.n	8001ce4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ce0:	f000 f8d6 	bl	8001e90 <Error_Handler>
  }
}
 8001ce4:	46c0      	nop			@ (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b019      	add	sp, #100	@ 0x64
 8001cea:	bd90      	pop	{r4, r7, pc}

08001cec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cf0:	4b14      	ldr	r3, [pc, #80]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001cf2:	4a15      	ldr	r2, [pc, #84]	@ (8001d48 <MX_USART1_UART_Init+0x5c>)
 8001cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001cf8:	22e1      	movs	r2, #225	@ 0xe1
 8001cfa:	0252      	lsls	r2, r2, #9
 8001cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d12:	220c      	movs	r2, #12
 8001d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d2e:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d30:	0018      	movs	r0, r3
 8001d32:	f001 fb7b 	bl	800342c <HAL_UART_Init>
 8001d36:	1e03      	subs	r3, r0, #0
 8001d38:	d001      	beq.n	8001d3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d3a:	f000 f8a9 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d3e:	46c0      	nop			@ (mov r8, r8)
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	200001ec 	.word	0x200001ec
 8001d48:	40013800 	.word	0x40013800

08001d4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d50:	4b14      	ldr	r3, [pc, #80]	@ (8001da4 <MX_USART2_UART_Init+0x58>)
 8001d52:	4a15      	ldr	r2, [pc, #84]	@ (8001da8 <MX_USART2_UART_Init+0x5c>)
 8001d54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d56:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <MX_USART2_UART_Init+0x58>)
 8001d58:	22e1      	movs	r2, #225	@ 0xe1
 8001d5a:	0252      	lsls	r2, r2, #9
 8001d5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5e:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <MX_USART2_UART_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <MX_USART2_UART_Init+0x58>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <MX_USART2_UART_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <MX_USART2_UART_Init+0x58>)
 8001d72:	220c      	movs	r2, #12
 8001d74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	@ (8001da4 <MX_USART2_UART_Init+0x58>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <MX_USART2_UART_Init+0x58>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d82:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <MX_USART2_UART_Init+0x58>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <MX_USART2_UART_Init+0x58>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d8e:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <MX_USART2_UART_Init+0x58>)
 8001d90:	0018      	movs	r0, r3
 8001d92:	f001 fb4b 	bl	800342c <HAL_UART_Init>
 8001d96:	1e03      	subs	r3, r0, #0
 8001d98:	d001      	beq.n	8001d9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d9a:	f000 f879 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000274 	.word	0x20000274
 8001da8:	40004400 	.word	0x40004400

08001dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dac:	b590      	push	{r4, r7, lr}
 8001dae:	b089      	sub	sp, #36	@ 0x24
 8001db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db2:	240c      	movs	r4, #12
 8001db4:	193b      	adds	r3, r7, r4
 8001db6:	0018      	movs	r0, r3
 8001db8:	2314      	movs	r3, #20
 8001dba:	001a      	movs	r2, r3
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	f002 fb07 	bl	80043d0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dc2:	4b31      	ldr	r3, [pc, #196]	@ (8001e88 <MX_GPIO_Init+0xdc>)
 8001dc4:	695a      	ldr	r2, [r3, #20]
 8001dc6:	4b30      	ldr	r3, [pc, #192]	@ (8001e88 <MX_GPIO_Init+0xdc>)
 8001dc8:	2180      	movs	r1, #128	@ 0x80
 8001dca:	03c9      	lsls	r1, r1, #15
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	615a      	str	r2, [r3, #20]
 8001dd0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e88 <MX_GPIO_Init+0xdc>)
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	2380      	movs	r3, #128	@ 0x80
 8001dd6:	03db      	lsls	r3, r3, #15
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	4b2a      	ldr	r3, [pc, #168]	@ (8001e88 <MX_GPIO_Init+0xdc>)
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	4b29      	ldr	r3, [pc, #164]	@ (8001e88 <MX_GPIO_Init+0xdc>)
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	0289      	lsls	r1, r1, #10
 8001de8:	430a      	orrs	r2, r1
 8001dea:	615a      	str	r2, [r3, #20]
 8001dec:	4b26      	ldr	r3, [pc, #152]	@ (8001e88 <MX_GPIO_Init+0xdc>)
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	2380      	movs	r3, #128	@ 0x80
 8001df2:	029b      	lsls	r3, r3, #10
 8001df4:	4013      	ands	r3, r2
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	4b23      	ldr	r3, [pc, #140]	@ (8001e88 <MX_GPIO_Init+0xdc>)
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	4b22      	ldr	r3, [pc, #136]	@ (8001e88 <MX_GPIO_Init+0xdc>)
 8001e00:	2180      	movs	r1, #128	@ 0x80
 8001e02:	02c9      	lsls	r1, r1, #11
 8001e04:	430a      	orrs	r2, r1
 8001e06:	615a      	str	r2, [r3, #20]
 8001e08:	4b1f      	ldr	r3, [pc, #124]	@ (8001e88 <MX_GPIO_Init+0xdc>)
 8001e0a:	695a      	ldr	r2, [r3, #20]
 8001e0c:	2380      	movs	r3, #128	@ 0x80
 8001e0e:	02db      	lsls	r3, r3, #11
 8001e10:	4013      	ands	r3, r2
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e16:	2390      	movs	r3, #144	@ 0x90
 8001e18:	05db      	lsls	r3, r3, #23
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	2120      	movs	r1, #32
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f000 fcf4 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001e24:	23ff      	movs	r3, #255	@ 0xff
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	4818      	ldr	r0, [pc, #96]	@ (8001e8c <MX_GPIO_Init+0xe0>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	f000 fced 	bl	800280c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e32:	193b      	adds	r3, r7, r4
 8001e34:	2220      	movs	r2, #32
 8001e36:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e38:	193b      	adds	r3, r7, r4
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	193b      	adds	r3, r7, r4
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	193b      	adds	r3, r7, r4
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	193a      	adds	r2, r7, r4
 8001e4c:	2390      	movs	r3, #144	@ 0x90
 8001e4e:	05db      	lsls	r3, r3, #23
 8001e50:	0011      	movs	r1, r2
 8001e52:	0018      	movs	r0, r3
 8001e54:	f000 fb62 	bl	800251c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001e58:	0021      	movs	r1, r4
 8001e5a:	187b      	adds	r3, r7, r1
 8001e5c:	22ff      	movs	r2, #255	@ 0xff
 8001e5e:	0212      	lsls	r2, r2, #8
 8001e60:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	2201      	movs	r2, #1
 8001e66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	187b      	adds	r3, r7, r1
 8001e70:	2200      	movs	r2, #0
 8001e72:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	187b      	adds	r3, r7, r1
 8001e76:	4a05      	ldr	r2, [pc, #20]	@ (8001e8c <MX_GPIO_Init+0xe0>)
 8001e78:	0019      	movs	r1, r3
 8001e7a:	0010      	movs	r0, r2
 8001e7c:	f000 fb4e 	bl	800251c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e80:	46c0      	nop			@ (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b009      	add	sp, #36	@ 0x24
 8001e86:	bd90      	pop	{r4, r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	48000400 	.word	0x48000400

08001e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e94:	b672      	cpsid	i
}
 8001e96:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e98:	46c0      	nop			@ (mov r8, r8)
 8001e9a:	e7fd      	b.n	8001e98 <Error_Handler+0x8>

08001e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	619a      	str	r2, [r3, #24]
 8001eae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ebc:	69da      	ldr	r2, [r3, #28]
 8001ebe:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ec0:	2180      	movs	r1, #128	@ 0x80
 8001ec2:	0549      	lsls	r1, r1, #21
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	61da      	str	r2, [r3, #28]
 8001ec8:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001eca:	69da      	ldr	r2, [r3, #28]
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	055b      	lsls	r3, r3, #21
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	46c0      	nop			@ (mov r8, r8)
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b08d      	sub	sp, #52	@ 0x34
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	241c      	movs	r4, #28
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	2314      	movs	r3, #20
 8001ef4:	001a      	movs	r2, r3
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	f002 fa6a 	bl	80043d0 <memset>
  if(huart->Instance==USART1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a41      	ldr	r2, [pc, #260]	@ (8002008 <HAL_UART_MspInit+0x124>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d13c      	bne.n	8001f80 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f06:	4b41      	ldr	r3, [pc, #260]	@ (800200c <HAL_UART_MspInit+0x128>)
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	4b40      	ldr	r3, [pc, #256]	@ (800200c <HAL_UART_MspInit+0x128>)
 8001f0c:	2180      	movs	r1, #128	@ 0x80
 8001f0e:	01c9      	lsls	r1, r1, #7
 8001f10:	430a      	orrs	r2, r1
 8001f12:	619a      	str	r2, [r3, #24]
 8001f14:	4b3d      	ldr	r3, [pc, #244]	@ (800200c <HAL_UART_MspInit+0x128>)
 8001f16:	699a      	ldr	r2, [r3, #24]
 8001f18:	2380      	movs	r3, #128	@ 0x80
 8001f1a:	01db      	lsls	r3, r3, #7
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
 8001f20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	4b3a      	ldr	r3, [pc, #232]	@ (800200c <HAL_UART_MspInit+0x128>)
 8001f24:	695a      	ldr	r2, [r3, #20]
 8001f26:	4b39      	ldr	r3, [pc, #228]	@ (800200c <HAL_UART_MspInit+0x128>)
 8001f28:	2180      	movs	r1, #128	@ 0x80
 8001f2a:	0289      	lsls	r1, r1, #10
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	615a      	str	r2, [r3, #20]
 8001f30:	4b36      	ldr	r3, [pc, #216]	@ (800200c <HAL_UART_MspInit+0x128>)
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	2380      	movs	r3, #128	@ 0x80
 8001f36:	029b      	lsls	r3, r3, #10
 8001f38:	4013      	ands	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f3e:	193b      	adds	r3, r7, r4
 8001f40:	22c0      	movs	r2, #192	@ 0xc0
 8001f42:	00d2      	lsls	r2, r2, #3
 8001f44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	0021      	movs	r1, r4
 8001f48:	187b      	adds	r3, r7, r1
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	187b      	adds	r3, r7, r1
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	2203      	movs	r2, #3
 8001f58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001f5a:	187b      	adds	r3, r7, r1
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f60:	187a      	adds	r2, r7, r1
 8001f62:	2390      	movs	r3, #144	@ 0x90
 8001f64:	05db      	lsls	r3, r3, #23
 8001f66:	0011      	movs	r1, r2
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f000 fad7 	bl	800251c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	201b      	movs	r0, #27
 8001f74:	f000 fa22 	bl	80023bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f78:	201b      	movs	r0, #27
 8001f7a:	f000 fa34 	bl	80023e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f7e:	e03f      	b.n	8002000 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a22      	ldr	r2, [pc, #136]	@ (8002010 <HAL_UART_MspInit+0x12c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d13a      	bne.n	8002000 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f8a:	4b20      	ldr	r3, [pc, #128]	@ (800200c <HAL_UART_MspInit+0x128>)
 8001f8c:	69da      	ldr	r2, [r3, #28]
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800200c <HAL_UART_MspInit+0x128>)
 8001f90:	2180      	movs	r1, #128	@ 0x80
 8001f92:	0289      	lsls	r1, r1, #10
 8001f94:	430a      	orrs	r2, r1
 8001f96:	61da      	str	r2, [r3, #28]
 8001f98:	4b1c      	ldr	r3, [pc, #112]	@ (800200c <HAL_UART_MspInit+0x128>)
 8001f9a:	69da      	ldr	r2, [r3, #28]
 8001f9c:	2380      	movs	r3, #128	@ 0x80
 8001f9e:	029b      	lsls	r3, r3, #10
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa6:	4b19      	ldr	r3, [pc, #100]	@ (800200c <HAL_UART_MspInit+0x128>)
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	4b18      	ldr	r3, [pc, #96]	@ (800200c <HAL_UART_MspInit+0x128>)
 8001fac:	2180      	movs	r1, #128	@ 0x80
 8001fae:	0289      	lsls	r1, r1, #10
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	615a      	str	r2, [r3, #20]
 8001fb4:	4b15      	ldr	r3, [pc, #84]	@ (800200c <HAL_UART_MspInit+0x128>)
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	2380      	movs	r3, #128	@ 0x80
 8001fba:	029b      	lsls	r3, r3, #10
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fc2:	211c      	movs	r1, #28
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	220c      	movs	r2, #12
 8001fc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	187b      	adds	r3, r7, r1
 8001fcc:	2202      	movs	r2, #2
 8001fce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fd6:	187b      	adds	r3, r7, r1
 8001fd8:	2203      	movs	r2, #3
 8001fda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	2201      	movs	r2, #1
 8001fe0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	187a      	adds	r2, r7, r1
 8001fe4:	2390      	movs	r3, #144	@ 0x90
 8001fe6:	05db      	lsls	r3, r3, #23
 8001fe8:	0011      	movs	r1, r2
 8001fea:	0018      	movs	r0, r3
 8001fec:	f000 fa96 	bl	800251c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	201c      	movs	r0, #28
 8001ff6:	f000 f9e1 	bl	80023bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ffa:	201c      	movs	r0, #28
 8001ffc:	f000 f9f3 	bl	80023e6 <HAL_NVIC_EnableIRQ>
}
 8002000:	46c0      	nop			@ (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	b00d      	add	sp, #52	@ 0x34
 8002006:	bd90      	pop	{r4, r7, pc}
 8002008:	40013800 	.word	0x40013800
 800200c:	40021000 	.word	0x40021000
 8002010:	40004400 	.word	0x40004400

08002014 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002018:	46c0      	nop			@ (mov r8, r8)
 800201a:	e7fd      	b.n	8002018 <NMI_Handler+0x4>

0800201c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002020:	46c0      	nop			@ (mov r8, r8)
 8002022:	e7fd      	b.n	8002020 <HardFault_Handler+0x4>

08002024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002028:	46c0      	nop			@ (mov r8, r8)
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002032:	46c0      	nop			@ (mov r8, r8)
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800203c:	f000 f8d2 	bl	80021e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002040:	46c0      	nop			@ (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 800204c:	4b05      	ldr	r3, [pc, #20]	@ (8002064 <USART1_IRQHandler+0x1c>)
 800204e:	0018      	movs	r0, r3
 8002050:	f7ff fd24 	bl	8001a9c <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002054:	4b03      	ldr	r3, [pc, #12]	@ (8002064 <USART1_IRQHandler+0x1c>)
 8002056:	0018      	movs	r0, r3
 8002058:	f001 fa3c 	bl	80034d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800205c:	46c0      	nop			@ (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	200001ec 	.word	0x200001ec

08002068 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 800206c:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <USART2_IRQHandler+0x1c>)
 800206e:	0018      	movs	r0, r3
 8002070:	f7ff fd14 	bl	8001a9c <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002074:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <USART2_IRQHandler+0x1c>)
 8002076:	0018      	movs	r0, r3
 8002078:	f001 fa2c 	bl	80034d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800207c:	46c0      	nop			@ (mov r8, r8)
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			@ (mov r8, r8)
 8002084:	20000274 	.word	0x20000274

08002088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002090:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <_sbrk+0x5c>)
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <_sbrk+0x60>)
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800209c:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a4:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <_sbrk+0x64>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	@ (80020f0 <_sbrk+0x68>)
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020aa:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	18d3      	adds	r3, r2, r3
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d207      	bcs.n	80020c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b8:	f002 f9b6 	bl	8004428 <__errno>
 80020bc:	0003      	movs	r3, r0
 80020be:	220c      	movs	r2, #12
 80020c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c2:	2301      	movs	r3, #1
 80020c4:	425b      	negs	r3, r3
 80020c6:	e009      	b.n	80020dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c8:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ce:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <_sbrk+0x64>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	18d2      	adds	r2, r2, r3
 80020d6:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <_sbrk+0x64>)
 80020d8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80020da:	68fb      	ldr	r3, [r7, #12]
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	b006      	add	sp, #24
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20008000 	.word	0x20008000
 80020e8:	00000400 	.word	0x00000400
 80020ec:	200002fc 	.word	0x200002fc
 80020f0:	20000450 	.word	0x20000450

080020f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80020f8:	46c0      	nop			@ (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002100:	480d      	ldr	r0, [pc, #52]	@ (8002138 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002102:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002104:	f7ff fff6 	bl	80020f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002108:	480c      	ldr	r0, [pc, #48]	@ (800213c <LoopForever+0x6>)
  ldr r1, =_edata
 800210a:	490d      	ldr	r1, [pc, #52]	@ (8002140 <LoopForever+0xa>)
  ldr r2, =_sidata
 800210c:	4a0d      	ldr	r2, [pc, #52]	@ (8002144 <LoopForever+0xe>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002110:	e002      	b.n	8002118 <LoopCopyDataInit>

08002112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002116:	3304      	adds	r3, #4

08002118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800211c:	d3f9      	bcc.n	8002112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211e:	4a0a      	ldr	r2, [pc, #40]	@ (8002148 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002120:	4c0a      	ldr	r4, [pc, #40]	@ (800214c <LoopForever+0x16>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002124:	e001      	b.n	800212a <LoopFillZerobss>

08002126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002128:	3204      	adds	r2, #4

0800212a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800212c:	d3fb      	bcc.n	8002126 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800212e:	f002 f981 	bl	8004434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002132:	f7ff fd5d 	bl	8001bf0 <main>

08002136 <LoopForever>:

LoopForever:
    b LoopForever
 8002136:	e7fe      	b.n	8002136 <LoopForever>
  ldr   r0, =_estack
 8002138:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800213c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002140:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002144:	08004fe8 	.word	0x08004fe8
  ldr r2, =_sbss
 8002148:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800214c:	2000044c 	.word	0x2000044c

08002150 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002150:	e7fe      	b.n	8002150 <ADC1_COMP_IRQHandler>
	...

08002154 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002158:	4b07      	ldr	r3, [pc, #28]	@ (8002178 <HAL_Init+0x24>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_Init+0x24>)
 800215e:	2110      	movs	r1, #16
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002164:	2003      	movs	r0, #3
 8002166:	f000 f809 	bl	800217c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800216a:	f7ff fe97 	bl	8001e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	0018      	movs	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	46c0      	nop			@ (mov r8, r8)
 8002178:	40022000 	.word	0x40022000

0800217c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800217c:	b590      	push	{r4, r7, lr}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002184:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <HAL_InitTick+0x5c>)
 8002186:	681c      	ldr	r4, [r3, #0]
 8002188:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <HAL_InitTick+0x60>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	0019      	movs	r1, r3
 800218e:	23fa      	movs	r3, #250	@ 0xfa
 8002190:	0098      	lsls	r0, r3, #2
 8002192:	f7fd ffc9 	bl	8000128 <__udivsi3>
 8002196:	0003      	movs	r3, r0
 8002198:	0019      	movs	r1, r3
 800219a:	0020      	movs	r0, r4
 800219c:	f7fd ffc4 	bl	8000128 <__udivsi3>
 80021a0:	0003      	movs	r3, r0
 80021a2:	0018      	movs	r0, r3
 80021a4:	f000 f92f 	bl	8002406 <HAL_SYSTICK_Config>
 80021a8:	1e03      	subs	r3, r0, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e00f      	b.n	80021d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d80b      	bhi.n	80021ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	2301      	movs	r3, #1
 80021ba:	425b      	negs	r3, r3
 80021bc:	2200      	movs	r2, #0
 80021be:	0018      	movs	r0, r3
 80021c0:	f000 f8fc 	bl	80023bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_InitTick+0x64>)
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e000      	b.n	80021d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b003      	add	sp, #12
 80021d6:	bd90      	pop	{r4, r7, pc}
 80021d8:	20000000 	.word	0x20000000
 80021dc:	20000008 	.word	0x20000008
 80021e0:	20000004 	.word	0x20000004

080021e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_IncTick+0x1c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	001a      	movs	r2, r3
 80021ee:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <HAL_IncTick+0x20>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	18d2      	adds	r2, r2, r3
 80021f4:	4b03      	ldr	r3, [pc, #12]	@ (8002204 <HAL_IncTick+0x20>)
 80021f6:	601a      	str	r2, [r3, #0]
}
 80021f8:	46c0      	nop			@ (mov r8, r8)
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			@ (mov r8, r8)
 8002200:	20000008 	.word	0x20000008
 8002204:	20000300 	.word	0x20000300

08002208 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b02      	ldr	r3, [pc, #8]	@ (8002218 <HAL_GetTick+0x10>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	0018      	movs	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	20000300 	.word	0x20000300

0800221c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002224:	f7ff fff0 	bl	8002208 <HAL_GetTick>
 8002228:	0003      	movs	r3, r0
 800222a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3301      	adds	r3, #1
 8002234:	d005      	beq.n	8002242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002236:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <HAL_Delay+0x44>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	001a      	movs	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	189b      	adds	r3, r3, r2
 8002240:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	f7ff ffe0 	bl	8002208 <HAL_GetTick>
 8002248:	0002      	movs	r2, r0
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	429a      	cmp	r2, r3
 8002252:	d8f7      	bhi.n	8002244 <HAL_Delay+0x28>
  {
  }
}
 8002254:	46c0      	nop			@ (mov r8, r8)
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	46bd      	mov	sp, r7
 800225a:	b004      	add	sp, #16
 800225c:	bd80      	pop	{r7, pc}
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	20000008 	.word	0x20000008

08002264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	0002      	movs	r2, r0
 800226c:	1dfb      	adds	r3, r7, #7
 800226e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002270:	1dfb      	adds	r3, r7, #7
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b7f      	cmp	r3, #127	@ 0x7f
 8002276:	d809      	bhi.n	800228c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002278:	1dfb      	adds	r3, r7, #7
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	001a      	movs	r2, r3
 800227e:	231f      	movs	r3, #31
 8002280:	401a      	ands	r2, r3
 8002282:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <__NVIC_EnableIRQ+0x30>)
 8002284:	2101      	movs	r1, #1
 8002286:	4091      	lsls	r1, r2
 8002288:	000a      	movs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
  }
}
 800228c:	46c0      	nop			@ (mov r8, r8)
 800228e:	46bd      	mov	sp, r7
 8002290:	b002      	add	sp, #8
 8002292:	bd80      	pop	{r7, pc}
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	0002      	movs	r2, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022a6:	1dfb      	adds	r3, r7, #7
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80022ac:	d828      	bhi.n	8002300 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ae:	4a2f      	ldr	r2, [pc, #188]	@ (800236c <__NVIC_SetPriority+0xd4>)
 80022b0:	1dfb      	adds	r3, r7, #7
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	33c0      	adds	r3, #192	@ 0xc0
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	589b      	ldr	r3, [r3, r2]
 80022be:	1dfa      	adds	r2, r7, #7
 80022c0:	7812      	ldrb	r2, [r2, #0]
 80022c2:	0011      	movs	r1, r2
 80022c4:	2203      	movs	r2, #3
 80022c6:	400a      	ands	r2, r1
 80022c8:	00d2      	lsls	r2, r2, #3
 80022ca:	21ff      	movs	r1, #255	@ 0xff
 80022cc:	4091      	lsls	r1, r2
 80022ce:	000a      	movs	r2, r1
 80022d0:	43d2      	mvns	r2, r2
 80022d2:	401a      	ands	r2, r3
 80022d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	019b      	lsls	r3, r3, #6
 80022da:	22ff      	movs	r2, #255	@ 0xff
 80022dc:	401a      	ands	r2, r3
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	0018      	movs	r0, r3
 80022e4:	2303      	movs	r3, #3
 80022e6:	4003      	ands	r3, r0
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022ec:	481f      	ldr	r0, [pc, #124]	@ (800236c <__NVIC_SetPriority+0xd4>)
 80022ee:	1dfb      	adds	r3, r7, #7
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	089b      	lsrs	r3, r3, #2
 80022f6:	430a      	orrs	r2, r1
 80022f8:	33c0      	adds	r3, #192	@ 0xc0
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022fe:	e031      	b.n	8002364 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002300:	4a1b      	ldr	r2, [pc, #108]	@ (8002370 <__NVIC_SetPriority+0xd8>)
 8002302:	1dfb      	adds	r3, r7, #7
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	0019      	movs	r1, r3
 8002308:	230f      	movs	r3, #15
 800230a:	400b      	ands	r3, r1
 800230c:	3b08      	subs	r3, #8
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3306      	adds	r3, #6
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	18d3      	adds	r3, r2, r3
 8002316:	3304      	adds	r3, #4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	1dfa      	adds	r2, r7, #7
 800231c:	7812      	ldrb	r2, [r2, #0]
 800231e:	0011      	movs	r1, r2
 8002320:	2203      	movs	r2, #3
 8002322:	400a      	ands	r2, r1
 8002324:	00d2      	lsls	r2, r2, #3
 8002326:	21ff      	movs	r1, #255	@ 0xff
 8002328:	4091      	lsls	r1, r2
 800232a:	000a      	movs	r2, r1
 800232c:	43d2      	mvns	r2, r2
 800232e:	401a      	ands	r2, r3
 8002330:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	019b      	lsls	r3, r3, #6
 8002336:	22ff      	movs	r2, #255	@ 0xff
 8002338:	401a      	ands	r2, r3
 800233a:	1dfb      	adds	r3, r7, #7
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	0018      	movs	r0, r3
 8002340:	2303      	movs	r3, #3
 8002342:	4003      	ands	r3, r0
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002348:	4809      	ldr	r0, [pc, #36]	@ (8002370 <__NVIC_SetPriority+0xd8>)
 800234a:	1dfb      	adds	r3, r7, #7
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	001c      	movs	r4, r3
 8002350:	230f      	movs	r3, #15
 8002352:	4023      	ands	r3, r4
 8002354:	3b08      	subs	r3, #8
 8002356:	089b      	lsrs	r3, r3, #2
 8002358:	430a      	orrs	r2, r1
 800235a:	3306      	adds	r3, #6
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	18c3      	adds	r3, r0, r3
 8002360:	3304      	adds	r3, #4
 8002362:	601a      	str	r2, [r3, #0]
}
 8002364:	46c0      	nop			@ (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b003      	add	sp, #12
 800236a:	bd90      	pop	{r4, r7, pc}
 800236c:	e000e100 	.word	0xe000e100
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	1e5a      	subs	r2, r3, #1
 8002380:	2380      	movs	r3, #128	@ 0x80
 8002382:	045b      	lsls	r3, r3, #17
 8002384:	429a      	cmp	r2, r3
 8002386:	d301      	bcc.n	800238c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002388:	2301      	movs	r3, #1
 800238a:	e010      	b.n	80023ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800238c:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <SysTick_Config+0x44>)
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	3a01      	subs	r2, #1
 8002392:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002394:	2301      	movs	r3, #1
 8002396:	425b      	negs	r3, r3
 8002398:	2103      	movs	r1, #3
 800239a:	0018      	movs	r0, r3
 800239c:	f7ff ff7c 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <SysTick_Config+0x44>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023a6:	4b04      	ldr	r3, [pc, #16]	@ (80023b8 <SysTick_Config+0x44>)
 80023a8:	2207      	movs	r2, #7
 80023aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	0018      	movs	r0, r3
 80023b0:	46bd      	mov	sp, r7
 80023b2:	b002      	add	sp, #8
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	e000e010 	.word	0xe000e010

080023bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	210f      	movs	r1, #15
 80023c8:	187b      	adds	r3, r7, r1
 80023ca:	1c02      	adds	r2, r0, #0
 80023cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	187b      	adds	r3, r7, r1
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b25b      	sxtb	r3, r3
 80023d6:	0011      	movs	r1, r2
 80023d8:	0018      	movs	r0, r3
 80023da:	f7ff ff5d 	bl	8002298 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b004      	add	sp, #16
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	0002      	movs	r2, r0
 80023ee:	1dfb      	adds	r3, r7, #7
 80023f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f2:	1dfb      	adds	r3, r7, #7
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	b25b      	sxtb	r3, r3
 80023f8:	0018      	movs	r0, r3
 80023fa:	f7ff ff33 	bl	8002264 <__NVIC_EnableIRQ>
}
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	46bd      	mov	sp, r7
 8002402:	b002      	add	sp, #8
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	0018      	movs	r0, r3
 8002412:	f7ff ffaf 	bl	8002374 <SysTick_Config>
 8002416:	0003      	movs	r3, r0
}
 8002418:	0018      	movs	r0, r3
 800241a:	46bd      	mov	sp, r7
 800241c:	b002      	add	sp, #8
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2221      	movs	r2, #33	@ 0x21
 800242c:	5c9b      	ldrb	r3, [r3, r2]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d008      	beq.n	8002446 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2204      	movs	r2, #4
 8002438:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2220      	movs	r2, #32
 800243e:	2100      	movs	r1, #0
 8002440:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e020      	b.n	8002488 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	210e      	movs	r1, #14
 8002452:	438a      	bics	r2, r1
 8002454:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2101      	movs	r1, #1
 8002462:	438a      	bics	r2, r1
 8002464:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246e:	2101      	movs	r1, #1
 8002470:	4091      	lsls	r1, r2
 8002472:	000a      	movs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2221      	movs	r2, #33	@ 0x21
 800247a:	2101      	movs	r1, #1
 800247c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2220      	movs	r2, #32
 8002482:	2100      	movs	r1, #0
 8002484:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b002      	add	sp, #8
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002498:	210f      	movs	r1, #15
 800249a:	187b      	adds	r3, r7, r1
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2221      	movs	r2, #33	@ 0x21
 80024a4:	5c9b      	ldrb	r3, [r3, r2]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d006      	beq.n	80024ba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2204      	movs	r2, #4
 80024b0:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80024b2:	187b      	adds	r3, r7, r1
 80024b4:	2201      	movs	r2, #1
 80024b6:	701a      	strb	r2, [r3, #0]
 80024b8:	e028      	b.n	800250c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	210e      	movs	r1, #14
 80024c6:	438a      	bics	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2101      	movs	r1, #1
 80024d6:	438a      	bics	r2, r1
 80024d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e2:	2101      	movs	r1, #1
 80024e4:	4091      	lsls	r1, r2
 80024e6:	000a      	movs	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2221      	movs	r2, #33	@ 0x21
 80024ee:	2101      	movs	r1, #1
 80024f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2220      	movs	r2, #32
 80024f6:	2100      	movs	r1, #0
 80024f8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d004      	beq.n	800250c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	0010      	movs	r0, r2
 800250a:	4798      	blx	r3
    }
  }
  return status;
 800250c:	230f      	movs	r3, #15
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	781b      	ldrb	r3, [r3, #0]
}
 8002512:	0018      	movs	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	b004      	add	sp, #16
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800252a:	e155      	b.n	80027d8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2101      	movs	r1, #1
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4091      	lsls	r1, r2
 8002536:	000a      	movs	r2, r1
 8002538:	4013      	ands	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d100      	bne.n	8002544 <HAL_GPIO_Init+0x28>
 8002542:	e146      	b.n	80027d2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2203      	movs	r2, #3
 800254a:	4013      	ands	r3, r2
 800254c:	2b01      	cmp	r3, #1
 800254e:	d005      	beq.n	800255c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2203      	movs	r2, #3
 8002556:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002558:	2b02      	cmp	r3, #2
 800255a:	d130      	bne.n	80025be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	409a      	lsls	r2, r3
 800256a:	0013      	movs	r3, r2
 800256c:	43da      	mvns	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	409a      	lsls	r2, r3
 800257e:	0013      	movs	r3, r2
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002592:	2201      	movs	r2, #1
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	409a      	lsls	r2, r3
 8002598:	0013      	movs	r3, r2
 800259a:	43da      	mvns	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4013      	ands	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	2201      	movs	r2, #1
 80025aa:	401a      	ands	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	409a      	lsls	r2, r3
 80025b0:	0013      	movs	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	693a      	ldr	r2, [r7, #16]
 80025bc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2203      	movs	r2, #3
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d017      	beq.n	80025fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2203      	movs	r2, #3
 80025d6:	409a      	lsls	r2, r3
 80025d8:	0013      	movs	r3, r2
 80025da:	43da      	mvns	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	409a      	lsls	r2, r3
 80025ec:	0013      	movs	r3, r2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2203      	movs	r2, #3
 8002600:	4013      	ands	r3, r2
 8002602:	2b02      	cmp	r3, #2
 8002604:	d123      	bne.n	800264e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	08da      	lsrs	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3208      	adds	r2, #8
 800260e:	0092      	lsls	r2, r2, #2
 8002610:	58d3      	ldr	r3, [r2, r3]
 8002612:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2207      	movs	r2, #7
 8002618:	4013      	ands	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	220f      	movs	r2, #15
 800261e:	409a      	lsls	r2, r3
 8002620:	0013      	movs	r3, r2
 8002622:	43da      	mvns	r2, r3
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2107      	movs	r1, #7
 8002632:	400b      	ands	r3, r1
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	409a      	lsls	r2, r3
 8002638:	0013      	movs	r3, r2
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	08da      	lsrs	r2, r3, #3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3208      	adds	r2, #8
 8002648:	0092      	lsls	r2, r2, #2
 800264a:	6939      	ldr	r1, [r7, #16]
 800264c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	2203      	movs	r2, #3
 800265a:	409a      	lsls	r2, r3
 800265c:	0013      	movs	r3, r2
 800265e:	43da      	mvns	r2, r3
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4013      	ands	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2203      	movs	r2, #3
 800266c:	401a      	ands	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	409a      	lsls	r2, r3
 8002674:	0013      	movs	r3, r2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	23c0      	movs	r3, #192	@ 0xc0
 8002688:	029b      	lsls	r3, r3, #10
 800268a:	4013      	ands	r3, r2
 800268c:	d100      	bne.n	8002690 <HAL_GPIO_Init+0x174>
 800268e:	e0a0      	b.n	80027d2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002690:	4b57      	ldr	r3, [pc, #348]	@ (80027f0 <HAL_GPIO_Init+0x2d4>)
 8002692:	699a      	ldr	r2, [r3, #24]
 8002694:	4b56      	ldr	r3, [pc, #344]	@ (80027f0 <HAL_GPIO_Init+0x2d4>)
 8002696:	2101      	movs	r1, #1
 8002698:	430a      	orrs	r2, r1
 800269a:	619a      	str	r2, [r3, #24]
 800269c:	4b54      	ldr	r3, [pc, #336]	@ (80027f0 <HAL_GPIO_Init+0x2d4>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	2201      	movs	r2, #1
 80026a2:	4013      	ands	r3, r2
 80026a4:	60bb      	str	r3, [r7, #8]
 80026a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026a8:	4a52      	ldr	r2, [pc, #328]	@ (80027f4 <HAL_GPIO_Init+0x2d8>)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	3302      	adds	r3, #2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	589b      	ldr	r3, [r3, r2]
 80026b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2203      	movs	r2, #3
 80026ba:	4013      	ands	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	220f      	movs	r2, #15
 80026c0:	409a      	lsls	r2, r3
 80026c2:	0013      	movs	r3, r2
 80026c4:	43da      	mvns	r2, r3
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	2390      	movs	r3, #144	@ 0x90
 80026d0:	05db      	lsls	r3, r3, #23
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d019      	beq.n	800270a <HAL_GPIO_Init+0x1ee>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a47      	ldr	r2, [pc, #284]	@ (80027f8 <HAL_GPIO_Init+0x2dc>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d013      	beq.n	8002706 <HAL_GPIO_Init+0x1ea>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a46      	ldr	r2, [pc, #280]	@ (80027fc <HAL_GPIO_Init+0x2e0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00d      	beq.n	8002702 <HAL_GPIO_Init+0x1e6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a45      	ldr	r2, [pc, #276]	@ (8002800 <HAL_GPIO_Init+0x2e4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d007      	beq.n	80026fe <HAL_GPIO_Init+0x1e2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a44      	ldr	r2, [pc, #272]	@ (8002804 <HAL_GPIO_Init+0x2e8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_GPIO_Init+0x1de>
 80026f6:	2304      	movs	r3, #4
 80026f8:	e008      	b.n	800270c <HAL_GPIO_Init+0x1f0>
 80026fa:	2305      	movs	r3, #5
 80026fc:	e006      	b.n	800270c <HAL_GPIO_Init+0x1f0>
 80026fe:	2303      	movs	r3, #3
 8002700:	e004      	b.n	800270c <HAL_GPIO_Init+0x1f0>
 8002702:	2302      	movs	r3, #2
 8002704:	e002      	b.n	800270c <HAL_GPIO_Init+0x1f0>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <HAL_GPIO_Init+0x1f0>
 800270a:	2300      	movs	r3, #0
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	2103      	movs	r1, #3
 8002710:	400a      	ands	r2, r1
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	4093      	lsls	r3, r2
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800271c:	4935      	ldr	r1, [pc, #212]	@ (80027f4 <HAL_GPIO_Init+0x2d8>)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	3302      	adds	r3, #2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272a:	4b37      	ldr	r3, [pc, #220]	@ (8002808 <HAL_GPIO_Init+0x2ec>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	43da      	mvns	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	4013      	ands	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	2380      	movs	r3, #128	@ 0x80
 8002740:	035b      	lsls	r3, r3, #13
 8002742:	4013      	ands	r3, r2
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800274e:	4b2e      	ldr	r3, [pc, #184]	@ (8002808 <HAL_GPIO_Init+0x2ec>)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002754:	4b2c      	ldr	r3, [pc, #176]	@ (8002808 <HAL_GPIO_Init+0x2ec>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	43da      	mvns	r2, r3
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	2380      	movs	r3, #128	@ 0x80
 800276a:	039b      	lsls	r3, r3, #14
 800276c:	4013      	ands	r3, r2
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002778:	4b23      	ldr	r3, [pc, #140]	@ (8002808 <HAL_GPIO_Init+0x2ec>)
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800277e:	4b22      	ldr	r3, [pc, #136]	@ (8002808 <HAL_GPIO_Init+0x2ec>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	43da      	mvns	r2, r3
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685a      	ldr	r2, [r3, #4]
 8002792:	2380      	movs	r3, #128	@ 0x80
 8002794:	029b      	lsls	r3, r3, #10
 8002796:	4013      	ands	r3, r2
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027a2:	4b19      	ldr	r3, [pc, #100]	@ (8002808 <HAL_GPIO_Init+0x2ec>)
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80027a8:	4b17      	ldr	r3, [pc, #92]	@ (8002808 <HAL_GPIO_Init+0x2ec>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	43da      	mvns	r2, r3
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	2380      	movs	r3, #128	@ 0x80
 80027be:	025b      	lsls	r3, r3, #9
 80027c0:	4013      	ands	r3, r2
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002808 <HAL_GPIO_Init+0x2ec>)
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3301      	adds	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	40da      	lsrs	r2, r3
 80027e0:	1e13      	subs	r3, r2, #0
 80027e2:	d000      	beq.n	80027e6 <HAL_GPIO_Init+0x2ca>
 80027e4:	e6a2      	b.n	800252c <HAL_GPIO_Init+0x10>
  } 
}
 80027e6:	46c0      	nop			@ (mov r8, r8)
 80027e8:	46c0      	nop			@ (mov r8, r8)
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b006      	add	sp, #24
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000
 80027f4:	40010000 	.word	0x40010000
 80027f8:	48000400 	.word	0x48000400
 80027fc:	48000800 	.word	0x48000800
 8002800:	48000c00 	.word	0x48000c00
 8002804:	48001000 	.word	0x48001000
 8002808:	40010400 	.word	0x40010400

0800280c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	0008      	movs	r0, r1
 8002816:	0011      	movs	r1, r2
 8002818:	1cbb      	adds	r3, r7, #2
 800281a:	1c02      	adds	r2, r0, #0
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	1c7b      	adds	r3, r7, #1
 8002820:	1c0a      	adds	r2, r1, #0
 8002822:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002824:	1c7b      	adds	r3, r7, #1
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800282c:	1cbb      	adds	r3, r7, #2
 800282e:	881a      	ldrh	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002834:	e003      	b.n	800283e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002836:	1cbb      	adds	r3, r7, #2
 8002838:	881a      	ldrh	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800283e:	46c0      	nop			@ (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	b002      	add	sp, #8
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	f000 fb76 	bl	8002f48 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2201      	movs	r2, #1
 8002862:	4013      	ands	r3, r2
 8002864:	d100      	bne.n	8002868 <HAL_RCC_OscConfig+0x20>
 8002866:	e08e      	b.n	8002986 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002868:	4bc5      	ldr	r3, [pc, #788]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	220c      	movs	r2, #12
 800286e:	4013      	ands	r3, r2
 8002870:	2b04      	cmp	r3, #4
 8002872:	d00e      	beq.n	8002892 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002874:	4bc2      	ldr	r3, [pc, #776]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	220c      	movs	r2, #12
 800287a:	4013      	ands	r3, r2
 800287c:	2b08      	cmp	r3, #8
 800287e:	d117      	bne.n	80028b0 <HAL_RCC_OscConfig+0x68>
 8002880:	4bbf      	ldr	r3, [pc, #764]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	23c0      	movs	r3, #192	@ 0xc0
 8002886:	025b      	lsls	r3, r3, #9
 8002888:	401a      	ands	r2, r3
 800288a:	2380      	movs	r3, #128	@ 0x80
 800288c:	025b      	lsls	r3, r3, #9
 800288e:	429a      	cmp	r2, r3
 8002890:	d10e      	bne.n	80028b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002892:	4bbb      	ldr	r3, [pc, #748]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	2380      	movs	r3, #128	@ 0x80
 8002898:	029b      	lsls	r3, r3, #10
 800289a:	4013      	ands	r3, r2
 800289c:	d100      	bne.n	80028a0 <HAL_RCC_OscConfig+0x58>
 800289e:	e071      	b.n	8002984 <HAL_RCC_OscConfig+0x13c>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d000      	beq.n	80028aa <HAL_RCC_OscConfig+0x62>
 80028a8:	e06c      	b.n	8002984 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f000 fb4c 	bl	8002f48 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d107      	bne.n	80028c8 <HAL_RCC_OscConfig+0x80>
 80028b8:	4bb1      	ldr	r3, [pc, #708]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4bb0      	ldr	r3, [pc, #704]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 80028be:	2180      	movs	r1, #128	@ 0x80
 80028c0:	0249      	lsls	r1, r1, #9
 80028c2:	430a      	orrs	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e02f      	b.n	8002928 <HAL_RCC_OscConfig+0xe0>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10c      	bne.n	80028ea <HAL_RCC_OscConfig+0xa2>
 80028d0:	4bab      	ldr	r3, [pc, #684]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4baa      	ldr	r3, [pc, #680]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 80028d6:	49ab      	ldr	r1, [pc, #684]	@ (8002b84 <HAL_RCC_OscConfig+0x33c>)
 80028d8:	400a      	ands	r2, r1
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	4ba8      	ldr	r3, [pc, #672]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4ba7      	ldr	r3, [pc, #668]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 80028e2:	49a9      	ldr	r1, [pc, #676]	@ (8002b88 <HAL_RCC_OscConfig+0x340>)
 80028e4:	400a      	ands	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e01e      	b.n	8002928 <HAL_RCC_OscConfig+0xe0>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b05      	cmp	r3, #5
 80028f0:	d10e      	bne.n	8002910 <HAL_RCC_OscConfig+0xc8>
 80028f2:	4ba3      	ldr	r3, [pc, #652]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4ba2      	ldr	r3, [pc, #648]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 80028f8:	2180      	movs	r1, #128	@ 0x80
 80028fa:	02c9      	lsls	r1, r1, #11
 80028fc:	430a      	orrs	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	4b9f      	ldr	r3, [pc, #636]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b9e      	ldr	r3, [pc, #632]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002906:	2180      	movs	r1, #128	@ 0x80
 8002908:	0249      	lsls	r1, r1, #9
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0xe0>
 8002910:	4b9b      	ldr	r3, [pc, #620]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b9a      	ldr	r3, [pc, #616]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002916:	499b      	ldr	r1, [pc, #620]	@ (8002b84 <HAL_RCC_OscConfig+0x33c>)
 8002918:	400a      	ands	r2, r1
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	4b98      	ldr	r3, [pc, #608]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b97      	ldr	r3, [pc, #604]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002922:	4999      	ldr	r1, [pc, #612]	@ (8002b88 <HAL_RCC_OscConfig+0x340>)
 8002924:	400a      	ands	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d014      	beq.n	800295a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7ff fc6a 	bl	8002208 <HAL_GetTick>
 8002934:	0003      	movs	r3, r0
 8002936:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293a:	f7ff fc65 	bl	8002208 <HAL_GetTick>
 800293e:	0002      	movs	r2, r0
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b64      	cmp	r3, #100	@ 0x64
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e2fd      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294c:	4b8c      	ldr	r3, [pc, #560]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	029b      	lsls	r3, r3, #10
 8002954:	4013      	ands	r3, r2
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0xf2>
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7ff fc55 	bl	8002208 <HAL_GetTick>
 800295e:	0003      	movs	r3, r0
 8002960:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002964:	f7ff fc50 	bl	8002208 <HAL_GetTick>
 8002968:	0002      	movs	r2, r0
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	@ 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e2e8      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002976:	4b82      	ldr	r3, [pc, #520]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	@ 0x80
 800297c:	029b      	lsls	r3, r3, #10
 800297e:	4013      	ands	r3, r2
 8002980:	d1f0      	bne.n	8002964 <HAL_RCC_OscConfig+0x11c>
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002984:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2202      	movs	r2, #2
 800298c:	4013      	ands	r3, r2
 800298e:	d100      	bne.n	8002992 <HAL_RCC_OscConfig+0x14a>
 8002990:	e06c      	b.n	8002a6c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002992:	4b7b      	ldr	r3, [pc, #492]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	220c      	movs	r2, #12
 8002998:	4013      	ands	r3, r2
 800299a:	d00e      	beq.n	80029ba <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800299c:	4b78      	ldr	r3, [pc, #480]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	220c      	movs	r2, #12
 80029a2:	4013      	ands	r3, r2
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d11f      	bne.n	80029e8 <HAL_RCC_OscConfig+0x1a0>
 80029a8:	4b75      	ldr	r3, [pc, #468]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	23c0      	movs	r3, #192	@ 0xc0
 80029ae:	025b      	lsls	r3, r3, #9
 80029b0:	401a      	ands	r2, r3
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d116      	bne.n	80029e8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	4b71      	ldr	r3, [pc, #452]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2202      	movs	r2, #2
 80029c0:	4013      	ands	r3, r2
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_OscConfig+0x188>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e2bb      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	22f8      	movs	r2, #248	@ 0xf8
 80029d6:	4393      	bics	r3, r2
 80029d8:	0019      	movs	r1, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00da      	lsls	r2, r3, #3
 80029e0:	4b67      	ldr	r3, [pc, #412]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 80029e2:	430a      	orrs	r2, r1
 80029e4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e6:	e041      	b.n	8002a6c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d024      	beq.n	8002a3a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f0:	4b63      	ldr	r3, [pc, #396]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4b62      	ldr	r3, [pc, #392]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 80029f6:	2101      	movs	r1, #1
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7ff fc04 	bl	8002208 <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a06:	f7ff fbff 	bl	8002208 <HAL_GetTick>
 8002a0a:	0002      	movs	r2, r0
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e297      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a18:	4b59      	ldr	r3, [pc, #356]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d0f1      	beq.n	8002a06 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a22:	4b57      	ldr	r3, [pc, #348]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	22f8      	movs	r2, #248	@ 0xf8
 8002a28:	4393      	bics	r3, r2
 8002a2a:	0019      	movs	r1, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	00da      	lsls	r2, r3, #3
 8002a32:	4b53      	ldr	r3, [pc, #332]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002a34:	430a      	orrs	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	e018      	b.n	8002a6c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3a:	4b51      	ldr	r3, [pc, #324]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	4b50      	ldr	r3, [pc, #320]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002a40:	2101      	movs	r1, #1
 8002a42:	438a      	bics	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a46:	f7ff fbdf 	bl	8002208 <HAL_GetTick>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a50:	f7ff fbda 	bl	8002208 <HAL_GetTick>
 8002a54:	0002      	movs	r2, r0
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e272      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a62:	4b47      	ldr	r3, [pc, #284]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2202      	movs	r2, #2
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d1f1      	bne.n	8002a50 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2208      	movs	r2, #8
 8002a72:	4013      	ands	r3, r2
 8002a74:	d036      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d019      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7e:	4b40      	ldr	r3, [pc, #256]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002a80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a82:	4b3f      	ldr	r3, [pc, #252]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002a84:	2101      	movs	r1, #1
 8002a86:	430a      	orrs	r2, r1
 8002a88:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8a:	f7ff fbbd 	bl	8002208 <HAL_GetTick>
 8002a8e:	0003      	movs	r3, r0
 8002a90:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a94:	f7ff fbb8 	bl	8002208 <HAL_GetTick>
 8002a98:	0002      	movs	r2, r0
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e250      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	4b36      	ldr	r3, [pc, #216]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aaa:	2202      	movs	r2, #2
 8002aac:	4013      	ands	r3, r2
 8002aae:	d0f1      	beq.n	8002a94 <HAL_RCC_OscConfig+0x24c>
 8002ab0:	e018      	b.n	8002ae4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab2:	4b33      	ldr	r3, [pc, #204]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002ab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ab6:	4b32      	ldr	r3, [pc, #200]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002ab8:	2101      	movs	r1, #1
 8002aba:	438a      	bics	r2, r1
 8002abc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7ff fba3 	bl	8002208 <HAL_GetTick>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac8:	f7ff fb9e 	bl	8002208 <HAL_GetTick>
 8002acc:	0002      	movs	r2, r0
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e236      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ada:	4b29      	ldr	r3, [pc, #164]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	2202      	movs	r2, #2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	d1f1      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2204      	movs	r2, #4
 8002aea:	4013      	ands	r3, r2
 8002aec:	d100      	bne.n	8002af0 <HAL_RCC_OscConfig+0x2a8>
 8002aee:	e0b5      	b.n	8002c5c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002af0:	201f      	movs	r0, #31
 8002af2:	183b      	adds	r3, r7, r0
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af8:	4b21      	ldr	r3, [pc, #132]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002afa:	69da      	ldr	r2, [r3, #28]
 8002afc:	2380      	movs	r3, #128	@ 0x80
 8002afe:	055b      	lsls	r3, r3, #21
 8002b00:	4013      	ands	r3, r2
 8002b02:	d110      	bne.n	8002b26 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b04:	4b1e      	ldr	r3, [pc, #120]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002b06:	69da      	ldr	r2, [r3, #28]
 8002b08:	4b1d      	ldr	r3, [pc, #116]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002b0a:	2180      	movs	r1, #128	@ 0x80
 8002b0c:	0549      	lsls	r1, r1, #21
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	61da      	str	r2, [r3, #28]
 8002b12:	4b1b      	ldr	r3, [pc, #108]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	2380      	movs	r3, #128	@ 0x80
 8002b18:	055b      	lsls	r3, r3, #21
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b20:	183b      	adds	r3, r7, r0
 8002b22:	2201      	movs	r2, #1
 8002b24:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b26:	4b19      	ldr	r3, [pc, #100]	@ (8002b8c <HAL_RCC_OscConfig+0x344>)
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	2380      	movs	r3, #128	@ 0x80
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d11a      	bne.n	8002b68 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b32:	4b16      	ldr	r3, [pc, #88]	@ (8002b8c <HAL_RCC_OscConfig+0x344>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b15      	ldr	r3, [pc, #84]	@ (8002b8c <HAL_RCC_OscConfig+0x344>)
 8002b38:	2180      	movs	r1, #128	@ 0x80
 8002b3a:	0049      	lsls	r1, r1, #1
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b40:	f7ff fb62 	bl	8002208 <HAL_GetTick>
 8002b44:	0003      	movs	r3, r0
 8002b46:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4a:	f7ff fb5d 	bl	8002208 <HAL_GetTick>
 8002b4e:	0002      	movs	r2, r0
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b64      	cmp	r3, #100	@ 0x64
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1f5      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b8c <HAL_RCC_OscConfig+0x344>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	2380      	movs	r3, #128	@ 0x80
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4013      	ands	r3, r2
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d10f      	bne.n	8002b90 <HAL_RCC_OscConfig+0x348>
 8002b70:	4b03      	ldr	r3, [pc, #12]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002b72:	6a1a      	ldr	r2, [r3, #32]
 8002b74:	4b02      	ldr	r3, [pc, #8]	@ (8002b80 <HAL_RCC_OscConfig+0x338>)
 8002b76:	2101      	movs	r1, #1
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	621a      	str	r2, [r3, #32]
 8002b7c:	e036      	b.n	8002bec <HAL_RCC_OscConfig+0x3a4>
 8002b7e:	46c0      	nop			@ (mov r8, r8)
 8002b80:	40021000 	.word	0x40021000
 8002b84:	fffeffff 	.word	0xfffeffff
 8002b88:	fffbffff 	.word	0xfffbffff
 8002b8c:	40007000 	.word	0x40007000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10c      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x36a>
 8002b98:	4bca      	ldr	r3, [pc, #808]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002b9a:	6a1a      	ldr	r2, [r3, #32]
 8002b9c:	4bc9      	ldr	r3, [pc, #804]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	438a      	bics	r2, r1
 8002ba2:	621a      	str	r2, [r3, #32]
 8002ba4:	4bc7      	ldr	r3, [pc, #796]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	4bc6      	ldr	r3, [pc, #792]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002baa:	2104      	movs	r1, #4
 8002bac:	438a      	bics	r2, r1
 8002bae:	621a      	str	r2, [r3, #32]
 8002bb0:	e01c      	b.n	8002bec <HAL_RCC_OscConfig+0x3a4>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x38c>
 8002bba:	4bc2      	ldr	r3, [pc, #776]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002bbc:	6a1a      	ldr	r2, [r3, #32]
 8002bbe:	4bc1      	ldr	r3, [pc, #772]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002bc0:	2104      	movs	r1, #4
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	621a      	str	r2, [r3, #32]
 8002bc6:	4bbf      	ldr	r3, [pc, #764]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002bc8:	6a1a      	ldr	r2, [r3, #32]
 8002bca:	4bbe      	ldr	r3, [pc, #760]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002bcc:	2101      	movs	r1, #1
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	621a      	str	r2, [r3, #32]
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0x3a4>
 8002bd4:	4bbb      	ldr	r3, [pc, #748]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002bd6:	6a1a      	ldr	r2, [r3, #32]
 8002bd8:	4bba      	ldr	r3, [pc, #744]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002bda:	2101      	movs	r1, #1
 8002bdc:	438a      	bics	r2, r1
 8002bde:	621a      	str	r2, [r3, #32]
 8002be0:	4bb8      	ldr	r3, [pc, #736]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002be2:	6a1a      	ldr	r2, [r3, #32]
 8002be4:	4bb7      	ldr	r3, [pc, #732]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002be6:	2104      	movs	r1, #4
 8002be8:	438a      	bics	r2, r1
 8002bea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d014      	beq.n	8002c1e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf4:	f7ff fb08 	bl	8002208 <HAL_GetTick>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfc:	e009      	b.n	8002c12 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7ff fb03 	bl	8002208 <HAL_GetTick>
 8002c02:	0002      	movs	r2, r0
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	4aaf      	ldr	r2, [pc, #700]	@ (8002ec8 <HAL_RCC_OscConfig+0x680>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e19a      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c12:	4bac      	ldr	r3, [pc, #688]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	2202      	movs	r2, #2
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d0f0      	beq.n	8002bfe <HAL_RCC_OscConfig+0x3b6>
 8002c1c:	e013      	b.n	8002c46 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1e:	f7ff faf3 	bl	8002208 <HAL_GetTick>
 8002c22:	0003      	movs	r3, r0
 8002c24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c26:	e009      	b.n	8002c3c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c28:	f7ff faee 	bl	8002208 <HAL_GetTick>
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	4aa5      	ldr	r2, [pc, #660]	@ (8002ec8 <HAL_RCC_OscConfig+0x680>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e185      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3c:	4ba1      	ldr	r3, [pc, #644]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	2202      	movs	r2, #2
 8002c42:	4013      	ands	r3, r2
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c46:	231f      	movs	r3, #31
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c50:	4b9c      	ldr	r3, [pc, #624]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002c52:	69da      	ldr	r2, [r3, #28]
 8002c54:	4b9b      	ldr	r3, [pc, #620]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002c56:	499d      	ldr	r1, [pc, #628]	@ (8002ecc <HAL_RCC_OscConfig+0x684>)
 8002c58:	400a      	ands	r2, r1
 8002c5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2210      	movs	r2, #16
 8002c62:	4013      	ands	r3, r2
 8002c64:	d063      	beq.n	8002d2e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d12a      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c6e:	4b95      	ldr	r3, [pc, #596]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002c70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c72:	4b94      	ldr	r3, [pc, #592]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002c74:	2104      	movs	r1, #4
 8002c76:	430a      	orrs	r2, r1
 8002c78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c7a:	4b92      	ldr	r3, [pc, #584]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c7e:	4b91      	ldr	r3, [pc, #580]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002c80:	2101      	movs	r1, #1
 8002c82:	430a      	orrs	r2, r1
 8002c84:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c86:	f7ff fabf 	bl	8002208 <HAL_GetTick>
 8002c8a:	0003      	movs	r3, r0
 8002c8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c90:	f7ff faba 	bl	8002208 <HAL_GetTick>
 8002c94:	0002      	movs	r2, r0
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e152      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ca2:	4b88      	ldr	r3, [pc, #544]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d0f1      	beq.n	8002c90 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002cac:	4b85      	ldr	r3, [pc, #532]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb0:	22f8      	movs	r2, #248	@ 0xf8
 8002cb2:	4393      	bics	r3, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	00da      	lsls	r2, r3, #3
 8002cbc:	4b81      	ldr	r3, [pc, #516]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cc2:	e034      	b.n	8002d2e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	3305      	adds	r3, #5
 8002cca:	d111      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ccc:	4b7d      	ldr	r3, [pc, #500]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cd0:	4b7c      	ldr	r3, [pc, #496]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	438a      	bics	r2, r1
 8002cd6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002cd8:	4b7a      	ldr	r3, [pc, #488]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cdc:	22f8      	movs	r2, #248	@ 0xf8
 8002cde:	4393      	bics	r3, r2
 8002ce0:	0019      	movs	r1, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	00da      	lsls	r2, r3, #3
 8002ce8:	4b76      	ldr	r3, [pc, #472]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cee:	e01e      	b.n	8002d2e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cf0:	4b74      	ldr	r3, [pc, #464]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cf4:	4b73      	ldr	r3, [pc, #460]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002cf6:	2104      	movs	r1, #4
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002cfc:	4b71      	ldr	r3, [pc, #452]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002cfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d00:	4b70      	ldr	r3, [pc, #448]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002d02:	2101      	movs	r1, #1
 8002d04:	438a      	bics	r2, r1
 8002d06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d08:	f7ff fa7e 	bl	8002208 <HAL_GetTick>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d12:	f7ff fa79 	bl	8002208 <HAL_GetTick>
 8002d16:	0002      	movs	r2, r0
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e111      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d24:	4b67      	ldr	r3, [pc, #412]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d28:	2202      	movs	r2, #2
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d1f1      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2220      	movs	r2, #32
 8002d34:	4013      	ands	r3, r2
 8002d36:	d05c      	beq.n	8002df2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d38:	4b62      	ldr	r3, [pc, #392]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	220c      	movs	r2, #12
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b0c      	cmp	r3, #12
 8002d42:	d00e      	beq.n	8002d62 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d44:	4b5f      	ldr	r3, [pc, #380]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	220c      	movs	r2, #12
 8002d4a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d114      	bne.n	8002d7a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d50:	4b5c      	ldr	r3, [pc, #368]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	23c0      	movs	r3, #192	@ 0xc0
 8002d56:	025b      	lsls	r3, r3, #9
 8002d58:	401a      	ands	r2, r3
 8002d5a:	23c0      	movs	r3, #192	@ 0xc0
 8002d5c:	025b      	lsls	r3, r3, #9
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d10b      	bne.n	8002d7a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d62:	4b58      	ldr	r3, [pc, #352]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002d64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d66:	2380      	movs	r3, #128	@ 0x80
 8002d68:	029b      	lsls	r3, r3, #10
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d040      	beq.n	8002df0 <HAL_RCC_OscConfig+0x5a8>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d03c      	beq.n	8002df0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e0e6      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01b      	beq.n	8002dba <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d82:	4b50      	ldr	r3, [pc, #320]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002d84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d86:	4b4f      	ldr	r3, [pc, #316]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002d88:	2180      	movs	r1, #128	@ 0x80
 8002d8a:	0249      	lsls	r1, r1, #9
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7ff fa3a 	bl	8002208 <HAL_GetTick>
 8002d94:	0003      	movs	r3, r0
 8002d96:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d9a:	f7ff fa35 	bl	8002208 <HAL_GetTick>
 8002d9e:	0002      	movs	r2, r0
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e0cd      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002dac:	4b45      	ldr	r3, [pc, #276]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002db0:	2380      	movs	r3, #128	@ 0x80
 8002db2:	029b      	lsls	r3, r3, #10
 8002db4:	4013      	ands	r3, r2
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCC_OscConfig+0x552>
 8002db8:	e01b      	b.n	8002df2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002dba:	4b42      	ldr	r3, [pc, #264]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dbe:	4b41      	ldr	r3, [pc, #260]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002dc0:	4943      	ldr	r1, [pc, #268]	@ (8002ed0 <HAL_RCC_OscConfig+0x688>)
 8002dc2:	400a      	ands	r2, r1
 8002dc4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7ff fa1f 	bl	8002208 <HAL_GetTick>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dd0:	f7ff fa1a 	bl	8002208 <HAL_GetTick>
 8002dd4:	0002      	movs	r2, r0
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e0b2      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002de2:	4b38      	ldr	r3, [pc, #224]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002de4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002de6:	2380      	movs	r3, #128	@ 0x80
 8002de8:	029b      	lsls	r3, r3, #10
 8002dea:	4013      	ands	r3, r2
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x588>
 8002dee:	e000      	b.n	8002df2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002df0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d100      	bne.n	8002dfc <HAL_RCC_OscConfig+0x5b4>
 8002dfa:	e0a4      	b.n	8002f46 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dfc:	4b31      	ldr	r3, [pc, #196]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	220c      	movs	r2, #12
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d100      	bne.n	8002e0a <HAL_RCC_OscConfig+0x5c2>
 8002e08:	e078      	b.n	8002efc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d14c      	bne.n	8002eac <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e12:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002e18:	492e      	ldr	r1, [pc, #184]	@ (8002ed4 <HAL_RCC_OscConfig+0x68c>)
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1e:	f7ff f9f3 	bl	8002208 <HAL_GetTick>
 8002e22:	0003      	movs	r3, r0
 8002e24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e28:	f7ff f9ee 	bl	8002208 <HAL_GetTick>
 8002e2c:	0002      	movs	r2, r0
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e086      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3a:	4b22      	ldr	r3, [pc, #136]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	049b      	lsls	r3, r3, #18
 8002e42:	4013      	ands	r3, r2
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e46:	4b1f      	ldr	r3, [pc, #124]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e4a:	220f      	movs	r2, #15
 8002e4c:	4393      	bics	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002e56:	430a      	orrs	r2, r1
 8002e58:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002e5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed8 <HAL_RCC_OscConfig+0x690>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	4b15      	ldr	r3, [pc, #84]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002e70:	430a      	orrs	r2, r1
 8002e72:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e74:	4b13      	ldr	r3, [pc, #76]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	4b12      	ldr	r3, [pc, #72]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002e7a:	2180      	movs	r1, #128	@ 0x80
 8002e7c:	0449      	lsls	r1, r1, #17
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e82:	f7ff f9c1 	bl	8002208 <HAL_GetTick>
 8002e86:	0003      	movs	r3, r0
 8002e88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8c:	f7ff f9bc 	bl	8002208 <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e054      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e9e:	4b09      	ldr	r3, [pc, #36]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	2380      	movs	r3, #128	@ 0x80
 8002ea4:	049b      	lsls	r3, r3, #18
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x644>
 8002eaa:	e04c      	b.n	8002f46 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eac:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <HAL_RCC_OscConfig+0x67c>)
 8002eb2:	4908      	ldr	r1, [pc, #32]	@ (8002ed4 <HAL_RCC_OscConfig+0x68c>)
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7ff f9a6 	bl	8002208 <HAL_GetTick>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec0:	e015      	b.n	8002eee <HAL_RCC_OscConfig+0x6a6>
 8002ec2:	46c0      	nop			@ (mov r8, r8)
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	00001388 	.word	0x00001388
 8002ecc:	efffffff 	.word	0xefffffff
 8002ed0:	fffeffff 	.word	0xfffeffff
 8002ed4:	feffffff 	.word	0xfeffffff
 8002ed8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002edc:	f7ff f994 	bl	8002208 <HAL_GetTick>
 8002ee0:	0002      	movs	r2, r0
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e02c      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eee:	4b18      	ldr	r3, [pc, #96]	@ (8002f50 <HAL_RCC_OscConfig+0x708>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	2380      	movs	r3, #128	@ 0x80
 8002ef4:	049b      	lsls	r3, r3, #18
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x694>
 8002efa:	e024      	b.n	8002f46 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e01f      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002f08:	4b11      	ldr	r3, [pc, #68]	@ (8002f50 <HAL_RCC_OscConfig+0x708>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_RCC_OscConfig+0x708>)
 8002f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f12:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	23c0      	movs	r3, #192	@ 0xc0
 8002f18:	025b      	lsls	r3, r3, #9
 8002f1a:	401a      	ands	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d10e      	bne.n	8002f42 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	220f      	movs	r2, #15
 8002f28:	401a      	ands	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d107      	bne.n	8002f42 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	23f0      	movs	r3, #240	@ 0xf0
 8002f36:	039b      	lsls	r3, r3, #14
 8002f38:	401a      	ands	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b008      	add	sp, #32
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000

08002f54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0bf      	b.n	80030e8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b61      	ldr	r3, [pc, #388]	@ (80030f0 <HAL_RCC_ClockConfig+0x19c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4013      	ands	r3, r2
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d911      	bls.n	8002f9a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b5e      	ldr	r3, [pc, #376]	@ (80030f0 <HAL_RCC_ClockConfig+0x19c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	4b5b      	ldr	r3, [pc, #364]	@ (80030f0 <HAL_RCC_ClockConfig+0x19c>)
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f88:	4b59      	ldr	r3, [pc, #356]	@ (80030f0 <HAL_RCC_ClockConfig+0x19c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	4013      	ands	r3, r2
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e0a6      	b.n	80030e8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d015      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2204      	movs	r2, #4
 8002faa:	4013      	ands	r3, r2
 8002fac:	d006      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002fae:	4b51      	ldr	r3, [pc, #324]	@ (80030f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	4b50      	ldr	r3, [pc, #320]	@ (80030f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002fb4:	21e0      	movs	r1, #224	@ 0xe0
 8002fb6:	00c9      	lsls	r1, r1, #3
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fbc:	4b4d      	ldr	r3, [pc, #308]	@ (80030f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	22f0      	movs	r2, #240	@ 0xf0
 8002fc2:	4393      	bics	r3, r2
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	4b4a      	ldr	r3, [pc, #296]	@ (80030f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d04c      	beq.n	8003074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	4b44      	ldr	r3, [pc, #272]	@ (80030f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	2380      	movs	r3, #128	@ 0x80
 8002fe8:	029b      	lsls	r3, r3, #10
 8002fea:	4013      	ands	r3, r2
 8002fec:	d120      	bne.n	8003030 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e07a      	b.n	80030e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80030f4 <HAL_RCC_ClockConfig+0x1a0>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	049b      	lsls	r3, r3, #18
 8003002:	4013      	ands	r3, r2
 8003004:	d114      	bne.n	8003030 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e06e      	b.n	80030e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b03      	cmp	r3, #3
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003012:	4b38      	ldr	r3, [pc, #224]	@ (80030f4 <HAL_RCC_ClockConfig+0x1a0>)
 8003014:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003016:	2380      	movs	r3, #128	@ 0x80
 8003018:	029b      	lsls	r3, r3, #10
 800301a:	4013      	ands	r3, r2
 800301c:	d108      	bne.n	8003030 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e062      	b.n	80030e8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003022:	4b34      	ldr	r3, [pc, #208]	@ (80030f4 <HAL_RCC_ClockConfig+0x1a0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2202      	movs	r2, #2
 8003028:	4013      	ands	r3, r2
 800302a:	d101      	bne.n	8003030 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e05b      	b.n	80030e8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003030:	4b30      	ldr	r3, [pc, #192]	@ (80030f4 <HAL_RCC_ClockConfig+0x1a0>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2203      	movs	r2, #3
 8003036:	4393      	bics	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	4b2d      	ldr	r3, [pc, #180]	@ (80030f4 <HAL_RCC_ClockConfig+0x1a0>)
 8003040:	430a      	orrs	r2, r1
 8003042:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003044:	f7ff f8e0 	bl	8002208 <HAL_GetTick>
 8003048:	0003      	movs	r3, r0
 800304a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304c:	e009      	b.n	8003062 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304e:	f7ff f8db 	bl	8002208 <HAL_GetTick>
 8003052:	0002      	movs	r2, r0
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	4a27      	ldr	r2, [pc, #156]	@ (80030f8 <HAL_RCC_ClockConfig+0x1a4>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e042      	b.n	80030e8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	4b24      	ldr	r3, [pc, #144]	@ (80030f4 <HAL_RCC_ClockConfig+0x1a0>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	220c      	movs	r2, #12
 8003068:	401a      	ands	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	429a      	cmp	r2, r3
 8003072:	d1ec      	bne.n	800304e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003074:	4b1e      	ldr	r3, [pc, #120]	@ (80030f0 <HAL_RCC_ClockConfig+0x19c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2201      	movs	r2, #1
 800307a:	4013      	ands	r3, r2
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	429a      	cmp	r2, r3
 8003080:	d211      	bcs.n	80030a6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003082:	4b1b      	ldr	r3, [pc, #108]	@ (80030f0 <HAL_RCC_ClockConfig+0x19c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2201      	movs	r2, #1
 8003088:	4393      	bics	r3, r2
 800308a:	0019      	movs	r1, r3
 800308c:	4b18      	ldr	r3, [pc, #96]	@ (80030f0 <HAL_RCC_ClockConfig+0x19c>)
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003094:	4b16      	ldr	r3, [pc, #88]	@ (80030f0 <HAL_RCC_ClockConfig+0x19c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2201      	movs	r2, #1
 800309a:	4013      	ands	r3, r2
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d001      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e020      	b.n	80030e8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2204      	movs	r2, #4
 80030ac:	4013      	ands	r3, r2
 80030ae:	d009      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80030b0:	4b10      	ldr	r3, [pc, #64]	@ (80030f4 <HAL_RCC_ClockConfig+0x1a0>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a11      	ldr	r2, [pc, #68]	@ (80030fc <HAL_RCC_ClockConfig+0x1a8>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	0019      	movs	r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	4b0d      	ldr	r3, [pc, #52]	@ (80030f4 <HAL_RCC_ClockConfig+0x1a0>)
 80030c0:	430a      	orrs	r2, r1
 80030c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030c4:	f000 f820 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 80030c8:	0001      	movs	r1, r0
 80030ca:	4b0a      	ldr	r3, [pc, #40]	@ (80030f4 <HAL_RCC_ClockConfig+0x1a0>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	091b      	lsrs	r3, r3, #4
 80030d0:	220f      	movs	r2, #15
 80030d2:	4013      	ands	r3, r2
 80030d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003100 <HAL_RCC_ClockConfig+0x1ac>)
 80030d6:	5cd3      	ldrb	r3, [r2, r3]
 80030d8:	000a      	movs	r2, r1
 80030da:	40da      	lsrs	r2, r3
 80030dc:	4b09      	ldr	r3, [pc, #36]	@ (8003104 <HAL_RCC_ClockConfig+0x1b0>)
 80030de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80030e0:	2003      	movs	r0, #3
 80030e2:	f7ff f84b 	bl	800217c <HAL_InitTick>
  
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	0018      	movs	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b004      	add	sp, #16
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40022000 	.word	0x40022000
 80030f4:	40021000 	.word	0x40021000
 80030f8:	00001388 	.word	0x00001388
 80030fc:	fffff8ff 	.word	0xfffff8ff
 8003100:	08004f74 	.word	0x08004f74
 8003104:	20000000 	.word	0x20000000

08003108 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003122:	4b2d      	ldr	r3, [pc, #180]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	220c      	movs	r2, #12
 800312c:	4013      	ands	r3, r2
 800312e:	2b0c      	cmp	r3, #12
 8003130:	d046      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0xb8>
 8003132:	d848      	bhi.n	80031c6 <HAL_RCC_GetSysClockFreq+0xbe>
 8003134:	2b04      	cmp	r3, #4
 8003136:	d002      	beq.n	800313e <HAL_RCC_GetSysClockFreq+0x36>
 8003138:	2b08      	cmp	r3, #8
 800313a:	d003      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x3c>
 800313c:	e043      	b.n	80031c6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800313e:	4b27      	ldr	r3, [pc, #156]	@ (80031dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003140:	613b      	str	r3, [r7, #16]
      break;
 8003142:	e043      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	0c9b      	lsrs	r3, r3, #18
 8003148:	220f      	movs	r2, #15
 800314a:	4013      	ands	r3, r2
 800314c:	4a24      	ldr	r2, [pc, #144]	@ (80031e0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800314e:	5cd3      	ldrb	r3, [r2, r3]
 8003150:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003152:	4b21      	ldr	r3, [pc, #132]	@ (80031d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003156:	220f      	movs	r2, #15
 8003158:	4013      	ands	r3, r2
 800315a:	4a22      	ldr	r2, [pc, #136]	@ (80031e4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800315c:	5cd3      	ldrb	r3, [r2, r3]
 800315e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	23c0      	movs	r3, #192	@ 0xc0
 8003164:	025b      	lsls	r3, r3, #9
 8003166:	401a      	ands	r2, r3
 8003168:	2380      	movs	r3, #128	@ 0x80
 800316a:	025b      	lsls	r3, r3, #9
 800316c:	429a      	cmp	r2, r3
 800316e:	d109      	bne.n	8003184 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	481a      	ldr	r0, [pc, #104]	@ (80031dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8003174:	f7fc ffd8 	bl	8000128 <__udivsi3>
 8003178:	0003      	movs	r3, r0
 800317a:	001a      	movs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4353      	muls	r3, r2
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e01a      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	23c0      	movs	r3, #192	@ 0xc0
 8003188:	025b      	lsls	r3, r3, #9
 800318a:	401a      	ands	r2, r3
 800318c:	23c0      	movs	r3, #192	@ 0xc0
 800318e:	025b      	lsls	r3, r3, #9
 8003190:	429a      	cmp	r2, r3
 8003192:	d109      	bne.n	80031a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	4814      	ldr	r0, [pc, #80]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003198:	f7fc ffc6 	bl	8000128 <__udivsi3>
 800319c:	0003      	movs	r3, r0
 800319e:	001a      	movs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4353      	muls	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	e008      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	480c      	ldr	r0, [pc, #48]	@ (80031dc <HAL_RCC_GetSysClockFreq+0xd4>)
 80031ac:	f7fc ffbc 	bl	8000128 <__udivsi3>
 80031b0:	0003      	movs	r3, r0
 80031b2:	001a      	movs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4353      	muls	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	613b      	str	r3, [r7, #16]
      break;
 80031be:	e005      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80031c0:	4b09      	ldr	r3, [pc, #36]	@ (80031e8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80031c2:	613b      	str	r3, [r7, #16]
      break;
 80031c4:	e002      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031c6:	4b05      	ldr	r3, [pc, #20]	@ (80031dc <HAL_RCC_GetSysClockFreq+0xd4>)
 80031c8:	613b      	str	r3, [r7, #16]
      break;
 80031ca:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031cc:	693b      	ldr	r3, [r7, #16]
}
 80031ce:	0018      	movs	r0, r3
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b006      	add	sp, #24
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	40021000 	.word	0x40021000
 80031dc:	007a1200 	.word	0x007a1200
 80031e0:	08004f8c 	.word	0x08004f8c
 80031e4:	08004f9c 	.word	0x08004f9c
 80031e8:	02dc6c00 	.word	0x02dc6c00

080031ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f0:	4b02      	ldr	r3, [pc, #8]	@ (80031fc <HAL_RCC_GetHCLKFreq+0x10>)
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	0018      	movs	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	20000000 	.word	0x20000000

08003200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003204:	f7ff fff2 	bl	80031ec <HAL_RCC_GetHCLKFreq>
 8003208:	0001      	movs	r1, r0
 800320a:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <HAL_RCC_GetPCLK1Freq+0x24>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	0a1b      	lsrs	r3, r3, #8
 8003210:	2207      	movs	r2, #7
 8003212:	4013      	ands	r3, r2
 8003214:	4a04      	ldr	r2, [pc, #16]	@ (8003228 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003216:	5cd3      	ldrb	r3, [r2, r3]
 8003218:	40d9      	lsrs	r1, r3
 800321a:	000b      	movs	r3, r1
}    
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	40021000 	.word	0x40021000
 8003228:	08004f84 	.word	0x08004f84

0800322c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	2380      	movs	r3, #128	@ 0x80
 8003242:	025b      	lsls	r3, r3, #9
 8003244:	4013      	ands	r3, r2
 8003246:	d100      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003248:	e08e      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800324a:	2017      	movs	r0, #23
 800324c:	183b      	adds	r3, r7, r0
 800324e:	2200      	movs	r2, #0
 8003250:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003252:	4b6e      	ldr	r3, [pc, #440]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	2380      	movs	r3, #128	@ 0x80
 8003258:	055b      	lsls	r3, r3, #21
 800325a:	4013      	ands	r3, r2
 800325c:	d110      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800325e:	4b6b      	ldr	r3, [pc, #428]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	4b6a      	ldr	r3, [pc, #424]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003264:	2180      	movs	r1, #128	@ 0x80
 8003266:	0549      	lsls	r1, r1, #21
 8003268:	430a      	orrs	r2, r1
 800326a:	61da      	str	r2, [r3, #28]
 800326c:	4b67      	ldr	r3, [pc, #412]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800326e:	69da      	ldr	r2, [r3, #28]
 8003270:	2380      	movs	r3, #128	@ 0x80
 8003272:	055b      	lsls	r3, r3, #21
 8003274:	4013      	ands	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800327a:	183b      	adds	r3, r7, r0
 800327c:	2201      	movs	r2, #1
 800327e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003280:	4b63      	ldr	r3, [pc, #396]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	2380      	movs	r3, #128	@ 0x80
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4013      	ands	r3, r2
 800328a:	d11a      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800328c:	4b60      	ldr	r3, [pc, #384]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b5f      	ldr	r3, [pc, #380]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003292:	2180      	movs	r1, #128	@ 0x80
 8003294:	0049      	lsls	r1, r1, #1
 8003296:	430a      	orrs	r2, r1
 8003298:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329a:	f7fe ffb5 	bl	8002208 <HAL_GetTick>
 800329e:	0003      	movs	r3, r0
 80032a0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a2:	e008      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a4:	f7fe ffb0 	bl	8002208 <HAL_GetTick>
 80032a8:	0002      	movs	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	@ 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e0a6      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b6:	4b56      	ldr	r3, [pc, #344]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	2380      	movs	r3, #128	@ 0x80
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4013      	ands	r3, r2
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032c2:	4b52      	ldr	r3, [pc, #328]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032c4:	6a1a      	ldr	r2, [r3, #32]
 80032c6:	23c0      	movs	r3, #192	@ 0xc0
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4013      	ands	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d034      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	23c0      	movs	r3, #192	@ 0xc0
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4013      	ands	r3, r2
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d02c      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032e4:	4b49      	ldr	r3, [pc, #292]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ee:	4b47      	ldr	r3, [pc, #284]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032f0:	6a1a      	ldr	r2, [r3, #32]
 80032f2:	4b46      	ldr	r3, [pc, #280]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032f4:	2180      	movs	r1, #128	@ 0x80
 80032f6:	0249      	lsls	r1, r1, #9
 80032f8:	430a      	orrs	r2, r1
 80032fa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032fc:	4b43      	ldr	r3, [pc, #268]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032fe:	6a1a      	ldr	r2, [r3, #32]
 8003300:	4b42      	ldr	r3, [pc, #264]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003302:	4945      	ldr	r1, [pc, #276]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003304:	400a      	ands	r2, r1
 8003306:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003308:	4b40      	ldr	r3, [pc, #256]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	4013      	ands	r3, r2
 8003314:	d013      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7fe ff77 	bl	8002208 <HAL_GetTick>
 800331a:	0003      	movs	r3, r0
 800331c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331e:	e009      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003320:	f7fe ff72 	bl	8002208 <HAL_GetTick>
 8003324:	0002      	movs	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	4a3c      	ldr	r2, [pc, #240]	@ (800341c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d901      	bls.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e067      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003334:	4b35      	ldr	r3, [pc, #212]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	2202      	movs	r2, #2
 800333a:	4013      	ands	r3, r2
 800333c:	d0f0      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800333e:	4b33      	ldr	r3, [pc, #204]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	4a34      	ldr	r2, [pc, #208]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003344:	4013      	ands	r3, r2
 8003346:	0019      	movs	r1, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	4b2f      	ldr	r3, [pc, #188]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800334e:	430a      	orrs	r2, r1
 8003350:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003352:	2317      	movs	r3, #23
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d105      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335c:	4b2b      	ldr	r3, [pc, #172]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	4b2a      	ldr	r3, [pc, #168]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003362:	492f      	ldr	r1, [pc, #188]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003364:	400a      	ands	r2, r1
 8003366:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2201      	movs	r2, #1
 800336e:	4013      	ands	r3, r2
 8003370:	d009      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003372:	4b26      	ldr	r3, [pc, #152]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	2203      	movs	r2, #3
 8003378:	4393      	bics	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	4b22      	ldr	r3, [pc, #136]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003382:	430a      	orrs	r2, r1
 8003384:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2202      	movs	r2, #2
 800338c:	4013      	ands	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003390:	4b1e      	ldr	r3, [pc, #120]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003394:	4a23      	ldr	r2, [pc, #140]	@ (8003424 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003396:	4013      	ands	r3, r2
 8003398:	0019      	movs	r1, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	4b1b      	ldr	r3, [pc, #108]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033a0:	430a      	orrs	r2, r1
 80033a2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	02db      	lsls	r3, r3, #11
 80033ac:	4013      	ands	r3, r2
 80033ae:	d009      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033b0:	4b16      	ldr	r3, [pc, #88]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b4:	4a1c      	ldr	r2, [pc, #112]	@ (8003428 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	0019      	movs	r1, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	4b13      	ldr	r3, [pc, #76]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033c0:	430a      	orrs	r2, r1
 80033c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2220      	movs	r2, #32
 80033ca:	4013      	ands	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ce:	4b0f      	ldr	r3, [pc, #60]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	2210      	movs	r2, #16
 80033d4:	4393      	bics	r3, r2
 80033d6:	0019      	movs	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	4b0b      	ldr	r3, [pc, #44]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033de:	430a      	orrs	r2, r1
 80033e0:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	2380      	movs	r3, #128	@ 0x80
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4013      	ands	r3, r2
 80033ec:	d009      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033ee:	4b07      	ldr	r3, [pc, #28]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	2240      	movs	r2, #64	@ 0x40
 80033f4:	4393      	bics	r3, r2
 80033f6:	0019      	movs	r1, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	4b03      	ldr	r3, [pc, #12]	@ (800340c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033fe:	430a      	orrs	r2, r1
 8003400:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	b006      	add	sp, #24
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40021000 	.word	0x40021000
 8003410:	40007000 	.word	0x40007000
 8003414:	fffffcff 	.word	0xfffffcff
 8003418:	fffeffff 	.word	0xfffeffff
 800341c:	00001388 	.word	0x00001388
 8003420:	efffffff 	.word	0xefffffff
 8003424:	fffcffff 	.word	0xfffcffff
 8003428:	fff3ffff 	.word	0xfff3ffff

0800342c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e044      	b.n	80034c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2278      	movs	r2, #120	@ 0x78
 800344a:	2100      	movs	r1, #0
 800344c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	0018      	movs	r0, r3
 8003452:	f7fe fd47 	bl	8001ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2224      	movs	r2, #36	@ 0x24
 800345a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2101      	movs	r1, #1
 8003468:	438a      	bics	r2, r1
 800346a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	0018      	movs	r0, r3
 8003478:	f000 fd10 	bl	8003e9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	0018      	movs	r0, r3
 8003480:	f000 fb24 	bl	8003acc <UART_SetConfig>
 8003484:	0003      	movs	r3, r0
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e01c      	b.n	80034c8 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	490d      	ldr	r1, [pc, #52]	@ (80034d0 <HAL_UART_Init+0xa4>)
 800349a:	400a      	ands	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	212a      	movs	r1, #42	@ 0x2a
 80034aa:	438a      	bics	r2, r1
 80034ac:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2101      	movs	r1, #1
 80034ba:	430a      	orrs	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 fd9f 	bl	8004004 <UART_CheckIdleState>
 80034c6:	0003      	movs	r3, r0
}
 80034c8:	0018      	movs	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b002      	add	sp, #8
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	ffffb7ff 	.word	0xffffb7ff

080034d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b0ab      	sub	sp, #172	@ 0xac
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	22a4      	movs	r2, #164	@ 0xa4
 80034e4:	18b9      	adds	r1, r7, r2
 80034e6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	20a0      	movs	r0, #160	@ 0xa0
 80034f0:	1839      	adds	r1, r7, r0
 80034f2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	219c      	movs	r1, #156	@ 0x9c
 80034fc:	1879      	adds	r1, r7, r1
 80034fe:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003500:	0011      	movs	r1, r2
 8003502:	18bb      	adds	r3, r7, r2
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a99      	ldr	r2, [pc, #612]	@ (800376c <HAL_UART_IRQHandler+0x298>)
 8003508:	4013      	ands	r3, r2
 800350a:	2298      	movs	r2, #152	@ 0x98
 800350c:	18bc      	adds	r4, r7, r2
 800350e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003510:	18bb      	adds	r3, r7, r2
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d114      	bne.n	8003542 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003518:	187b      	adds	r3, r7, r1
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2220      	movs	r2, #32
 800351e:	4013      	ands	r3, r2
 8003520:	d00f      	beq.n	8003542 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003522:	183b      	adds	r3, r7, r0
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2220      	movs	r2, #32
 8003528:	4013      	ands	r3, r2
 800352a:	d00a      	beq.n	8003542 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003530:	2b00      	cmp	r3, #0
 8003532:	d100      	bne.n	8003536 <HAL_UART_IRQHandler+0x62>
 8003534:	e29e      	b.n	8003a74 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	0010      	movs	r0, r2
 800353e:	4798      	blx	r3
      }
      return;
 8003540:	e298      	b.n	8003a74 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003542:	2398      	movs	r3, #152	@ 0x98
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d100      	bne.n	800354e <HAL_UART_IRQHandler+0x7a>
 800354c:	e114      	b.n	8003778 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800354e:	239c      	movs	r3, #156	@ 0x9c
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2201      	movs	r2, #1
 8003556:	4013      	ands	r3, r2
 8003558:	d106      	bne.n	8003568 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800355a:	23a0      	movs	r3, #160	@ 0xa0
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a83      	ldr	r2, [pc, #524]	@ (8003770 <HAL_UART_IRQHandler+0x29c>)
 8003562:	4013      	ands	r3, r2
 8003564:	d100      	bne.n	8003568 <HAL_UART_IRQHandler+0x94>
 8003566:	e107      	b.n	8003778 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003568:	23a4      	movs	r3, #164	@ 0xa4
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2201      	movs	r2, #1
 8003570:	4013      	ands	r3, r2
 8003572:	d012      	beq.n	800359a <HAL_UART_IRQHandler+0xc6>
 8003574:	23a0      	movs	r3, #160	@ 0xa0
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	2380      	movs	r3, #128	@ 0x80
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4013      	ands	r3, r2
 8003580:	d00b      	beq.n	800359a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2201      	movs	r2, #1
 8003588:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2284      	movs	r2, #132	@ 0x84
 800358e:	589b      	ldr	r3, [r3, r2]
 8003590:	2201      	movs	r2, #1
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2184      	movs	r1, #132	@ 0x84
 8003598:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800359a:	23a4      	movs	r3, #164	@ 0xa4
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2202      	movs	r2, #2
 80035a2:	4013      	ands	r3, r2
 80035a4:	d011      	beq.n	80035ca <HAL_UART_IRQHandler+0xf6>
 80035a6:	239c      	movs	r3, #156	@ 0x9c
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2201      	movs	r2, #1
 80035ae:	4013      	ands	r3, r2
 80035b0:	d00b      	beq.n	80035ca <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2202      	movs	r2, #2
 80035b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2284      	movs	r2, #132	@ 0x84
 80035be:	589b      	ldr	r3, [r3, r2]
 80035c0:	2204      	movs	r2, #4
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2184      	movs	r1, #132	@ 0x84
 80035c8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035ca:	23a4      	movs	r3, #164	@ 0xa4
 80035cc:	18fb      	adds	r3, r7, r3
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2204      	movs	r2, #4
 80035d2:	4013      	ands	r3, r2
 80035d4:	d011      	beq.n	80035fa <HAL_UART_IRQHandler+0x126>
 80035d6:	239c      	movs	r3, #156	@ 0x9c
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2201      	movs	r2, #1
 80035de:	4013      	ands	r3, r2
 80035e0:	d00b      	beq.n	80035fa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2204      	movs	r2, #4
 80035e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2284      	movs	r2, #132	@ 0x84
 80035ee:	589b      	ldr	r3, [r3, r2]
 80035f0:	2202      	movs	r2, #2
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2184      	movs	r1, #132	@ 0x84
 80035f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80035fa:	23a4      	movs	r3, #164	@ 0xa4
 80035fc:	18fb      	adds	r3, r7, r3
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2208      	movs	r2, #8
 8003602:	4013      	ands	r3, r2
 8003604:	d017      	beq.n	8003636 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003606:	23a0      	movs	r3, #160	@ 0xa0
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2220      	movs	r2, #32
 800360e:	4013      	ands	r3, r2
 8003610:	d105      	bne.n	800361e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003612:	239c      	movs	r3, #156	@ 0x9c
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2201      	movs	r2, #1
 800361a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800361c:	d00b      	beq.n	8003636 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2208      	movs	r2, #8
 8003624:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2284      	movs	r2, #132	@ 0x84
 800362a:	589b      	ldr	r3, [r3, r2]
 800362c:	2208      	movs	r2, #8
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2184      	movs	r1, #132	@ 0x84
 8003634:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003636:	23a4      	movs	r3, #164	@ 0xa4
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	2380      	movs	r3, #128	@ 0x80
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	4013      	ands	r3, r2
 8003642:	d013      	beq.n	800366c <HAL_UART_IRQHandler+0x198>
 8003644:	23a0      	movs	r3, #160	@ 0xa0
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	2380      	movs	r3, #128	@ 0x80
 800364c:	04db      	lsls	r3, r3, #19
 800364e:	4013      	ands	r3, r2
 8003650:	d00c      	beq.n	800366c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2280      	movs	r2, #128	@ 0x80
 8003658:	0112      	lsls	r2, r2, #4
 800365a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2284      	movs	r2, #132	@ 0x84
 8003660:	589b      	ldr	r3, [r3, r2]
 8003662:	2220      	movs	r2, #32
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2184      	movs	r1, #132	@ 0x84
 800366a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2284      	movs	r2, #132	@ 0x84
 8003670:	589b      	ldr	r3, [r3, r2]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d100      	bne.n	8003678 <HAL_UART_IRQHandler+0x1a4>
 8003676:	e1ff      	b.n	8003a78 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003678:	23a4      	movs	r3, #164	@ 0xa4
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2220      	movs	r2, #32
 8003680:	4013      	ands	r3, r2
 8003682:	d00e      	beq.n	80036a2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003684:	23a0      	movs	r3, #160	@ 0xa0
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2220      	movs	r2, #32
 800368c:	4013      	ands	r3, r2
 800368e:	d008      	beq.n	80036a2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003694:	2b00      	cmp	r3, #0
 8003696:	d004      	beq.n	80036a2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	0010      	movs	r0, r2
 80036a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2284      	movs	r2, #132	@ 0x84
 80036a6:	589b      	ldr	r3, [r3, r2]
 80036a8:	2194      	movs	r1, #148	@ 0x94
 80036aa:	187a      	adds	r2, r7, r1
 80036ac:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2240      	movs	r2, #64	@ 0x40
 80036b6:	4013      	ands	r3, r2
 80036b8:	2b40      	cmp	r3, #64	@ 0x40
 80036ba:	d004      	beq.n	80036c6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036bc:	187b      	adds	r3, r7, r1
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2228      	movs	r2, #40	@ 0x28
 80036c2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036c4:	d047      	beq.n	8003756 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f000 fdb3 	bl	8004234 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2240      	movs	r2, #64	@ 0x40
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b40      	cmp	r3, #64	@ 0x40
 80036da:	d137      	bne.n	800374c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036dc:	f3ef 8310 	mrs	r3, PRIMASK
 80036e0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80036e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036e4:	2090      	movs	r0, #144	@ 0x90
 80036e6:	183a      	adds	r2, r7, r0
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	2301      	movs	r3, #1
 80036ec:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036f0:	f383 8810 	msr	PRIMASK, r3
}
 80036f4:	46c0      	nop			@ (mov r8, r8)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2140      	movs	r1, #64	@ 0x40
 8003702:	438a      	bics	r2, r1
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	183b      	adds	r3, r7, r0
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800370e:	f383 8810 	msr	PRIMASK, r3
}
 8003712:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003718:	2b00      	cmp	r3, #0
 800371a:	d012      	beq.n	8003742 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003720:	4a14      	ldr	r2, [pc, #80]	@ (8003774 <HAL_UART_IRQHandler+0x2a0>)
 8003722:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003728:	0018      	movs	r0, r3
 800372a:	f7fe feb1 	bl	8002490 <HAL_DMA_Abort_IT>
 800372e:	1e03      	subs	r3, r0, #0
 8003730:	d01a      	beq.n	8003768 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003736:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373c:	0018      	movs	r0, r3
 800373e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003740:	e012      	b.n	8003768 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	0018      	movs	r0, r3
 8003746:	f000 f9ad 	bl	8003aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374a:	e00d      	b.n	8003768 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	0018      	movs	r0, r3
 8003750:	f000 f9a8 	bl	8003aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003754:	e008      	b.n	8003768 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	0018      	movs	r0, r3
 800375a:	f000 f9a3 	bl	8003aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2284      	movs	r2, #132	@ 0x84
 8003762:	2100      	movs	r1, #0
 8003764:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003766:	e187      	b.n	8003a78 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	46c0      	nop			@ (mov r8, r8)
    return;
 800376a:	e185      	b.n	8003a78 <HAL_UART_IRQHandler+0x5a4>
 800376c:	0000080f 	.word	0x0000080f
 8003770:	04000120 	.word	0x04000120
 8003774:	080042fd 	.word	0x080042fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800377c:	2b01      	cmp	r3, #1
 800377e:	d000      	beq.n	8003782 <HAL_UART_IRQHandler+0x2ae>
 8003780:	e139      	b.n	80039f6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003782:	23a4      	movs	r3, #164	@ 0xa4
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2210      	movs	r2, #16
 800378a:	4013      	ands	r3, r2
 800378c:	d100      	bne.n	8003790 <HAL_UART_IRQHandler+0x2bc>
 800378e:	e132      	b.n	80039f6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003790:	23a0      	movs	r3, #160	@ 0xa0
 8003792:	18fb      	adds	r3, r7, r3
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2210      	movs	r2, #16
 8003798:	4013      	ands	r3, r2
 800379a:	d100      	bne.n	800379e <HAL_UART_IRQHandler+0x2ca>
 800379c:	e12b      	b.n	80039f6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2210      	movs	r2, #16
 80037a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2240      	movs	r2, #64	@ 0x40
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b40      	cmp	r3, #64	@ 0x40
 80037b2:	d000      	beq.n	80037b6 <HAL_UART_IRQHandler+0x2e2>
 80037b4:	e09f      	b.n	80038f6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	217e      	movs	r1, #126	@ 0x7e
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80037c4:	187b      	adds	r3, r7, r1
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d100      	bne.n	80037ce <HAL_UART_IRQHandler+0x2fa>
 80037cc:	e156      	b.n	8003a7c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2258      	movs	r2, #88	@ 0x58
 80037d2:	5a9b      	ldrh	r3, [r3, r2]
 80037d4:	187a      	adds	r2, r7, r1
 80037d6:	8812      	ldrh	r2, [r2, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d300      	bcc.n	80037de <HAL_UART_IRQHandler+0x30a>
 80037dc:	e14e      	b.n	8003a7c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	187a      	adds	r2, r7, r1
 80037e2:	215a      	movs	r1, #90	@ 0x5a
 80037e4:	8812      	ldrh	r2, [r2, #0]
 80037e6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d06f      	beq.n	80038d2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037f2:	f3ef 8310 	mrs	r3, PRIMASK
 80037f6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80037f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037fc:	2301      	movs	r3, #1
 80037fe:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003802:	f383 8810 	msr	PRIMASK, r3
}
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	499e      	ldr	r1, [pc, #632]	@ (8003a8c <HAL_UART_IRQHandler+0x5b8>)
 8003814:	400a      	ands	r2, r1
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800381a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381e:	f383 8810 	msr	PRIMASK, r3
}
 8003822:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003824:	f3ef 8310 	mrs	r3, PRIMASK
 8003828:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800382a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382c:	677b      	str	r3, [r7, #116]	@ 0x74
 800382e:	2301      	movs	r3, #1
 8003830:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003834:	f383 8810 	msr	PRIMASK, r3
}
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2101      	movs	r1, #1
 8003846:	438a      	bics	r2, r1
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800384c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003850:	f383 8810 	msr	PRIMASK, r3
}
 8003854:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003856:	f3ef 8310 	mrs	r3, PRIMASK
 800385a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800385c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800385e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003860:	2301      	movs	r3, #1
 8003862:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003866:	f383 8810 	msr	PRIMASK, r3
}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2140      	movs	r1, #64	@ 0x40
 8003878:	438a      	bics	r2, r1
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800387e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003880:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003882:	f383 8810 	msr	PRIMASK, r3
}
 8003886:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2280      	movs	r2, #128	@ 0x80
 800388c:	2120      	movs	r1, #32
 800388e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003896:	f3ef 8310 	mrs	r3, PRIMASK
 800389a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800389c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038a0:	2301      	movs	r3, #1
 80038a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80038a6:	f383 8810 	msr	PRIMASK, r3
}
 80038aa:	46c0      	nop			@ (mov r8, r8)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2110      	movs	r1, #16
 80038b8:	438a      	bics	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038be:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038c2:	f383 8810 	msr	PRIMASK, r3
}
 80038c6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7fe fda7 	bl	8002420 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2258      	movs	r2, #88	@ 0x58
 80038dc:	5a9a      	ldrh	r2, [r3, r2]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	215a      	movs	r1, #90	@ 0x5a
 80038e2:	5a5b      	ldrh	r3, [r3, r1]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	0011      	movs	r1, r2
 80038ee:	0018      	movs	r0, r3
 80038f0:	f000 f8e0 	bl	8003ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038f4:	e0c2      	b.n	8003a7c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2258      	movs	r2, #88	@ 0x58
 80038fa:	5a99      	ldrh	r1, [r3, r2]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	225a      	movs	r2, #90	@ 0x5a
 8003900:	5a9b      	ldrh	r3, [r3, r2]
 8003902:	b29a      	uxth	r2, r3
 8003904:	208e      	movs	r0, #142	@ 0x8e
 8003906:	183b      	adds	r3, r7, r0
 8003908:	1a8a      	subs	r2, r1, r2
 800390a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	225a      	movs	r2, #90	@ 0x5a
 8003910:	5a9b      	ldrh	r3, [r3, r2]
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d100      	bne.n	800391a <HAL_UART_IRQHandler+0x446>
 8003918:	e0b2      	b.n	8003a80 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800391a:	183b      	adds	r3, r7, r0
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d100      	bne.n	8003924 <HAL_UART_IRQHandler+0x450>
 8003922:	e0ad      	b.n	8003a80 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003924:	f3ef 8310 	mrs	r3, PRIMASK
 8003928:	60fb      	str	r3, [r7, #12]
  return(result);
 800392a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800392c:	2488      	movs	r4, #136	@ 0x88
 800392e:	193a      	adds	r2, r7, r4
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	2301      	movs	r3, #1
 8003934:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f383 8810 	msr	PRIMASK, r3
}
 800393c:	46c0      	nop			@ (mov r8, r8)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4951      	ldr	r1, [pc, #324]	@ (8003a90 <HAL_UART_IRQHandler+0x5bc>)
 800394a:	400a      	ands	r2, r1
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	193b      	adds	r3, r7, r4
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f383 8810 	msr	PRIMASK, r3
}
 800395a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800395c:	f3ef 8310 	mrs	r3, PRIMASK
 8003960:	61bb      	str	r3, [r7, #24]
  return(result);
 8003962:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003964:	2484      	movs	r4, #132	@ 0x84
 8003966:	193a      	adds	r2, r7, r4
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	2301      	movs	r3, #1
 800396c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	f383 8810 	msr	PRIMASK, r3
}
 8003974:	46c0      	nop			@ (mov r8, r8)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2101      	movs	r1, #1
 8003982:	438a      	bics	r2, r1
 8003984:	609a      	str	r2, [r3, #8]
 8003986:	193b      	adds	r3, r7, r4
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	f383 8810 	msr	PRIMASK, r3
}
 8003992:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2280      	movs	r2, #128	@ 0x80
 8003998:	2120      	movs	r1, #32
 800399a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a8:	f3ef 8310 	mrs	r3, PRIMASK
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b0:	2480      	movs	r4, #128	@ 0x80
 80039b2:	193a      	adds	r2, r7, r4
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	2301      	movs	r3, #1
 80039b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039bc:	f383 8810 	msr	PRIMASK, r3
}
 80039c0:	46c0      	nop			@ (mov r8, r8)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2110      	movs	r1, #16
 80039ce:	438a      	bics	r2, r1
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	193b      	adds	r3, r7, r4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039da:	f383 8810 	msr	PRIMASK, r3
}
 80039de:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039e6:	183b      	adds	r3, r7, r0
 80039e8:	881a      	ldrh	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	0011      	movs	r1, r2
 80039ee:	0018      	movs	r0, r3
 80039f0:	f000 f860 	bl	8003ab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039f4:	e044      	b.n	8003a80 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039f6:	23a4      	movs	r3, #164	@ 0xa4
 80039f8:	18fb      	adds	r3, r7, r3
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	2380      	movs	r3, #128	@ 0x80
 80039fe:	035b      	lsls	r3, r3, #13
 8003a00:	4013      	ands	r3, r2
 8003a02:	d010      	beq.n	8003a26 <HAL_UART_IRQHandler+0x552>
 8003a04:	239c      	movs	r3, #156	@ 0x9c
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	2380      	movs	r3, #128	@ 0x80
 8003a0c:	03db      	lsls	r3, r3, #15
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d009      	beq.n	8003a26 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2280      	movs	r2, #128	@ 0x80
 8003a18:	0352      	lsls	r2, r2, #13
 8003a1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f000 fcae 	bl	8004380 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a24:	e02f      	b.n	8003a86 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a26:	23a4      	movs	r3, #164	@ 0xa4
 8003a28:	18fb      	adds	r3, r7, r3
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2280      	movs	r2, #128	@ 0x80
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d00f      	beq.n	8003a52 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a32:	23a0      	movs	r3, #160	@ 0xa0
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2280      	movs	r2, #128	@ 0x80
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d01e      	beq.n	8003a84 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	0010      	movs	r0, r2
 8003a4e:	4798      	blx	r3
    }
    return;
 8003a50:	e018      	b.n	8003a84 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a52:	23a4      	movs	r3, #164	@ 0xa4
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2240      	movs	r2, #64	@ 0x40
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	d013      	beq.n	8003a86 <HAL_UART_IRQHandler+0x5b2>
 8003a5e:	23a0      	movs	r3, #160	@ 0xa0
 8003a60:	18fb      	adds	r3, r7, r3
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2240      	movs	r2, #64	@ 0x40
 8003a66:	4013      	ands	r3, r2
 8003a68:	d00d      	beq.n	8003a86 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f000 fc5c 	bl	800432a <UART_EndTransmit_IT>
    return;
 8003a72:	e008      	b.n	8003a86 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003a74:	46c0      	nop			@ (mov r8, r8)
 8003a76:	e006      	b.n	8003a86 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003a78:	46c0      	nop			@ (mov r8, r8)
 8003a7a:	e004      	b.n	8003a86 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003a7c:	46c0      	nop			@ (mov r8, r8)
 8003a7e:	e002      	b.n	8003a86 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003a80:	46c0      	nop			@ (mov r8, r8)
 8003a82:	e000      	b.n	8003a86 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003a84:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b02b      	add	sp, #172	@ 0xac
 8003a8a:	bd90      	pop	{r4, r7, pc}
 8003a8c:	fffffeff 	.word	0xfffffeff
 8003a90:	fffffedf 	.word	0xfffffedf

08003a94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a9c:	46c0      	nop			@ (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b002      	add	sp, #8
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003aac:	46c0      	nop			@ (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b002      	add	sp, #8
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	000a      	movs	r2, r1
 8003abe:	1cbb      	adds	r3, r7, #2
 8003ac0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ac2:	46c0      	nop			@ (mov r8, r8)
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b002      	add	sp, #8
 8003ac8:	bd80      	pop	{r7, pc}
	...

08003acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ad4:	231e      	movs	r3, #30
 8003ad6:	18fb      	adds	r3, r7, r3
 8003ad8:	2200      	movs	r2, #0
 8003ada:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4abe      	ldr	r2, [pc, #760]	@ (8003df4 <UART_SetConfig+0x328>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	0019      	movs	r1, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4ab9      	ldr	r2, [pc, #740]	@ (8003df8 <UART_SetConfig+0x32c>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	0019      	movs	r1, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4ab0      	ldr	r2, [pc, #704]	@ (8003dfc <UART_SetConfig+0x330>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4aac      	ldr	r2, [pc, #688]	@ (8003e00 <UART_SetConfig+0x334>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d127      	bne.n	8003ba2 <UART_SetConfig+0xd6>
 8003b52:	4bac      	ldr	r3, [pc, #688]	@ (8003e04 <UART_SetConfig+0x338>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b56:	2203      	movs	r2, #3
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d00d      	beq.n	8003b7a <UART_SetConfig+0xae>
 8003b5e:	d81b      	bhi.n	8003b98 <UART_SetConfig+0xcc>
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d014      	beq.n	8003b8e <UART_SetConfig+0xc2>
 8003b64:	d818      	bhi.n	8003b98 <UART_SetConfig+0xcc>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <UART_SetConfig+0xa4>
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d00a      	beq.n	8003b84 <UART_SetConfig+0xb8>
 8003b6e:	e013      	b.n	8003b98 <UART_SetConfig+0xcc>
 8003b70:	231f      	movs	r3, #31
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e0bd      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003b7a:	231f      	movs	r3, #31
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	2202      	movs	r2, #2
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e0b8      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003b84:	231f      	movs	r3, #31
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	2204      	movs	r2, #4
 8003b8a:	701a      	strb	r2, [r3, #0]
 8003b8c:	e0b3      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003b8e:	231f      	movs	r3, #31
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	2208      	movs	r2, #8
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	e0ae      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003b98:	231f      	movs	r3, #31
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	e0a9      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a98      	ldr	r2, [pc, #608]	@ (8003e08 <UART_SetConfig+0x33c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d134      	bne.n	8003c16 <UART_SetConfig+0x14a>
 8003bac:	4b95      	ldr	r3, [pc, #596]	@ (8003e04 <UART_SetConfig+0x338>)
 8003bae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bb0:	23c0      	movs	r3, #192	@ 0xc0
 8003bb2:	029b      	lsls	r3, r3, #10
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	22c0      	movs	r2, #192	@ 0xc0
 8003bb8:	0292      	lsls	r2, r2, #10
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d017      	beq.n	8003bee <UART_SetConfig+0x122>
 8003bbe:	22c0      	movs	r2, #192	@ 0xc0
 8003bc0:	0292      	lsls	r2, r2, #10
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d822      	bhi.n	8003c0c <UART_SetConfig+0x140>
 8003bc6:	2280      	movs	r2, #128	@ 0x80
 8003bc8:	0292      	lsls	r2, r2, #10
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d019      	beq.n	8003c02 <UART_SetConfig+0x136>
 8003bce:	2280      	movs	r2, #128	@ 0x80
 8003bd0:	0292      	lsls	r2, r2, #10
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d81a      	bhi.n	8003c0c <UART_SetConfig+0x140>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d004      	beq.n	8003be4 <UART_SetConfig+0x118>
 8003bda:	2280      	movs	r2, #128	@ 0x80
 8003bdc:	0252      	lsls	r2, r2, #9
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00a      	beq.n	8003bf8 <UART_SetConfig+0x12c>
 8003be2:	e013      	b.n	8003c0c <UART_SetConfig+0x140>
 8003be4:	231f      	movs	r3, #31
 8003be6:	18fb      	adds	r3, r7, r3
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	e083      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003bee:	231f      	movs	r3, #31
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	e07e      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003bf8:	231f      	movs	r3, #31
 8003bfa:	18fb      	adds	r3, r7, r3
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	701a      	strb	r2, [r3, #0]
 8003c00:	e079      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003c02:	231f      	movs	r3, #31
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	2208      	movs	r2, #8
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	e074      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003c0c:	231f      	movs	r3, #31
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	2210      	movs	r2, #16
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	e06f      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a7c      	ldr	r2, [pc, #496]	@ (8003e0c <UART_SetConfig+0x340>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d134      	bne.n	8003c8a <UART_SetConfig+0x1be>
 8003c20:	4b78      	ldr	r3, [pc, #480]	@ (8003e04 <UART_SetConfig+0x338>)
 8003c22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c24:	23c0      	movs	r3, #192	@ 0xc0
 8003c26:	031b      	lsls	r3, r3, #12
 8003c28:	4013      	ands	r3, r2
 8003c2a:	22c0      	movs	r2, #192	@ 0xc0
 8003c2c:	0312      	lsls	r2, r2, #12
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d017      	beq.n	8003c62 <UART_SetConfig+0x196>
 8003c32:	22c0      	movs	r2, #192	@ 0xc0
 8003c34:	0312      	lsls	r2, r2, #12
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d822      	bhi.n	8003c80 <UART_SetConfig+0x1b4>
 8003c3a:	2280      	movs	r2, #128	@ 0x80
 8003c3c:	0312      	lsls	r2, r2, #12
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d019      	beq.n	8003c76 <UART_SetConfig+0x1aa>
 8003c42:	2280      	movs	r2, #128	@ 0x80
 8003c44:	0312      	lsls	r2, r2, #12
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d81a      	bhi.n	8003c80 <UART_SetConfig+0x1b4>
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d004      	beq.n	8003c58 <UART_SetConfig+0x18c>
 8003c4e:	2280      	movs	r2, #128	@ 0x80
 8003c50:	02d2      	lsls	r2, r2, #11
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00a      	beq.n	8003c6c <UART_SetConfig+0x1a0>
 8003c56:	e013      	b.n	8003c80 <UART_SetConfig+0x1b4>
 8003c58:	231f      	movs	r3, #31
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	e049      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003c62:	231f      	movs	r3, #31
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	2202      	movs	r2, #2
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	e044      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003c6c:	231f      	movs	r3, #31
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	2204      	movs	r2, #4
 8003c72:	701a      	strb	r2, [r3, #0]
 8003c74:	e03f      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003c76:	231f      	movs	r3, #31
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	e03a      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003c80:	231f      	movs	r3, #31
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	2210      	movs	r2, #16
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	e035      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a60      	ldr	r2, [pc, #384]	@ (8003e10 <UART_SetConfig+0x344>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d104      	bne.n	8003c9e <UART_SetConfig+0x1d2>
 8003c94:	231f      	movs	r3, #31
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	e02b      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a5c      	ldr	r2, [pc, #368]	@ (8003e14 <UART_SetConfig+0x348>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d104      	bne.n	8003cb2 <UART_SetConfig+0x1e6>
 8003ca8:	231f      	movs	r3, #31
 8003caa:	18fb      	adds	r3, r7, r3
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
 8003cb0:	e021      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a58      	ldr	r2, [pc, #352]	@ (8003e18 <UART_SetConfig+0x34c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d104      	bne.n	8003cc6 <UART_SetConfig+0x1fa>
 8003cbc:	231f      	movs	r3, #31
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
 8003cc4:	e017      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a54      	ldr	r2, [pc, #336]	@ (8003e1c <UART_SetConfig+0x350>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d104      	bne.n	8003cda <UART_SetConfig+0x20e>
 8003cd0:	231f      	movs	r3, #31
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	701a      	strb	r2, [r3, #0]
 8003cd8:	e00d      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a50      	ldr	r2, [pc, #320]	@ (8003e20 <UART_SetConfig+0x354>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d104      	bne.n	8003cee <UART_SetConfig+0x222>
 8003ce4:	231f      	movs	r3, #31
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	e003      	b.n	8003cf6 <UART_SetConfig+0x22a>
 8003cee:	231f      	movs	r3, #31
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	2210      	movs	r2, #16
 8003cf4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69da      	ldr	r2, [r3, #28]
 8003cfa:	2380      	movs	r3, #128	@ 0x80
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d15c      	bne.n	8003dbc <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8003d02:	231f      	movs	r3, #31
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d015      	beq.n	8003d38 <UART_SetConfig+0x26c>
 8003d0c:	dc18      	bgt.n	8003d40 <UART_SetConfig+0x274>
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d00d      	beq.n	8003d2e <UART_SetConfig+0x262>
 8003d12:	dc15      	bgt.n	8003d40 <UART_SetConfig+0x274>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <UART_SetConfig+0x252>
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d005      	beq.n	8003d28 <UART_SetConfig+0x25c>
 8003d1c:	e010      	b.n	8003d40 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d1e:	f7ff fa6f 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 8003d22:	0003      	movs	r3, r0
 8003d24:	61bb      	str	r3, [r7, #24]
        break;
 8003d26:	e012      	b.n	8003d4e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d28:	4b3e      	ldr	r3, [pc, #248]	@ (8003e24 <UART_SetConfig+0x358>)
 8003d2a:	61bb      	str	r3, [r7, #24]
        break;
 8003d2c:	e00f      	b.n	8003d4e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d2e:	f7ff f9eb 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 8003d32:	0003      	movs	r3, r0
 8003d34:	61bb      	str	r3, [r7, #24]
        break;
 8003d36:	e00a      	b.n	8003d4e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d38:	2380      	movs	r3, #128	@ 0x80
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	61bb      	str	r3, [r7, #24]
        break;
 8003d3e:	e006      	b.n	8003d4e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d44:	231e      	movs	r3, #30
 8003d46:	18fb      	adds	r3, r7, r3
 8003d48:	2201      	movs	r2, #1
 8003d4a:	701a      	strb	r2, [r3, #0]
        break;
 8003d4c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d100      	bne.n	8003d56 <UART_SetConfig+0x28a>
 8003d54:	e095      	b.n	8003e82 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	005a      	lsls	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	085b      	lsrs	r3, r3, #1
 8003d60:	18d2      	adds	r2, r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	0019      	movs	r1, r3
 8003d68:	0010      	movs	r0, r2
 8003d6a:	f7fc f9dd 	bl	8000128 <__udivsi3>
 8003d6e:	0003      	movs	r3, r0
 8003d70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b0f      	cmp	r3, #15
 8003d76:	d91c      	bls.n	8003db2 <UART_SetConfig+0x2e6>
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	2380      	movs	r3, #128	@ 0x80
 8003d7c:	025b      	lsls	r3, r3, #9
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d217      	bcs.n	8003db2 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	200e      	movs	r0, #14
 8003d88:	183b      	adds	r3, r7, r0
 8003d8a:	210f      	movs	r1, #15
 8003d8c:	438a      	bics	r2, r1
 8003d8e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2207      	movs	r2, #7
 8003d98:	4013      	ands	r3, r2
 8003d9a:	b299      	uxth	r1, r3
 8003d9c:	183b      	adds	r3, r7, r0
 8003d9e:	183a      	adds	r2, r7, r0
 8003da0:	8812      	ldrh	r2, [r2, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	183a      	adds	r2, r7, r0
 8003dac:	8812      	ldrh	r2, [r2, #0]
 8003dae:	60da      	str	r2, [r3, #12]
 8003db0:	e067      	b.n	8003e82 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003db2:	231e      	movs	r3, #30
 8003db4:	18fb      	adds	r3, r7, r3
 8003db6:	2201      	movs	r2, #1
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	e062      	b.n	8003e82 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dbc:	231f      	movs	r3, #31
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d030      	beq.n	8003e28 <UART_SetConfig+0x35c>
 8003dc6:	dc33      	bgt.n	8003e30 <UART_SetConfig+0x364>
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d00d      	beq.n	8003de8 <UART_SetConfig+0x31c>
 8003dcc:	dc30      	bgt.n	8003e30 <UART_SetConfig+0x364>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <UART_SetConfig+0x30c>
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d005      	beq.n	8003de2 <UART_SetConfig+0x316>
 8003dd6:	e02b      	b.n	8003e30 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd8:	f7ff fa12 	bl	8003200 <HAL_RCC_GetPCLK1Freq>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	61bb      	str	r3, [r7, #24]
        break;
 8003de0:	e02d      	b.n	8003e3e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de2:	4b10      	ldr	r3, [pc, #64]	@ (8003e24 <UART_SetConfig+0x358>)
 8003de4:	61bb      	str	r3, [r7, #24]
        break;
 8003de6:	e02a      	b.n	8003e3e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de8:	f7ff f98e 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 8003dec:	0003      	movs	r3, r0
 8003dee:	61bb      	str	r3, [r7, #24]
        break;
 8003df0:	e025      	b.n	8003e3e <UART_SetConfig+0x372>
 8003df2:	46c0      	nop			@ (mov r8, r8)
 8003df4:	efff69f3 	.word	0xefff69f3
 8003df8:	ffffcfff 	.word	0xffffcfff
 8003dfc:	fffff4ff 	.word	0xfffff4ff
 8003e00:	40013800 	.word	0x40013800
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40004400 	.word	0x40004400
 8003e0c:	40004800 	.word	0x40004800
 8003e10:	40004c00 	.word	0x40004c00
 8003e14:	40005000 	.word	0x40005000
 8003e18:	40011400 	.word	0x40011400
 8003e1c:	40011800 	.word	0x40011800
 8003e20:	40011c00 	.word	0x40011c00
 8003e24:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e28:	2380      	movs	r3, #128	@ 0x80
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	61bb      	str	r3, [r7, #24]
        break;
 8003e2e:	e006      	b.n	8003e3e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e34:	231e      	movs	r3, #30
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
        break;
 8003e3c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01e      	beq.n	8003e82 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	085a      	lsrs	r2, r3, #1
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	18d2      	adds	r2, r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	0019      	movs	r1, r3
 8003e54:	0010      	movs	r0, r2
 8003e56:	f7fc f967 	bl	8000128 <__udivsi3>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b0f      	cmp	r3, #15
 8003e62:	d90a      	bls.n	8003e7a <UART_SetConfig+0x3ae>
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	2380      	movs	r3, #128	@ 0x80
 8003e68:	025b      	lsls	r3, r3, #9
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d205      	bcs.n	8003e7a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	60da      	str	r2, [r3, #12]
 8003e78:	e003      	b.n	8003e82 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003e7a:	231e      	movs	r3, #30
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	2201      	movs	r2, #1
 8003e80:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003e8e:	231e      	movs	r3, #30
 8003e90:	18fb      	adds	r3, r7, r3
 8003e92:	781b      	ldrb	r3, [r3, #0]
}
 8003e94:	0018      	movs	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b008      	add	sp, #32
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d00b      	beq.n	8003ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	4a4a      	ldr	r2, [pc, #296]	@ (8003fe0 <UART_AdvFeatureConfig+0x144>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	0019      	movs	r1, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eca:	2201      	movs	r2, #1
 8003ecc:	4013      	ands	r3, r2
 8003ece:	d00b      	beq.n	8003ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4a43      	ldr	r2, [pc, #268]	@ (8003fe4 <UART_AdvFeatureConfig+0x148>)
 8003ed8:	4013      	ands	r3, r2
 8003eda:	0019      	movs	r1, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eec:	2202      	movs	r2, #2
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d00b      	beq.n	8003f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4a3b      	ldr	r2, [pc, #236]	@ (8003fe8 <UART_AdvFeatureConfig+0x14c>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	0019      	movs	r1, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	2204      	movs	r2, #4
 8003f10:	4013      	ands	r3, r2
 8003f12:	d00b      	beq.n	8003f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	4a34      	ldr	r2, [pc, #208]	@ (8003fec <UART_AdvFeatureConfig+0x150>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	0019      	movs	r1, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f30:	2210      	movs	r2, #16
 8003f32:	4013      	ands	r3, r2
 8003f34:	d00b      	beq.n	8003f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ff0 <UART_AdvFeatureConfig+0x154>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	0019      	movs	r1, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	2220      	movs	r2, #32
 8003f54:	4013      	ands	r3, r2
 8003f56:	d00b      	beq.n	8003f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	4a25      	ldr	r2, [pc, #148]	@ (8003ff4 <UART_AdvFeatureConfig+0x158>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	0019      	movs	r1, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	2240      	movs	r2, #64	@ 0x40
 8003f76:	4013      	ands	r3, r2
 8003f78:	d01d      	beq.n	8003fb6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4a1d      	ldr	r2, [pc, #116]	@ (8003ff8 <UART_AdvFeatureConfig+0x15c>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	0019      	movs	r1, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f96:	2380      	movs	r3, #128	@ 0x80
 8003f98:	035b      	lsls	r3, r3, #13
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d10b      	bne.n	8003fb6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	4a15      	ldr	r2, [pc, #84]	@ (8003ffc <UART_AdvFeatureConfig+0x160>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	0019      	movs	r1, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fba:	2280      	movs	r2, #128	@ 0x80
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	d00b      	beq.n	8003fd8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8004000 <UART_AdvFeatureConfig+0x164>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	0019      	movs	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
  }
}
 8003fd8:	46c0      	nop			@ (mov r8, r8)
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	ffff7fff 	.word	0xffff7fff
 8003fe4:	fffdffff 	.word	0xfffdffff
 8003fe8:	fffeffff 	.word	0xfffeffff
 8003fec:	fffbffff 	.word	0xfffbffff
 8003ff0:	ffffefff 	.word	0xffffefff
 8003ff4:	ffffdfff 	.word	0xffffdfff
 8003ff8:	ffefffff 	.word	0xffefffff
 8003ffc:	ff9fffff 	.word	0xff9fffff
 8004000:	fff7ffff 	.word	0xfff7ffff

08004004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b092      	sub	sp, #72	@ 0x48
 8004008:	af02      	add	r7, sp, #8
 800400a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2284      	movs	r2, #132	@ 0x84
 8004010:	2100      	movs	r1, #0
 8004012:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004014:	f7fe f8f8 	bl	8002208 <HAL_GetTick>
 8004018:	0003      	movs	r3, r0
 800401a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2208      	movs	r2, #8
 8004024:	4013      	ands	r3, r2
 8004026:	2b08      	cmp	r3, #8
 8004028:	d12c      	bne.n	8004084 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800402a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800402c:	2280      	movs	r2, #128	@ 0x80
 800402e:	0391      	lsls	r1, r2, #14
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	4a46      	ldr	r2, [pc, #280]	@ (800414c <UART_CheckIdleState+0x148>)
 8004034:	9200      	str	r2, [sp, #0]
 8004036:	2200      	movs	r2, #0
 8004038:	f000 f88c 	bl	8004154 <UART_WaitOnFlagUntilTimeout>
 800403c:	1e03      	subs	r3, r0, #0
 800403e:	d021      	beq.n	8004084 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004040:	f3ef 8310 	mrs	r3, PRIMASK
 8004044:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004048:	63bb      	str	r3, [r7, #56]	@ 0x38
 800404a:	2301      	movs	r3, #1
 800404c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004050:	f383 8810 	msr	PRIMASK, r3
}
 8004054:	46c0      	nop			@ (mov r8, r8)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2180      	movs	r1, #128	@ 0x80
 8004062:	438a      	bics	r2, r1
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004068:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800406c:	f383 8810 	msr	PRIMASK, r3
}
 8004070:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2278      	movs	r2, #120	@ 0x78
 800407c:	2100      	movs	r1, #0
 800407e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e05f      	b.n	8004144 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2204      	movs	r2, #4
 800408c:	4013      	ands	r3, r2
 800408e:	2b04      	cmp	r3, #4
 8004090:	d146      	bne.n	8004120 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004094:	2280      	movs	r2, #128	@ 0x80
 8004096:	03d1      	lsls	r1, r2, #15
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	4a2c      	ldr	r2, [pc, #176]	@ (800414c <UART_CheckIdleState+0x148>)
 800409c:	9200      	str	r2, [sp, #0]
 800409e:	2200      	movs	r2, #0
 80040a0:	f000 f858 	bl	8004154 <UART_WaitOnFlagUntilTimeout>
 80040a4:	1e03      	subs	r3, r0, #0
 80040a6:	d03b      	beq.n	8004120 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a8:	f3ef 8310 	mrs	r3, PRIMASK
 80040ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80040ae:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80040b2:	2301      	movs	r3, #1
 80040b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f383 8810 	msr	PRIMASK, r3
}
 80040bc:	46c0      	nop			@ (mov r8, r8)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4921      	ldr	r1, [pc, #132]	@ (8004150 <UART_CheckIdleState+0x14c>)
 80040ca:	400a      	ands	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f383 8810 	msr	PRIMASK, r3
}
 80040d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040da:	f3ef 8310 	mrs	r3, PRIMASK
 80040de:	61bb      	str	r3, [r7, #24]
  return(result);
 80040e0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80040e4:	2301      	movs	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	f383 8810 	msr	PRIMASK, r3
}
 80040ee:	46c0      	nop			@ (mov r8, r8)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2101      	movs	r1, #1
 80040fc:	438a      	bics	r2, r1
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004102:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	f383 8810 	msr	PRIMASK, r3
}
 800410a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2280      	movs	r2, #128	@ 0x80
 8004110:	2120      	movs	r1, #32
 8004112:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2278      	movs	r2, #120	@ 0x78
 8004118:	2100      	movs	r1, #0
 800411a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e011      	b.n	8004144 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2280      	movs	r2, #128	@ 0x80
 800412a:	2120      	movs	r1, #32
 800412c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2278      	movs	r2, #120	@ 0x78
 800413e:	2100      	movs	r1, #0
 8004140:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	b010      	add	sp, #64	@ 0x40
 800414a:	bd80      	pop	{r7, pc}
 800414c:	01ffffff 	.word	0x01ffffff
 8004150:	fffffedf 	.word	0xfffffedf

08004154 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	1dfb      	adds	r3, r7, #7
 8004162:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004164:	e051      	b.n	800420a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	3301      	adds	r3, #1
 800416a:	d04e      	beq.n	800420a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416c:	f7fe f84c 	bl	8002208 <HAL_GetTick>
 8004170:	0002      	movs	r2, r0
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	429a      	cmp	r2, r3
 800417a:	d302      	bcc.n	8004182 <UART_WaitOnFlagUntilTimeout+0x2e>
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e051      	b.n	800422a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2204      	movs	r2, #4
 800418e:	4013      	ands	r3, r2
 8004190:	d03b      	beq.n	800420a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2b80      	cmp	r3, #128	@ 0x80
 8004196:	d038      	beq.n	800420a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b40      	cmp	r3, #64	@ 0x40
 800419c:	d035      	beq.n	800420a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2208      	movs	r2, #8
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d111      	bne.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2208      	movs	r2, #8
 80041b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	0018      	movs	r0, r3
 80041b8:	f000 f83c 	bl	8004234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2284      	movs	r2, #132	@ 0x84
 80041c0:	2108      	movs	r1, #8
 80041c2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2278      	movs	r2, #120	@ 0x78
 80041c8:	2100      	movs	r1, #0
 80041ca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e02c      	b.n	800422a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	2380      	movs	r3, #128	@ 0x80
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	401a      	ands	r2, r3
 80041dc:	2380      	movs	r3, #128	@ 0x80
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d112      	bne.n	800420a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2280      	movs	r2, #128	@ 0x80
 80041ea:	0112      	lsls	r2, r2, #4
 80041ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 f81f 	bl	8004234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2284      	movs	r2, #132	@ 0x84
 80041fa:	2120      	movs	r1, #32
 80041fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2278      	movs	r2, #120	@ 0x78
 8004202:	2100      	movs	r1, #0
 8004204:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e00f      	b.n	800422a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69db      	ldr	r3, [r3, #28]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	4013      	ands	r3, r2
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	425a      	negs	r2, r3
 800421a:	4153      	adcs	r3, r2
 800421c:	b2db      	uxtb	r3, r3
 800421e:	001a      	movs	r2, r3
 8004220:	1dfb      	adds	r3, r7, #7
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d09e      	beq.n	8004166 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	b004      	add	sp, #16
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08e      	sub	sp, #56	@ 0x38
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800423c:	f3ef 8310 	mrs	r3, PRIMASK
 8004240:	617b      	str	r3, [r7, #20]
  return(result);
 8004242:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004244:	637b      	str	r3, [r7, #52]	@ 0x34
 8004246:	2301      	movs	r3, #1
 8004248:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	f383 8810 	msr	PRIMASK, r3
}
 8004250:	46c0      	nop			@ (mov r8, r8)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4926      	ldr	r1, [pc, #152]	@ (80042f8 <UART_EndRxTransfer+0xc4>)
 800425e:	400a      	ands	r2, r1
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004264:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f383 8810 	msr	PRIMASK, r3
}
 800426c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800426e:	f3ef 8310 	mrs	r3, PRIMASK
 8004272:	623b      	str	r3, [r7, #32]
  return(result);
 8004274:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004276:	633b      	str	r3, [r7, #48]	@ 0x30
 8004278:	2301      	movs	r3, #1
 800427a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	f383 8810 	msr	PRIMASK, r3
}
 8004282:	46c0      	nop			@ (mov r8, r8)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2101      	movs	r1, #1
 8004290:	438a      	bics	r2, r1
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004296:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429a:	f383 8810 	msr	PRIMASK, r3
}
 800429e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d118      	bne.n	80042da <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a8:	f3ef 8310 	mrs	r3, PRIMASK
 80042ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80042ae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042b2:	2301      	movs	r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f383 8810 	msr	PRIMASK, r3
}
 80042bc:	46c0      	nop			@ (mov r8, r8)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2110      	movs	r1, #16
 80042ca:	438a      	bics	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f383 8810 	msr	PRIMASK, r3
}
 80042d8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2280      	movs	r2, #128	@ 0x80
 80042de:	2120      	movs	r1, #32
 80042e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80042ee:	46c0      	nop			@ (mov r8, r8)
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b00e      	add	sp, #56	@ 0x38
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			@ (mov r8, r8)
 80042f8:	fffffedf 	.word	0xfffffedf

080042fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	225a      	movs	r2, #90	@ 0x5a
 800430e:	2100      	movs	r1, #0
 8004310:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2252      	movs	r2, #82	@ 0x52
 8004316:	2100      	movs	r1, #0
 8004318:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	0018      	movs	r0, r3
 800431e:	f7ff fbc1 	bl	8003aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004322:	46c0      	nop			@ (mov r8, r8)
 8004324:	46bd      	mov	sp, r7
 8004326:	b004      	add	sp, #16
 8004328:	bd80      	pop	{r7, pc}

0800432a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b086      	sub	sp, #24
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004332:	f3ef 8310 	mrs	r3, PRIMASK
 8004336:	60bb      	str	r3, [r7, #8]
  return(result);
 8004338:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	2301      	movs	r3, #1
 800433e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f383 8810 	msr	PRIMASK, r3
}
 8004346:	46c0      	nop			@ (mov r8, r8)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2140      	movs	r1, #64	@ 0x40
 8004354:	438a      	bics	r2, r1
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f383 8810 	msr	PRIMASK, r3
}
 8004362:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	0018      	movs	r0, r3
 8004374:	f7ff fb8e 	bl	8003a94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004378:	46c0      	nop			@ (mov r8, r8)
 800437a:	46bd      	mov	sp, r7
 800437c:	b006      	add	sp, #24
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004388:	46c0      	nop			@ (mov r8, r8)
 800438a:	46bd      	mov	sp, r7
 800438c:	b002      	add	sp, #8
 800438e:	bd80      	pop	{r7, pc}

08004390 <siprintf>:
 8004390:	b40e      	push	{r1, r2, r3}
 8004392:	b500      	push	{lr}
 8004394:	490b      	ldr	r1, [pc, #44]	@ (80043c4 <siprintf+0x34>)
 8004396:	b09c      	sub	sp, #112	@ 0x70
 8004398:	ab1d      	add	r3, sp, #116	@ 0x74
 800439a:	9002      	str	r0, [sp, #8]
 800439c:	9006      	str	r0, [sp, #24]
 800439e:	9107      	str	r1, [sp, #28]
 80043a0:	9104      	str	r1, [sp, #16]
 80043a2:	4809      	ldr	r0, [pc, #36]	@ (80043c8 <siprintf+0x38>)
 80043a4:	4909      	ldr	r1, [pc, #36]	@ (80043cc <siprintf+0x3c>)
 80043a6:	cb04      	ldmia	r3!, {r2}
 80043a8:	9105      	str	r1, [sp, #20]
 80043aa:	6800      	ldr	r0, [r0, #0]
 80043ac:	a902      	add	r1, sp, #8
 80043ae:	9301      	str	r3, [sp, #4]
 80043b0:	f000 f9c2 	bl	8004738 <_svfiprintf_r>
 80043b4:	2200      	movs	r2, #0
 80043b6:	9b02      	ldr	r3, [sp, #8]
 80043b8:	701a      	strb	r2, [r3, #0]
 80043ba:	b01c      	add	sp, #112	@ 0x70
 80043bc:	bc08      	pop	{r3}
 80043be:	b003      	add	sp, #12
 80043c0:	4718      	bx	r3
 80043c2:	46c0      	nop			@ (mov r8, r8)
 80043c4:	7fffffff 	.word	0x7fffffff
 80043c8:	2000000c 	.word	0x2000000c
 80043cc:	ffff0208 	.word	0xffff0208

080043d0 <memset>:
 80043d0:	0003      	movs	r3, r0
 80043d2:	1882      	adds	r2, r0, r2
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d100      	bne.n	80043da <memset+0xa>
 80043d8:	4770      	bx	lr
 80043da:	7019      	strb	r1, [r3, #0]
 80043dc:	3301      	adds	r3, #1
 80043de:	e7f9      	b.n	80043d4 <memset+0x4>

080043e0 <strchr>:
 80043e0:	b2c9      	uxtb	r1, r1
 80043e2:	7803      	ldrb	r3, [r0, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <strchr+0x12>
 80043e8:	428b      	cmp	r3, r1
 80043ea:	d100      	bne.n	80043ee <strchr+0xe>
 80043ec:	4770      	bx	lr
 80043ee:	3001      	adds	r0, #1
 80043f0:	e7f7      	b.n	80043e2 <strchr+0x2>
 80043f2:	424b      	negs	r3, r1
 80043f4:	4159      	adcs	r1, r3
 80043f6:	4249      	negs	r1, r1
 80043f8:	4008      	ands	r0, r1
 80043fa:	e7f7      	b.n	80043ec <strchr+0xc>

080043fc <strstr>:
 80043fc:	780a      	ldrb	r2, [r1, #0]
 80043fe:	b530      	push	{r4, r5, lr}
 8004400:	2a00      	cmp	r2, #0
 8004402:	d10c      	bne.n	800441e <strstr+0x22>
 8004404:	bd30      	pop	{r4, r5, pc}
 8004406:	429a      	cmp	r2, r3
 8004408:	d108      	bne.n	800441c <strstr+0x20>
 800440a:	2301      	movs	r3, #1
 800440c:	5ccc      	ldrb	r4, [r1, r3]
 800440e:	2c00      	cmp	r4, #0
 8004410:	d0f8      	beq.n	8004404 <strstr+0x8>
 8004412:	5cc5      	ldrb	r5, [r0, r3]
 8004414:	42a5      	cmp	r5, r4
 8004416:	d101      	bne.n	800441c <strstr+0x20>
 8004418:	3301      	adds	r3, #1
 800441a:	e7f7      	b.n	800440c <strstr+0x10>
 800441c:	3001      	adds	r0, #1
 800441e:	7803      	ldrb	r3, [r0, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f0      	bne.n	8004406 <strstr+0xa>
 8004424:	0018      	movs	r0, r3
 8004426:	e7ed      	b.n	8004404 <strstr+0x8>

08004428 <__errno>:
 8004428:	4b01      	ldr	r3, [pc, #4]	@ (8004430 <__errno+0x8>)
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	4770      	bx	lr
 800442e:	46c0      	nop			@ (mov r8, r8)
 8004430:	2000000c 	.word	0x2000000c

08004434 <__libc_init_array>:
 8004434:	b570      	push	{r4, r5, r6, lr}
 8004436:	2600      	movs	r6, #0
 8004438:	4c0c      	ldr	r4, [pc, #48]	@ (800446c <__libc_init_array+0x38>)
 800443a:	4d0d      	ldr	r5, [pc, #52]	@ (8004470 <__libc_init_array+0x3c>)
 800443c:	1b64      	subs	r4, r4, r5
 800443e:	10a4      	asrs	r4, r4, #2
 8004440:	42a6      	cmp	r6, r4
 8004442:	d109      	bne.n	8004458 <__libc_init_array+0x24>
 8004444:	2600      	movs	r6, #0
 8004446:	f000 fc65 	bl	8004d14 <_init>
 800444a:	4c0a      	ldr	r4, [pc, #40]	@ (8004474 <__libc_init_array+0x40>)
 800444c:	4d0a      	ldr	r5, [pc, #40]	@ (8004478 <__libc_init_array+0x44>)
 800444e:	1b64      	subs	r4, r4, r5
 8004450:	10a4      	asrs	r4, r4, #2
 8004452:	42a6      	cmp	r6, r4
 8004454:	d105      	bne.n	8004462 <__libc_init_array+0x2e>
 8004456:	bd70      	pop	{r4, r5, r6, pc}
 8004458:	00b3      	lsls	r3, r6, #2
 800445a:	58eb      	ldr	r3, [r5, r3]
 800445c:	4798      	blx	r3
 800445e:	3601      	adds	r6, #1
 8004460:	e7ee      	b.n	8004440 <__libc_init_array+0xc>
 8004462:	00b3      	lsls	r3, r6, #2
 8004464:	58eb      	ldr	r3, [r5, r3]
 8004466:	4798      	blx	r3
 8004468:	3601      	adds	r6, #1
 800446a:	e7f2      	b.n	8004452 <__libc_init_array+0x1e>
 800446c:	08004fe0 	.word	0x08004fe0
 8004470:	08004fe0 	.word	0x08004fe0
 8004474:	08004fe4 	.word	0x08004fe4
 8004478:	08004fe0 	.word	0x08004fe0

0800447c <__retarget_lock_acquire_recursive>:
 800447c:	4770      	bx	lr

0800447e <__retarget_lock_release_recursive>:
 800447e:	4770      	bx	lr

08004480 <_free_r>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	0005      	movs	r5, r0
 8004484:	1e0c      	subs	r4, r1, #0
 8004486:	d010      	beq.n	80044aa <_free_r+0x2a>
 8004488:	3c04      	subs	r4, #4
 800448a:	6823      	ldr	r3, [r4, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	da00      	bge.n	8004492 <_free_r+0x12>
 8004490:	18e4      	adds	r4, r4, r3
 8004492:	0028      	movs	r0, r5
 8004494:	f000 f8e0 	bl	8004658 <__malloc_lock>
 8004498:	4a1d      	ldr	r2, [pc, #116]	@ (8004510 <_free_r+0x90>)
 800449a:	6813      	ldr	r3, [r2, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d105      	bne.n	80044ac <_free_r+0x2c>
 80044a0:	6063      	str	r3, [r4, #4]
 80044a2:	6014      	str	r4, [r2, #0]
 80044a4:	0028      	movs	r0, r5
 80044a6:	f000 f8df 	bl	8004668 <__malloc_unlock>
 80044aa:	bd70      	pop	{r4, r5, r6, pc}
 80044ac:	42a3      	cmp	r3, r4
 80044ae:	d908      	bls.n	80044c2 <_free_r+0x42>
 80044b0:	6820      	ldr	r0, [r4, #0]
 80044b2:	1821      	adds	r1, r4, r0
 80044b4:	428b      	cmp	r3, r1
 80044b6:	d1f3      	bne.n	80044a0 <_free_r+0x20>
 80044b8:	6819      	ldr	r1, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	1809      	adds	r1, r1, r0
 80044be:	6021      	str	r1, [r4, #0]
 80044c0:	e7ee      	b.n	80044a0 <_free_r+0x20>
 80044c2:	001a      	movs	r2, r3
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <_free_r+0x4e>
 80044ca:	42a3      	cmp	r3, r4
 80044cc:	d9f9      	bls.n	80044c2 <_free_r+0x42>
 80044ce:	6811      	ldr	r1, [r2, #0]
 80044d0:	1850      	adds	r0, r2, r1
 80044d2:	42a0      	cmp	r0, r4
 80044d4:	d10b      	bne.n	80044ee <_free_r+0x6e>
 80044d6:	6820      	ldr	r0, [r4, #0]
 80044d8:	1809      	adds	r1, r1, r0
 80044da:	1850      	adds	r0, r2, r1
 80044dc:	6011      	str	r1, [r2, #0]
 80044de:	4283      	cmp	r3, r0
 80044e0:	d1e0      	bne.n	80044a4 <_free_r+0x24>
 80044e2:	6818      	ldr	r0, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	1841      	adds	r1, r0, r1
 80044e8:	6011      	str	r1, [r2, #0]
 80044ea:	6053      	str	r3, [r2, #4]
 80044ec:	e7da      	b.n	80044a4 <_free_r+0x24>
 80044ee:	42a0      	cmp	r0, r4
 80044f0:	d902      	bls.n	80044f8 <_free_r+0x78>
 80044f2:	230c      	movs	r3, #12
 80044f4:	602b      	str	r3, [r5, #0]
 80044f6:	e7d5      	b.n	80044a4 <_free_r+0x24>
 80044f8:	6820      	ldr	r0, [r4, #0]
 80044fa:	1821      	adds	r1, r4, r0
 80044fc:	428b      	cmp	r3, r1
 80044fe:	d103      	bne.n	8004508 <_free_r+0x88>
 8004500:	6819      	ldr	r1, [r3, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	1809      	adds	r1, r1, r0
 8004506:	6021      	str	r1, [r4, #0]
 8004508:	6063      	str	r3, [r4, #4]
 800450a:	6054      	str	r4, [r2, #4]
 800450c:	e7ca      	b.n	80044a4 <_free_r+0x24>
 800450e:	46c0      	nop			@ (mov r8, r8)
 8004510:	20000448 	.word	0x20000448

08004514 <sbrk_aligned>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	4e0f      	ldr	r6, [pc, #60]	@ (8004554 <sbrk_aligned+0x40>)
 8004518:	000d      	movs	r5, r1
 800451a:	6831      	ldr	r1, [r6, #0]
 800451c:	0004      	movs	r4, r0
 800451e:	2900      	cmp	r1, #0
 8004520:	d102      	bne.n	8004528 <sbrk_aligned+0x14>
 8004522:	f000 fb99 	bl	8004c58 <_sbrk_r>
 8004526:	6030      	str	r0, [r6, #0]
 8004528:	0029      	movs	r1, r5
 800452a:	0020      	movs	r0, r4
 800452c:	f000 fb94 	bl	8004c58 <_sbrk_r>
 8004530:	1c43      	adds	r3, r0, #1
 8004532:	d103      	bne.n	800453c <sbrk_aligned+0x28>
 8004534:	2501      	movs	r5, #1
 8004536:	426d      	negs	r5, r5
 8004538:	0028      	movs	r0, r5
 800453a:	bd70      	pop	{r4, r5, r6, pc}
 800453c:	2303      	movs	r3, #3
 800453e:	1cc5      	adds	r5, r0, #3
 8004540:	439d      	bics	r5, r3
 8004542:	42a8      	cmp	r0, r5
 8004544:	d0f8      	beq.n	8004538 <sbrk_aligned+0x24>
 8004546:	1a29      	subs	r1, r5, r0
 8004548:	0020      	movs	r0, r4
 800454a:	f000 fb85 	bl	8004c58 <_sbrk_r>
 800454e:	3001      	adds	r0, #1
 8004550:	d1f2      	bne.n	8004538 <sbrk_aligned+0x24>
 8004552:	e7ef      	b.n	8004534 <sbrk_aligned+0x20>
 8004554:	20000444 	.word	0x20000444

08004558 <_malloc_r>:
 8004558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800455a:	2203      	movs	r2, #3
 800455c:	1ccb      	adds	r3, r1, #3
 800455e:	4393      	bics	r3, r2
 8004560:	3308      	adds	r3, #8
 8004562:	0005      	movs	r5, r0
 8004564:	001f      	movs	r7, r3
 8004566:	2b0c      	cmp	r3, #12
 8004568:	d234      	bcs.n	80045d4 <_malloc_r+0x7c>
 800456a:	270c      	movs	r7, #12
 800456c:	42b9      	cmp	r1, r7
 800456e:	d833      	bhi.n	80045d8 <_malloc_r+0x80>
 8004570:	0028      	movs	r0, r5
 8004572:	f000 f871 	bl	8004658 <__malloc_lock>
 8004576:	4e37      	ldr	r6, [pc, #220]	@ (8004654 <_malloc_r+0xfc>)
 8004578:	6833      	ldr	r3, [r6, #0]
 800457a:	001c      	movs	r4, r3
 800457c:	2c00      	cmp	r4, #0
 800457e:	d12f      	bne.n	80045e0 <_malloc_r+0x88>
 8004580:	0039      	movs	r1, r7
 8004582:	0028      	movs	r0, r5
 8004584:	f7ff ffc6 	bl	8004514 <sbrk_aligned>
 8004588:	0004      	movs	r4, r0
 800458a:	1c43      	adds	r3, r0, #1
 800458c:	d15f      	bne.n	800464e <_malloc_r+0xf6>
 800458e:	6834      	ldr	r4, [r6, #0]
 8004590:	9400      	str	r4, [sp, #0]
 8004592:	9b00      	ldr	r3, [sp, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d14a      	bne.n	800462e <_malloc_r+0xd6>
 8004598:	2c00      	cmp	r4, #0
 800459a:	d052      	beq.n	8004642 <_malloc_r+0xea>
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	0028      	movs	r0, r5
 80045a0:	18e3      	adds	r3, r4, r3
 80045a2:	9900      	ldr	r1, [sp, #0]
 80045a4:	9301      	str	r3, [sp, #4]
 80045a6:	f000 fb57 	bl	8004c58 <_sbrk_r>
 80045aa:	9b01      	ldr	r3, [sp, #4]
 80045ac:	4283      	cmp	r3, r0
 80045ae:	d148      	bne.n	8004642 <_malloc_r+0xea>
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	0028      	movs	r0, r5
 80045b4:	1aff      	subs	r7, r7, r3
 80045b6:	0039      	movs	r1, r7
 80045b8:	f7ff ffac 	bl	8004514 <sbrk_aligned>
 80045bc:	3001      	adds	r0, #1
 80045be:	d040      	beq.n	8004642 <_malloc_r+0xea>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	19db      	adds	r3, r3, r7
 80045c4:	6023      	str	r3, [r4, #0]
 80045c6:	6833      	ldr	r3, [r6, #0]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	2a00      	cmp	r2, #0
 80045cc:	d133      	bne.n	8004636 <_malloc_r+0xde>
 80045ce:	9b00      	ldr	r3, [sp, #0]
 80045d0:	6033      	str	r3, [r6, #0]
 80045d2:	e019      	b.n	8004608 <_malloc_r+0xb0>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	dac9      	bge.n	800456c <_malloc_r+0x14>
 80045d8:	230c      	movs	r3, #12
 80045da:	602b      	str	r3, [r5, #0]
 80045dc:	2000      	movs	r0, #0
 80045de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045e0:	6821      	ldr	r1, [r4, #0]
 80045e2:	1bc9      	subs	r1, r1, r7
 80045e4:	d420      	bmi.n	8004628 <_malloc_r+0xd0>
 80045e6:	290b      	cmp	r1, #11
 80045e8:	d90a      	bls.n	8004600 <_malloc_r+0xa8>
 80045ea:	19e2      	adds	r2, r4, r7
 80045ec:	6027      	str	r7, [r4, #0]
 80045ee:	42a3      	cmp	r3, r4
 80045f0:	d104      	bne.n	80045fc <_malloc_r+0xa4>
 80045f2:	6032      	str	r2, [r6, #0]
 80045f4:	6863      	ldr	r3, [r4, #4]
 80045f6:	6011      	str	r1, [r2, #0]
 80045f8:	6053      	str	r3, [r2, #4]
 80045fa:	e005      	b.n	8004608 <_malloc_r+0xb0>
 80045fc:	605a      	str	r2, [r3, #4]
 80045fe:	e7f9      	b.n	80045f4 <_malloc_r+0x9c>
 8004600:	6862      	ldr	r2, [r4, #4]
 8004602:	42a3      	cmp	r3, r4
 8004604:	d10e      	bne.n	8004624 <_malloc_r+0xcc>
 8004606:	6032      	str	r2, [r6, #0]
 8004608:	0028      	movs	r0, r5
 800460a:	f000 f82d 	bl	8004668 <__malloc_unlock>
 800460e:	0020      	movs	r0, r4
 8004610:	2207      	movs	r2, #7
 8004612:	300b      	adds	r0, #11
 8004614:	1d23      	adds	r3, r4, #4
 8004616:	4390      	bics	r0, r2
 8004618:	1ac2      	subs	r2, r0, r3
 800461a:	4298      	cmp	r0, r3
 800461c:	d0df      	beq.n	80045de <_malloc_r+0x86>
 800461e:	1a1b      	subs	r3, r3, r0
 8004620:	50a3      	str	r3, [r4, r2]
 8004622:	e7dc      	b.n	80045de <_malloc_r+0x86>
 8004624:	605a      	str	r2, [r3, #4]
 8004626:	e7ef      	b.n	8004608 <_malloc_r+0xb0>
 8004628:	0023      	movs	r3, r4
 800462a:	6864      	ldr	r4, [r4, #4]
 800462c:	e7a6      	b.n	800457c <_malloc_r+0x24>
 800462e:	9c00      	ldr	r4, [sp, #0]
 8004630:	6863      	ldr	r3, [r4, #4]
 8004632:	9300      	str	r3, [sp, #0]
 8004634:	e7ad      	b.n	8004592 <_malloc_r+0x3a>
 8004636:	001a      	movs	r2, r3
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	42a3      	cmp	r3, r4
 800463c:	d1fb      	bne.n	8004636 <_malloc_r+0xde>
 800463e:	2300      	movs	r3, #0
 8004640:	e7da      	b.n	80045f8 <_malloc_r+0xa0>
 8004642:	230c      	movs	r3, #12
 8004644:	0028      	movs	r0, r5
 8004646:	602b      	str	r3, [r5, #0]
 8004648:	f000 f80e 	bl	8004668 <__malloc_unlock>
 800464c:	e7c6      	b.n	80045dc <_malloc_r+0x84>
 800464e:	6007      	str	r7, [r0, #0]
 8004650:	e7da      	b.n	8004608 <_malloc_r+0xb0>
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	20000448 	.word	0x20000448

08004658 <__malloc_lock>:
 8004658:	b510      	push	{r4, lr}
 800465a:	4802      	ldr	r0, [pc, #8]	@ (8004664 <__malloc_lock+0xc>)
 800465c:	f7ff ff0e 	bl	800447c <__retarget_lock_acquire_recursive>
 8004660:	bd10      	pop	{r4, pc}
 8004662:	46c0      	nop			@ (mov r8, r8)
 8004664:	20000440 	.word	0x20000440

08004668 <__malloc_unlock>:
 8004668:	b510      	push	{r4, lr}
 800466a:	4802      	ldr	r0, [pc, #8]	@ (8004674 <__malloc_unlock+0xc>)
 800466c:	f7ff ff07 	bl	800447e <__retarget_lock_release_recursive>
 8004670:	bd10      	pop	{r4, pc}
 8004672:	46c0      	nop			@ (mov r8, r8)
 8004674:	20000440 	.word	0x20000440

08004678 <__ssputs_r>:
 8004678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800467a:	688e      	ldr	r6, [r1, #8]
 800467c:	b085      	sub	sp, #20
 800467e:	001f      	movs	r7, r3
 8004680:	000c      	movs	r4, r1
 8004682:	680b      	ldr	r3, [r1, #0]
 8004684:	9002      	str	r0, [sp, #8]
 8004686:	9203      	str	r2, [sp, #12]
 8004688:	42be      	cmp	r6, r7
 800468a:	d830      	bhi.n	80046ee <__ssputs_r+0x76>
 800468c:	210c      	movs	r1, #12
 800468e:	5e62      	ldrsh	r2, [r4, r1]
 8004690:	2190      	movs	r1, #144	@ 0x90
 8004692:	00c9      	lsls	r1, r1, #3
 8004694:	420a      	tst	r2, r1
 8004696:	d028      	beq.n	80046ea <__ssputs_r+0x72>
 8004698:	2003      	movs	r0, #3
 800469a:	6921      	ldr	r1, [r4, #16]
 800469c:	1a5b      	subs	r3, r3, r1
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	6963      	ldr	r3, [r4, #20]
 80046a2:	4343      	muls	r3, r0
 80046a4:	9801      	ldr	r0, [sp, #4]
 80046a6:	0fdd      	lsrs	r5, r3, #31
 80046a8:	18ed      	adds	r5, r5, r3
 80046aa:	1c7b      	adds	r3, r7, #1
 80046ac:	181b      	adds	r3, r3, r0
 80046ae:	106d      	asrs	r5, r5, #1
 80046b0:	42ab      	cmp	r3, r5
 80046b2:	d900      	bls.n	80046b6 <__ssputs_r+0x3e>
 80046b4:	001d      	movs	r5, r3
 80046b6:	0552      	lsls	r2, r2, #21
 80046b8:	d528      	bpl.n	800470c <__ssputs_r+0x94>
 80046ba:	0029      	movs	r1, r5
 80046bc:	9802      	ldr	r0, [sp, #8]
 80046be:	f7ff ff4b 	bl	8004558 <_malloc_r>
 80046c2:	1e06      	subs	r6, r0, #0
 80046c4:	d02c      	beq.n	8004720 <__ssputs_r+0xa8>
 80046c6:	9a01      	ldr	r2, [sp, #4]
 80046c8:	6921      	ldr	r1, [r4, #16]
 80046ca:	f000 fae2 	bl	8004c92 <memcpy>
 80046ce:	89a2      	ldrh	r2, [r4, #12]
 80046d0:	4b18      	ldr	r3, [pc, #96]	@ (8004734 <__ssputs_r+0xbc>)
 80046d2:	401a      	ands	r2, r3
 80046d4:	2380      	movs	r3, #128	@ 0x80
 80046d6:	4313      	orrs	r3, r2
 80046d8:	81a3      	strh	r3, [r4, #12]
 80046da:	9b01      	ldr	r3, [sp, #4]
 80046dc:	6126      	str	r6, [r4, #16]
 80046de:	18f6      	adds	r6, r6, r3
 80046e0:	6026      	str	r6, [r4, #0]
 80046e2:	003e      	movs	r6, r7
 80046e4:	6165      	str	r5, [r4, #20]
 80046e6:	1aed      	subs	r5, r5, r3
 80046e8:	60a5      	str	r5, [r4, #8]
 80046ea:	42be      	cmp	r6, r7
 80046ec:	d900      	bls.n	80046f0 <__ssputs_r+0x78>
 80046ee:	003e      	movs	r6, r7
 80046f0:	0032      	movs	r2, r6
 80046f2:	9903      	ldr	r1, [sp, #12]
 80046f4:	6820      	ldr	r0, [r4, #0]
 80046f6:	f000 fa9b 	bl	8004c30 <memmove>
 80046fa:	2000      	movs	r0, #0
 80046fc:	68a3      	ldr	r3, [r4, #8]
 80046fe:	1b9b      	subs	r3, r3, r6
 8004700:	60a3      	str	r3, [r4, #8]
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	199b      	adds	r3, r3, r6
 8004706:	6023      	str	r3, [r4, #0]
 8004708:	b005      	add	sp, #20
 800470a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800470c:	002a      	movs	r2, r5
 800470e:	9802      	ldr	r0, [sp, #8]
 8004710:	f000 fac8 	bl	8004ca4 <_realloc_r>
 8004714:	1e06      	subs	r6, r0, #0
 8004716:	d1e0      	bne.n	80046da <__ssputs_r+0x62>
 8004718:	6921      	ldr	r1, [r4, #16]
 800471a:	9802      	ldr	r0, [sp, #8]
 800471c:	f7ff feb0 	bl	8004480 <_free_r>
 8004720:	230c      	movs	r3, #12
 8004722:	2001      	movs	r0, #1
 8004724:	9a02      	ldr	r2, [sp, #8]
 8004726:	4240      	negs	r0, r0
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	89a2      	ldrh	r2, [r4, #12]
 800472c:	3334      	adds	r3, #52	@ 0x34
 800472e:	4313      	orrs	r3, r2
 8004730:	81a3      	strh	r3, [r4, #12]
 8004732:	e7e9      	b.n	8004708 <__ssputs_r+0x90>
 8004734:	fffffb7f 	.word	0xfffffb7f

08004738 <_svfiprintf_r>:
 8004738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800473a:	b0a1      	sub	sp, #132	@ 0x84
 800473c:	9003      	str	r0, [sp, #12]
 800473e:	001d      	movs	r5, r3
 8004740:	898b      	ldrh	r3, [r1, #12]
 8004742:	000f      	movs	r7, r1
 8004744:	0016      	movs	r6, r2
 8004746:	061b      	lsls	r3, r3, #24
 8004748:	d511      	bpl.n	800476e <_svfiprintf_r+0x36>
 800474a:	690b      	ldr	r3, [r1, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10e      	bne.n	800476e <_svfiprintf_r+0x36>
 8004750:	2140      	movs	r1, #64	@ 0x40
 8004752:	f7ff ff01 	bl	8004558 <_malloc_r>
 8004756:	6038      	str	r0, [r7, #0]
 8004758:	6138      	str	r0, [r7, #16]
 800475a:	2800      	cmp	r0, #0
 800475c:	d105      	bne.n	800476a <_svfiprintf_r+0x32>
 800475e:	230c      	movs	r3, #12
 8004760:	9a03      	ldr	r2, [sp, #12]
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	2001      	movs	r0, #1
 8004766:	4240      	negs	r0, r0
 8004768:	e0cf      	b.n	800490a <_svfiprintf_r+0x1d2>
 800476a:	2340      	movs	r3, #64	@ 0x40
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	2300      	movs	r3, #0
 8004770:	ac08      	add	r4, sp, #32
 8004772:	6163      	str	r3, [r4, #20]
 8004774:	3320      	adds	r3, #32
 8004776:	7663      	strb	r3, [r4, #25]
 8004778:	3310      	adds	r3, #16
 800477a:	76a3      	strb	r3, [r4, #26]
 800477c:	9507      	str	r5, [sp, #28]
 800477e:	0035      	movs	r5, r6
 8004780:	782b      	ldrb	r3, [r5, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <_svfiprintf_r+0x52>
 8004786:	2b25      	cmp	r3, #37	@ 0x25
 8004788:	d148      	bne.n	800481c <_svfiprintf_r+0xe4>
 800478a:	1bab      	subs	r3, r5, r6
 800478c:	9305      	str	r3, [sp, #20]
 800478e:	42b5      	cmp	r5, r6
 8004790:	d00b      	beq.n	80047aa <_svfiprintf_r+0x72>
 8004792:	0032      	movs	r2, r6
 8004794:	0039      	movs	r1, r7
 8004796:	9803      	ldr	r0, [sp, #12]
 8004798:	f7ff ff6e 	bl	8004678 <__ssputs_r>
 800479c:	3001      	adds	r0, #1
 800479e:	d100      	bne.n	80047a2 <_svfiprintf_r+0x6a>
 80047a0:	e0ae      	b.n	8004900 <_svfiprintf_r+0x1c8>
 80047a2:	6963      	ldr	r3, [r4, #20]
 80047a4:	9a05      	ldr	r2, [sp, #20]
 80047a6:	189b      	adds	r3, r3, r2
 80047a8:	6163      	str	r3, [r4, #20]
 80047aa:	782b      	ldrb	r3, [r5, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d100      	bne.n	80047b2 <_svfiprintf_r+0x7a>
 80047b0:	e0a6      	b.n	8004900 <_svfiprintf_r+0x1c8>
 80047b2:	2201      	movs	r2, #1
 80047b4:	2300      	movs	r3, #0
 80047b6:	4252      	negs	r2, r2
 80047b8:	6062      	str	r2, [r4, #4]
 80047ba:	a904      	add	r1, sp, #16
 80047bc:	3254      	adds	r2, #84	@ 0x54
 80047be:	1852      	adds	r2, r2, r1
 80047c0:	1c6e      	adds	r6, r5, #1
 80047c2:	6023      	str	r3, [r4, #0]
 80047c4:	60e3      	str	r3, [r4, #12]
 80047c6:	60a3      	str	r3, [r4, #8]
 80047c8:	7013      	strb	r3, [r2, #0]
 80047ca:	65a3      	str	r3, [r4, #88]	@ 0x58
 80047cc:	4b54      	ldr	r3, [pc, #336]	@ (8004920 <_svfiprintf_r+0x1e8>)
 80047ce:	2205      	movs	r2, #5
 80047d0:	0018      	movs	r0, r3
 80047d2:	7831      	ldrb	r1, [r6, #0]
 80047d4:	9305      	str	r3, [sp, #20]
 80047d6:	f000 fa51 	bl	8004c7c <memchr>
 80047da:	1c75      	adds	r5, r6, #1
 80047dc:	2800      	cmp	r0, #0
 80047de:	d11f      	bne.n	8004820 <_svfiprintf_r+0xe8>
 80047e0:	6822      	ldr	r2, [r4, #0]
 80047e2:	06d3      	lsls	r3, r2, #27
 80047e4:	d504      	bpl.n	80047f0 <_svfiprintf_r+0xb8>
 80047e6:	2353      	movs	r3, #83	@ 0x53
 80047e8:	a904      	add	r1, sp, #16
 80047ea:	185b      	adds	r3, r3, r1
 80047ec:	2120      	movs	r1, #32
 80047ee:	7019      	strb	r1, [r3, #0]
 80047f0:	0713      	lsls	r3, r2, #28
 80047f2:	d504      	bpl.n	80047fe <_svfiprintf_r+0xc6>
 80047f4:	2353      	movs	r3, #83	@ 0x53
 80047f6:	a904      	add	r1, sp, #16
 80047f8:	185b      	adds	r3, r3, r1
 80047fa:	212b      	movs	r1, #43	@ 0x2b
 80047fc:	7019      	strb	r1, [r3, #0]
 80047fe:	7833      	ldrb	r3, [r6, #0]
 8004800:	2b2a      	cmp	r3, #42	@ 0x2a
 8004802:	d016      	beq.n	8004832 <_svfiprintf_r+0xfa>
 8004804:	0035      	movs	r5, r6
 8004806:	2100      	movs	r1, #0
 8004808:	200a      	movs	r0, #10
 800480a:	68e3      	ldr	r3, [r4, #12]
 800480c:	782a      	ldrb	r2, [r5, #0]
 800480e:	1c6e      	adds	r6, r5, #1
 8004810:	3a30      	subs	r2, #48	@ 0x30
 8004812:	2a09      	cmp	r2, #9
 8004814:	d950      	bls.n	80048b8 <_svfiprintf_r+0x180>
 8004816:	2900      	cmp	r1, #0
 8004818:	d111      	bne.n	800483e <_svfiprintf_r+0x106>
 800481a:	e017      	b.n	800484c <_svfiprintf_r+0x114>
 800481c:	3501      	adds	r5, #1
 800481e:	e7af      	b.n	8004780 <_svfiprintf_r+0x48>
 8004820:	9b05      	ldr	r3, [sp, #20]
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	1ac0      	subs	r0, r0, r3
 8004826:	2301      	movs	r3, #1
 8004828:	4083      	lsls	r3, r0
 800482a:	4313      	orrs	r3, r2
 800482c:	002e      	movs	r6, r5
 800482e:	6023      	str	r3, [r4, #0]
 8004830:	e7cc      	b.n	80047cc <_svfiprintf_r+0x94>
 8004832:	9b07      	ldr	r3, [sp, #28]
 8004834:	1d19      	adds	r1, r3, #4
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	9107      	str	r1, [sp, #28]
 800483a:	2b00      	cmp	r3, #0
 800483c:	db01      	blt.n	8004842 <_svfiprintf_r+0x10a>
 800483e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004840:	e004      	b.n	800484c <_svfiprintf_r+0x114>
 8004842:	425b      	negs	r3, r3
 8004844:	60e3      	str	r3, [r4, #12]
 8004846:	2302      	movs	r3, #2
 8004848:	4313      	orrs	r3, r2
 800484a:	6023      	str	r3, [r4, #0]
 800484c:	782b      	ldrb	r3, [r5, #0]
 800484e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004850:	d10c      	bne.n	800486c <_svfiprintf_r+0x134>
 8004852:	786b      	ldrb	r3, [r5, #1]
 8004854:	2b2a      	cmp	r3, #42	@ 0x2a
 8004856:	d134      	bne.n	80048c2 <_svfiprintf_r+0x18a>
 8004858:	9b07      	ldr	r3, [sp, #28]
 800485a:	3502      	adds	r5, #2
 800485c:	1d1a      	adds	r2, r3, #4
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	9207      	str	r2, [sp, #28]
 8004862:	2b00      	cmp	r3, #0
 8004864:	da01      	bge.n	800486a <_svfiprintf_r+0x132>
 8004866:	2301      	movs	r3, #1
 8004868:	425b      	negs	r3, r3
 800486a:	9309      	str	r3, [sp, #36]	@ 0x24
 800486c:	4e2d      	ldr	r6, [pc, #180]	@ (8004924 <_svfiprintf_r+0x1ec>)
 800486e:	2203      	movs	r2, #3
 8004870:	0030      	movs	r0, r6
 8004872:	7829      	ldrb	r1, [r5, #0]
 8004874:	f000 fa02 	bl	8004c7c <memchr>
 8004878:	2800      	cmp	r0, #0
 800487a:	d006      	beq.n	800488a <_svfiprintf_r+0x152>
 800487c:	2340      	movs	r3, #64	@ 0x40
 800487e:	1b80      	subs	r0, r0, r6
 8004880:	4083      	lsls	r3, r0
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	3501      	adds	r5, #1
 8004886:	4313      	orrs	r3, r2
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	7829      	ldrb	r1, [r5, #0]
 800488c:	2206      	movs	r2, #6
 800488e:	4826      	ldr	r0, [pc, #152]	@ (8004928 <_svfiprintf_r+0x1f0>)
 8004890:	1c6e      	adds	r6, r5, #1
 8004892:	7621      	strb	r1, [r4, #24]
 8004894:	f000 f9f2 	bl	8004c7c <memchr>
 8004898:	2800      	cmp	r0, #0
 800489a:	d038      	beq.n	800490e <_svfiprintf_r+0x1d6>
 800489c:	4b23      	ldr	r3, [pc, #140]	@ (800492c <_svfiprintf_r+0x1f4>)
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d122      	bne.n	80048e8 <_svfiprintf_r+0x1b0>
 80048a2:	2207      	movs	r2, #7
 80048a4:	9b07      	ldr	r3, [sp, #28]
 80048a6:	3307      	adds	r3, #7
 80048a8:	4393      	bics	r3, r2
 80048aa:	3308      	adds	r3, #8
 80048ac:	9307      	str	r3, [sp, #28]
 80048ae:	6963      	ldr	r3, [r4, #20]
 80048b0:	9a04      	ldr	r2, [sp, #16]
 80048b2:	189b      	adds	r3, r3, r2
 80048b4:	6163      	str	r3, [r4, #20]
 80048b6:	e762      	b.n	800477e <_svfiprintf_r+0x46>
 80048b8:	4343      	muls	r3, r0
 80048ba:	0035      	movs	r5, r6
 80048bc:	2101      	movs	r1, #1
 80048be:	189b      	adds	r3, r3, r2
 80048c0:	e7a4      	b.n	800480c <_svfiprintf_r+0xd4>
 80048c2:	2300      	movs	r3, #0
 80048c4:	200a      	movs	r0, #10
 80048c6:	0019      	movs	r1, r3
 80048c8:	3501      	adds	r5, #1
 80048ca:	6063      	str	r3, [r4, #4]
 80048cc:	782a      	ldrb	r2, [r5, #0]
 80048ce:	1c6e      	adds	r6, r5, #1
 80048d0:	3a30      	subs	r2, #48	@ 0x30
 80048d2:	2a09      	cmp	r2, #9
 80048d4:	d903      	bls.n	80048de <_svfiprintf_r+0x1a6>
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0c8      	beq.n	800486c <_svfiprintf_r+0x134>
 80048da:	9109      	str	r1, [sp, #36]	@ 0x24
 80048dc:	e7c6      	b.n	800486c <_svfiprintf_r+0x134>
 80048de:	4341      	muls	r1, r0
 80048e0:	0035      	movs	r5, r6
 80048e2:	2301      	movs	r3, #1
 80048e4:	1889      	adds	r1, r1, r2
 80048e6:	e7f1      	b.n	80048cc <_svfiprintf_r+0x194>
 80048e8:	aa07      	add	r2, sp, #28
 80048ea:	9200      	str	r2, [sp, #0]
 80048ec:	0021      	movs	r1, r4
 80048ee:	003a      	movs	r2, r7
 80048f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004930 <_svfiprintf_r+0x1f8>)
 80048f2:	9803      	ldr	r0, [sp, #12]
 80048f4:	e000      	b.n	80048f8 <_svfiprintf_r+0x1c0>
 80048f6:	bf00      	nop
 80048f8:	9004      	str	r0, [sp, #16]
 80048fa:	9b04      	ldr	r3, [sp, #16]
 80048fc:	3301      	adds	r3, #1
 80048fe:	d1d6      	bne.n	80048ae <_svfiprintf_r+0x176>
 8004900:	89bb      	ldrh	r3, [r7, #12]
 8004902:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004904:	065b      	lsls	r3, r3, #25
 8004906:	d500      	bpl.n	800490a <_svfiprintf_r+0x1d2>
 8004908:	e72c      	b.n	8004764 <_svfiprintf_r+0x2c>
 800490a:	b021      	add	sp, #132	@ 0x84
 800490c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800490e:	aa07      	add	r2, sp, #28
 8004910:	9200      	str	r2, [sp, #0]
 8004912:	0021      	movs	r1, r4
 8004914:	003a      	movs	r2, r7
 8004916:	4b06      	ldr	r3, [pc, #24]	@ (8004930 <_svfiprintf_r+0x1f8>)
 8004918:	9803      	ldr	r0, [sp, #12]
 800491a:	f000 f87b 	bl	8004a14 <_printf_i>
 800491e:	e7eb      	b.n	80048f8 <_svfiprintf_r+0x1c0>
 8004920:	08004fac 	.word	0x08004fac
 8004924:	08004fb2 	.word	0x08004fb2
 8004928:	08004fb6 	.word	0x08004fb6
 800492c:	00000000 	.word	0x00000000
 8004930:	08004679 	.word	0x08004679

08004934 <_printf_common>:
 8004934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004936:	0016      	movs	r6, r2
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	688a      	ldr	r2, [r1, #8]
 800493c:	690b      	ldr	r3, [r1, #16]
 800493e:	000c      	movs	r4, r1
 8004940:	9000      	str	r0, [sp, #0]
 8004942:	4293      	cmp	r3, r2
 8004944:	da00      	bge.n	8004948 <_printf_common+0x14>
 8004946:	0013      	movs	r3, r2
 8004948:	0022      	movs	r2, r4
 800494a:	6033      	str	r3, [r6, #0]
 800494c:	3243      	adds	r2, #67	@ 0x43
 800494e:	7812      	ldrb	r2, [r2, #0]
 8004950:	2a00      	cmp	r2, #0
 8004952:	d001      	beq.n	8004958 <_printf_common+0x24>
 8004954:	3301      	adds	r3, #1
 8004956:	6033      	str	r3, [r6, #0]
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	069b      	lsls	r3, r3, #26
 800495c:	d502      	bpl.n	8004964 <_printf_common+0x30>
 800495e:	6833      	ldr	r3, [r6, #0]
 8004960:	3302      	adds	r3, #2
 8004962:	6033      	str	r3, [r6, #0]
 8004964:	6822      	ldr	r2, [r4, #0]
 8004966:	2306      	movs	r3, #6
 8004968:	0015      	movs	r5, r2
 800496a:	401d      	ands	r5, r3
 800496c:	421a      	tst	r2, r3
 800496e:	d027      	beq.n	80049c0 <_printf_common+0x8c>
 8004970:	0023      	movs	r3, r4
 8004972:	3343      	adds	r3, #67	@ 0x43
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	1e5a      	subs	r2, r3, #1
 8004978:	4193      	sbcs	r3, r2
 800497a:	6822      	ldr	r2, [r4, #0]
 800497c:	0692      	lsls	r2, r2, #26
 800497e:	d430      	bmi.n	80049e2 <_printf_common+0xae>
 8004980:	0022      	movs	r2, r4
 8004982:	9901      	ldr	r1, [sp, #4]
 8004984:	9800      	ldr	r0, [sp, #0]
 8004986:	9d08      	ldr	r5, [sp, #32]
 8004988:	3243      	adds	r2, #67	@ 0x43
 800498a:	47a8      	blx	r5
 800498c:	3001      	adds	r0, #1
 800498e:	d025      	beq.n	80049dc <_printf_common+0xa8>
 8004990:	2206      	movs	r2, #6
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	2500      	movs	r5, #0
 8004996:	4013      	ands	r3, r2
 8004998:	2b04      	cmp	r3, #4
 800499a:	d105      	bne.n	80049a8 <_printf_common+0x74>
 800499c:	6833      	ldr	r3, [r6, #0]
 800499e:	68e5      	ldr	r5, [r4, #12]
 80049a0:	1aed      	subs	r5, r5, r3
 80049a2:	43eb      	mvns	r3, r5
 80049a4:	17db      	asrs	r3, r3, #31
 80049a6:	401d      	ands	r5, r3
 80049a8:	68a3      	ldr	r3, [r4, #8]
 80049aa:	6922      	ldr	r2, [r4, #16]
 80049ac:	4293      	cmp	r3, r2
 80049ae:	dd01      	ble.n	80049b4 <_printf_common+0x80>
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	18ed      	adds	r5, r5, r3
 80049b4:	2600      	movs	r6, #0
 80049b6:	42b5      	cmp	r5, r6
 80049b8:	d120      	bne.n	80049fc <_printf_common+0xc8>
 80049ba:	2000      	movs	r0, #0
 80049bc:	e010      	b.n	80049e0 <_printf_common+0xac>
 80049be:	3501      	adds	r5, #1
 80049c0:	68e3      	ldr	r3, [r4, #12]
 80049c2:	6832      	ldr	r2, [r6, #0]
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	42ab      	cmp	r3, r5
 80049c8:	ddd2      	ble.n	8004970 <_printf_common+0x3c>
 80049ca:	0022      	movs	r2, r4
 80049cc:	2301      	movs	r3, #1
 80049ce:	9901      	ldr	r1, [sp, #4]
 80049d0:	9800      	ldr	r0, [sp, #0]
 80049d2:	9f08      	ldr	r7, [sp, #32]
 80049d4:	3219      	adds	r2, #25
 80049d6:	47b8      	blx	r7
 80049d8:	3001      	adds	r0, #1
 80049da:	d1f0      	bne.n	80049be <_printf_common+0x8a>
 80049dc:	2001      	movs	r0, #1
 80049de:	4240      	negs	r0, r0
 80049e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049e2:	2030      	movs	r0, #48	@ 0x30
 80049e4:	18e1      	adds	r1, r4, r3
 80049e6:	3143      	adds	r1, #67	@ 0x43
 80049e8:	7008      	strb	r0, [r1, #0]
 80049ea:	0021      	movs	r1, r4
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	3145      	adds	r1, #69	@ 0x45
 80049f0:	7809      	ldrb	r1, [r1, #0]
 80049f2:	18a2      	adds	r2, r4, r2
 80049f4:	3243      	adds	r2, #67	@ 0x43
 80049f6:	3302      	adds	r3, #2
 80049f8:	7011      	strb	r1, [r2, #0]
 80049fa:	e7c1      	b.n	8004980 <_printf_common+0x4c>
 80049fc:	0022      	movs	r2, r4
 80049fe:	2301      	movs	r3, #1
 8004a00:	9901      	ldr	r1, [sp, #4]
 8004a02:	9800      	ldr	r0, [sp, #0]
 8004a04:	9f08      	ldr	r7, [sp, #32]
 8004a06:	321a      	adds	r2, #26
 8004a08:	47b8      	blx	r7
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	d0e6      	beq.n	80049dc <_printf_common+0xa8>
 8004a0e:	3601      	adds	r6, #1
 8004a10:	e7d1      	b.n	80049b6 <_printf_common+0x82>
	...

08004a14 <_printf_i>:
 8004a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a16:	b08b      	sub	sp, #44	@ 0x2c
 8004a18:	9206      	str	r2, [sp, #24]
 8004a1a:	000a      	movs	r2, r1
 8004a1c:	3243      	adds	r2, #67	@ 0x43
 8004a1e:	9307      	str	r3, [sp, #28]
 8004a20:	9005      	str	r0, [sp, #20]
 8004a22:	9203      	str	r2, [sp, #12]
 8004a24:	7e0a      	ldrb	r2, [r1, #24]
 8004a26:	000c      	movs	r4, r1
 8004a28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004a2a:	2a78      	cmp	r2, #120	@ 0x78
 8004a2c:	d809      	bhi.n	8004a42 <_printf_i+0x2e>
 8004a2e:	2a62      	cmp	r2, #98	@ 0x62
 8004a30:	d80b      	bhi.n	8004a4a <_printf_i+0x36>
 8004a32:	2a00      	cmp	r2, #0
 8004a34:	d100      	bne.n	8004a38 <_printf_i+0x24>
 8004a36:	e0bc      	b.n	8004bb2 <_printf_i+0x19e>
 8004a38:	497b      	ldr	r1, [pc, #492]	@ (8004c28 <_printf_i+0x214>)
 8004a3a:	9104      	str	r1, [sp, #16]
 8004a3c:	2a58      	cmp	r2, #88	@ 0x58
 8004a3e:	d100      	bne.n	8004a42 <_printf_i+0x2e>
 8004a40:	e090      	b.n	8004b64 <_printf_i+0x150>
 8004a42:	0025      	movs	r5, r4
 8004a44:	3542      	adds	r5, #66	@ 0x42
 8004a46:	702a      	strb	r2, [r5, #0]
 8004a48:	e022      	b.n	8004a90 <_printf_i+0x7c>
 8004a4a:	0010      	movs	r0, r2
 8004a4c:	3863      	subs	r0, #99	@ 0x63
 8004a4e:	2815      	cmp	r0, #21
 8004a50:	d8f7      	bhi.n	8004a42 <_printf_i+0x2e>
 8004a52:	f7fb fb5f 	bl	8000114 <__gnu_thumb1_case_shi>
 8004a56:	0016      	.short	0x0016
 8004a58:	fff6001f 	.word	0xfff6001f
 8004a5c:	fff6fff6 	.word	0xfff6fff6
 8004a60:	001ffff6 	.word	0x001ffff6
 8004a64:	fff6fff6 	.word	0xfff6fff6
 8004a68:	fff6fff6 	.word	0xfff6fff6
 8004a6c:	003600a1 	.word	0x003600a1
 8004a70:	fff60080 	.word	0xfff60080
 8004a74:	00b2fff6 	.word	0x00b2fff6
 8004a78:	0036fff6 	.word	0x0036fff6
 8004a7c:	fff6fff6 	.word	0xfff6fff6
 8004a80:	0084      	.short	0x0084
 8004a82:	0025      	movs	r5, r4
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	3542      	adds	r5, #66	@ 0x42
 8004a88:	1d11      	adds	r1, r2, #4
 8004a8a:	6019      	str	r1, [r3, #0]
 8004a8c:	6813      	ldr	r3, [r2, #0]
 8004a8e:	702b      	strb	r3, [r5, #0]
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0a0      	b.n	8004bd6 <_printf_i+0x1c2>
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	6809      	ldr	r1, [r1, #0]
 8004a98:	1d02      	adds	r2, r0, #4
 8004a9a:	060d      	lsls	r5, r1, #24
 8004a9c:	d50b      	bpl.n	8004ab6 <_printf_i+0xa2>
 8004a9e:	6806      	ldr	r6, [r0, #0]
 8004aa0:	601a      	str	r2, [r3, #0]
 8004aa2:	2e00      	cmp	r6, #0
 8004aa4:	da03      	bge.n	8004aae <_printf_i+0x9a>
 8004aa6:	232d      	movs	r3, #45	@ 0x2d
 8004aa8:	9a03      	ldr	r2, [sp, #12]
 8004aaa:	4276      	negs	r6, r6
 8004aac:	7013      	strb	r3, [r2, #0]
 8004aae:	4b5e      	ldr	r3, [pc, #376]	@ (8004c28 <_printf_i+0x214>)
 8004ab0:	270a      	movs	r7, #10
 8004ab2:	9304      	str	r3, [sp, #16]
 8004ab4:	e018      	b.n	8004ae8 <_printf_i+0xd4>
 8004ab6:	6806      	ldr	r6, [r0, #0]
 8004ab8:	601a      	str	r2, [r3, #0]
 8004aba:	0649      	lsls	r1, r1, #25
 8004abc:	d5f1      	bpl.n	8004aa2 <_printf_i+0x8e>
 8004abe:	b236      	sxth	r6, r6
 8004ac0:	e7ef      	b.n	8004aa2 <_printf_i+0x8e>
 8004ac2:	6808      	ldr	r0, [r1, #0]
 8004ac4:	6819      	ldr	r1, [r3, #0]
 8004ac6:	c940      	ldmia	r1!, {r6}
 8004ac8:	0605      	lsls	r5, r0, #24
 8004aca:	d402      	bmi.n	8004ad2 <_printf_i+0xbe>
 8004acc:	0640      	lsls	r0, r0, #25
 8004ace:	d500      	bpl.n	8004ad2 <_printf_i+0xbe>
 8004ad0:	b2b6      	uxth	r6, r6
 8004ad2:	6019      	str	r1, [r3, #0]
 8004ad4:	4b54      	ldr	r3, [pc, #336]	@ (8004c28 <_printf_i+0x214>)
 8004ad6:	270a      	movs	r7, #10
 8004ad8:	9304      	str	r3, [sp, #16]
 8004ada:	2a6f      	cmp	r2, #111	@ 0x6f
 8004adc:	d100      	bne.n	8004ae0 <_printf_i+0xcc>
 8004ade:	3f02      	subs	r7, #2
 8004ae0:	0023      	movs	r3, r4
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	3343      	adds	r3, #67	@ 0x43
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	6863      	ldr	r3, [r4, #4]
 8004aea:	60a3      	str	r3, [r4, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	db03      	blt.n	8004af8 <_printf_i+0xe4>
 8004af0:	2104      	movs	r1, #4
 8004af2:	6822      	ldr	r2, [r4, #0]
 8004af4:	438a      	bics	r2, r1
 8004af6:	6022      	str	r2, [r4, #0]
 8004af8:	2e00      	cmp	r6, #0
 8004afa:	d102      	bne.n	8004b02 <_printf_i+0xee>
 8004afc:	9d03      	ldr	r5, [sp, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00c      	beq.n	8004b1c <_printf_i+0x108>
 8004b02:	9d03      	ldr	r5, [sp, #12]
 8004b04:	0030      	movs	r0, r6
 8004b06:	0039      	movs	r1, r7
 8004b08:	f7fb fb94 	bl	8000234 <__aeabi_uidivmod>
 8004b0c:	9b04      	ldr	r3, [sp, #16]
 8004b0e:	3d01      	subs	r5, #1
 8004b10:	5c5b      	ldrb	r3, [r3, r1]
 8004b12:	702b      	strb	r3, [r5, #0]
 8004b14:	0033      	movs	r3, r6
 8004b16:	0006      	movs	r6, r0
 8004b18:	429f      	cmp	r7, r3
 8004b1a:	d9f3      	bls.n	8004b04 <_printf_i+0xf0>
 8004b1c:	2f08      	cmp	r7, #8
 8004b1e:	d109      	bne.n	8004b34 <_printf_i+0x120>
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	07db      	lsls	r3, r3, #31
 8004b24:	d506      	bpl.n	8004b34 <_printf_i+0x120>
 8004b26:	6862      	ldr	r2, [r4, #4]
 8004b28:	6923      	ldr	r3, [r4, #16]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	dc02      	bgt.n	8004b34 <_printf_i+0x120>
 8004b2e:	2330      	movs	r3, #48	@ 0x30
 8004b30:	3d01      	subs	r5, #1
 8004b32:	702b      	strb	r3, [r5, #0]
 8004b34:	9b03      	ldr	r3, [sp, #12]
 8004b36:	1b5b      	subs	r3, r3, r5
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	9b07      	ldr	r3, [sp, #28]
 8004b3c:	0021      	movs	r1, r4
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	9805      	ldr	r0, [sp, #20]
 8004b42:	9b06      	ldr	r3, [sp, #24]
 8004b44:	aa09      	add	r2, sp, #36	@ 0x24
 8004b46:	f7ff fef5 	bl	8004934 <_printf_common>
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	d148      	bne.n	8004be0 <_printf_i+0x1cc>
 8004b4e:	2001      	movs	r0, #1
 8004b50:	4240      	negs	r0, r0
 8004b52:	b00b      	add	sp, #44	@ 0x2c
 8004b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b56:	2220      	movs	r2, #32
 8004b58:	6809      	ldr	r1, [r1, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	6022      	str	r2, [r4, #0]
 8004b5e:	2278      	movs	r2, #120	@ 0x78
 8004b60:	4932      	ldr	r1, [pc, #200]	@ (8004c2c <_printf_i+0x218>)
 8004b62:	9104      	str	r1, [sp, #16]
 8004b64:	0021      	movs	r1, r4
 8004b66:	3145      	adds	r1, #69	@ 0x45
 8004b68:	700a      	strb	r2, [r1, #0]
 8004b6a:	6819      	ldr	r1, [r3, #0]
 8004b6c:	6822      	ldr	r2, [r4, #0]
 8004b6e:	c940      	ldmia	r1!, {r6}
 8004b70:	0610      	lsls	r0, r2, #24
 8004b72:	d402      	bmi.n	8004b7a <_printf_i+0x166>
 8004b74:	0650      	lsls	r0, r2, #25
 8004b76:	d500      	bpl.n	8004b7a <_printf_i+0x166>
 8004b78:	b2b6      	uxth	r6, r6
 8004b7a:	6019      	str	r1, [r3, #0]
 8004b7c:	07d3      	lsls	r3, r2, #31
 8004b7e:	d502      	bpl.n	8004b86 <_printf_i+0x172>
 8004b80:	2320      	movs	r3, #32
 8004b82:	4313      	orrs	r3, r2
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	2e00      	cmp	r6, #0
 8004b88:	d001      	beq.n	8004b8e <_printf_i+0x17a>
 8004b8a:	2710      	movs	r7, #16
 8004b8c:	e7a8      	b.n	8004ae0 <_printf_i+0xcc>
 8004b8e:	2220      	movs	r2, #32
 8004b90:	6823      	ldr	r3, [r4, #0]
 8004b92:	4393      	bics	r3, r2
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	e7f8      	b.n	8004b8a <_printf_i+0x176>
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	680d      	ldr	r5, [r1, #0]
 8004b9c:	1d10      	adds	r0, r2, #4
 8004b9e:	6949      	ldr	r1, [r1, #20]
 8004ba0:	6018      	str	r0, [r3, #0]
 8004ba2:	6813      	ldr	r3, [r2, #0]
 8004ba4:	062e      	lsls	r6, r5, #24
 8004ba6:	d501      	bpl.n	8004bac <_printf_i+0x198>
 8004ba8:	6019      	str	r1, [r3, #0]
 8004baa:	e002      	b.n	8004bb2 <_printf_i+0x19e>
 8004bac:	066d      	lsls	r5, r5, #25
 8004bae:	d5fb      	bpl.n	8004ba8 <_printf_i+0x194>
 8004bb0:	8019      	strh	r1, [r3, #0]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	9d03      	ldr	r5, [sp, #12]
 8004bb6:	6123      	str	r3, [r4, #16]
 8004bb8:	e7bf      	b.n	8004b3a <_printf_i+0x126>
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	1d11      	adds	r1, r2, #4
 8004bbe:	6019      	str	r1, [r3, #0]
 8004bc0:	6815      	ldr	r5, [r2, #0]
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	0028      	movs	r0, r5
 8004bc6:	6862      	ldr	r2, [r4, #4]
 8004bc8:	f000 f858 	bl	8004c7c <memchr>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	d001      	beq.n	8004bd4 <_printf_i+0x1c0>
 8004bd0:	1b40      	subs	r0, r0, r5
 8004bd2:	6060      	str	r0, [r4, #4]
 8004bd4:	6863      	ldr	r3, [r4, #4]
 8004bd6:	6123      	str	r3, [r4, #16]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9a03      	ldr	r2, [sp, #12]
 8004bdc:	7013      	strb	r3, [r2, #0]
 8004bde:	e7ac      	b.n	8004b3a <_printf_i+0x126>
 8004be0:	002a      	movs	r2, r5
 8004be2:	6923      	ldr	r3, [r4, #16]
 8004be4:	9906      	ldr	r1, [sp, #24]
 8004be6:	9805      	ldr	r0, [sp, #20]
 8004be8:	9d07      	ldr	r5, [sp, #28]
 8004bea:	47a8      	blx	r5
 8004bec:	3001      	adds	r0, #1
 8004bee:	d0ae      	beq.n	8004b4e <_printf_i+0x13a>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	079b      	lsls	r3, r3, #30
 8004bf4:	d415      	bmi.n	8004c22 <_printf_i+0x20e>
 8004bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bf8:	68e0      	ldr	r0, [r4, #12]
 8004bfa:	4298      	cmp	r0, r3
 8004bfc:	daa9      	bge.n	8004b52 <_printf_i+0x13e>
 8004bfe:	0018      	movs	r0, r3
 8004c00:	e7a7      	b.n	8004b52 <_printf_i+0x13e>
 8004c02:	0022      	movs	r2, r4
 8004c04:	2301      	movs	r3, #1
 8004c06:	9906      	ldr	r1, [sp, #24]
 8004c08:	9805      	ldr	r0, [sp, #20]
 8004c0a:	9e07      	ldr	r6, [sp, #28]
 8004c0c:	3219      	adds	r2, #25
 8004c0e:	47b0      	blx	r6
 8004c10:	3001      	adds	r0, #1
 8004c12:	d09c      	beq.n	8004b4e <_printf_i+0x13a>
 8004c14:	3501      	adds	r5, #1
 8004c16:	68e3      	ldr	r3, [r4, #12]
 8004c18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	42ab      	cmp	r3, r5
 8004c1e:	dcf0      	bgt.n	8004c02 <_printf_i+0x1ee>
 8004c20:	e7e9      	b.n	8004bf6 <_printf_i+0x1e2>
 8004c22:	2500      	movs	r5, #0
 8004c24:	e7f7      	b.n	8004c16 <_printf_i+0x202>
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	08004fbd 	.word	0x08004fbd
 8004c2c:	08004fce 	.word	0x08004fce

08004c30 <memmove>:
 8004c30:	b510      	push	{r4, lr}
 8004c32:	4288      	cmp	r0, r1
 8004c34:	d806      	bhi.n	8004c44 <memmove+0x14>
 8004c36:	2300      	movs	r3, #0
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d008      	beq.n	8004c4e <memmove+0x1e>
 8004c3c:	5ccc      	ldrb	r4, [r1, r3]
 8004c3e:	54c4      	strb	r4, [r0, r3]
 8004c40:	3301      	adds	r3, #1
 8004c42:	e7f9      	b.n	8004c38 <memmove+0x8>
 8004c44:	188b      	adds	r3, r1, r2
 8004c46:	4298      	cmp	r0, r3
 8004c48:	d2f5      	bcs.n	8004c36 <memmove+0x6>
 8004c4a:	3a01      	subs	r2, #1
 8004c4c:	d200      	bcs.n	8004c50 <memmove+0x20>
 8004c4e:	bd10      	pop	{r4, pc}
 8004c50:	5c8b      	ldrb	r3, [r1, r2]
 8004c52:	5483      	strb	r3, [r0, r2]
 8004c54:	e7f9      	b.n	8004c4a <memmove+0x1a>
	...

08004c58 <_sbrk_r>:
 8004c58:	2300      	movs	r3, #0
 8004c5a:	b570      	push	{r4, r5, r6, lr}
 8004c5c:	4d06      	ldr	r5, [pc, #24]	@ (8004c78 <_sbrk_r+0x20>)
 8004c5e:	0004      	movs	r4, r0
 8004c60:	0008      	movs	r0, r1
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	f7fd fa10 	bl	8002088 <_sbrk>
 8004c68:	1c43      	adds	r3, r0, #1
 8004c6a:	d103      	bne.n	8004c74 <_sbrk_r+0x1c>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d000      	beq.n	8004c74 <_sbrk_r+0x1c>
 8004c72:	6023      	str	r3, [r4, #0]
 8004c74:	bd70      	pop	{r4, r5, r6, pc}
 8004c76:	46c0      	nop			@ (mov r8, r8)
 8004c78:	2000043c 	.word	0x2000043c

08004c7c <memchr>:
 8004c7c:	b2c9      	uxtb	r1, r1
 8004c7e:	1882      	adds	r2, r0, r2
 8004c80:	4290      	cmp	r0, r2
 8004c82:	d101      	bne.n	8004c88 <memchr+0xc>
 8004c84:	2000      	movs	r0, #0
 8004c86:	4770      	bx	lr
 8004c88:	7803      	ldrb	r3, [r0, #0]
 8004c8a:	428b      	cmp	r3, r1
 8004c8c:	d0fb      	beq.n	8004c86 <memchr+0xa>
 8004c8e:	3001      	adds	r0, #1
 8004c90:	e7f6      	b.n	8004c80 <memchr+0x4>

08004c92 <memcpy>:
 8004c92:	2300      	movs	r3, #0
 8004c94:	b510      	push	{r4, lr}
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d100      	bne.n	8004c9c <memcpy+0xa>
 8004c9a:	bd10      	pop	{r4, pc}
 8004c9c:	5ccc      	ldrb	r4, [r1, r3]
 8004c9e:	54c4      	strb	r4, [r0, r3]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	e7f8      	b.n	8004c96 <memcpy+0x4>

08004ca4 <_realloc_r>:
 8004ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ca6:	0006      	movs	r6, r0
 8004ca8:	000c      	movs	r4, r1
 8004caa:	0015      	movs	r5, r2
 8004cac:	2900      	cmp	r1, #0
 8004cae:	d105      	bne.n	8004cbc <_realloc_r+0x18>
 8004cb0:	0011      	movs	r1, r2
 8004cb2:	f7ff fc51 	bl	8004558 <_malloc_r>
 8004cb6:	0004      	movs	r4, r0
 8004cb8:	0020      	movs	r0, r4
 8004cba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cbc:	2a00      	cmp	r2, #0
 8004cbe:	d103      	bne.n	8004cc8 <_realloc_r+0x24>
 8004cc0:	f7ff fbde 	bl	8004480 <_free_r>
 8004cc4:	2400      	movs	r4, #0
 8004cc6:	e7f7      	b.n	8004cb8 <_realloc_r+0x14>
 8004cc8:	f000 f81b 	bl	8004d02 <_malloc_usable_size_r>
 8004ccc:	0007      	movs	r7, r0
 8004cce:	4285      	cmp	r5, r0
 8004cd0:	d802      	bhi.n	8004cd8 <_realloc_r+0x34>
 8004cd2:	0843      	lsrs	r3, r0, #1
 8004cd4:	42ab      	cmp	r3, r5
 8004cd6:	d3ef      	bcc.n	8004cb8 <_realloc_r+0x14>
 8004cd8:	0029      	movs	r1, r5
 8004cda:	0030      	movs	r0, r6
 8004cdc:	f7ff fc3c 	bl	8004558 <_malloc_r>
 8004ce0:	9001      	str	r0, [sp, #4]
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d0ee      	beq.n	8004cc4 <_realloc_r+0x20>
 8004ce6:	002a      	movs	r2, r5
 8004ce8:	42bd      	cmp	r5, r7
 8004cea:	d900      	bls.n	8004cee <_realloc_r+0x4a>
 8004cec:	003a      	movs	r2, r7
 8004cee:	0021      	movs	r1, r4
 8004cf0:	9801      	ldr	r0, [sp, #4]
 8004cf2:	f7ff ffce 	bl	8004c92 <memcpy>
 8004cf6:	0021      	movs	r1, r4
 8004cf8:	0030      	movs	r0, r6
 8004cfa:	f7ff fbc1 	bl	8004480 <_free_r>
 8004cfe:	9c01      	ldr	r4, [sp, #4]
 8004d00:	e7da      	b.n	8004cb8 <_realloc_r+0x14>

08004d02 <_malloc_usable_size_r>:
 8004d02:	1f0b      	subs	r3, r1, #4
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	1f18      	subs	r0, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	da01      	bge.n	8004d10 <_malloc_usable_size_r+0xe>
 8004d0c:	580b      	ldr	r3, [r1, r0]
 8004d0e:	18c0      	adds	r0, r0, r3
 8004d10:	4770      	bx	lr
	...

08004d14 <_init>:
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	46c0      	nop			@ (mov r8, r8)
 8004d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1a:	bc08      	pop	{r3}
 8004d1c:	469e      	mov	lr, r3
 8004d1e:	4770      	bx	lr

08004d20 <_fini>:
 8004d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d22:	46c0      	nop			@ (mov r8, r8)
 8004d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d26:	bc08      	pop	{r3}
 8004d28:	469e      	mov	lr, r3
 8004d2a:	4770      	bx	lr
