
49022WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a20  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  08004adc  08004adc  00005adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b8  080051b8  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  080051b8  080051b8  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051b8  080051b8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b8  080051b8  000061b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051bc  080051bc  000061bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080051c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  2000005c  0800521c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  0800521c  0000741c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a924  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f92  00000000  00000000  000119a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  00013940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000635  00000000  00000000  00014148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af92  00000000  00000000  0001477d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0f4  00000000  00000000  0002f70f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0998  00000000  00000000  0003b803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc19b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fc0  00000000  00000000  000dc1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000de1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000005c 	.word	0x2000005c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004ac4 	.word	0x08004ac4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000060 	.word	0x20000060
 8000100:	08004ac4 	.word	0x08004ac4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	@ 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			@ (mov r8, r8)

08000240 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b099      	sub	sp, #100	@ 0x64
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
 8000248:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 800024a:	f001 f849 	bl	80012e0 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 800024e:	4a6e      	ldr	r2, [pc, #440]	@ (8000408 <ESP_Init+0x1c8>)
 8000250:	4b6e      	ldr	r3, [pc, #440]	@ (800040c <ESP_Init+0x1cc>)
 8000252:	0011      	movs	r1, r2
 8000254:	0018      	movs	r0, r3
 8000256:	f001 f9df 	bl	8001618 <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 800025a:	4a6d      	ldr	r2, [pc, #436]	@ (8000410 <ESP_Init+0x1d0>)
 800025c:	4b6d      	ldr	r3, [pc, #436]	@ (8000414 <ESP_Init+0x1d4>)
 800025e:	0011      	movs	r1, r2
 8000260:	0018      	movs	r0, r3
 8000262:	f001 f9d9 	bl	8001618 <Uart_sendstring>
	for (int i=0; i<5; i++)
 8000266:	2300      	movs	r3, #0
 8000268:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800026a:	e00d      	b.n	8000288 <ESP_Init+0x48>
	{
		Uart_sendstring(".", pc_uart);
 800026c:	4a68      	ldr	r2, [pc, #416]	@ (8000410 <ESP_Init+0x1d0>)
 800026e:	4b6a      	ldr	r3, [pc, #424]	@ (8000418 <ESP_Init+0x1d8>)
 8000270:	0011      	movs	r1, r2
 8000272:	0018      	movs	r0, r3
 8000274:	f001 f9d0 	bl	8001618 <Uart_sendstring>
		HAL_Delay(1000);
 8000278:	23fa      	movs	r3, #250	@ 0xfa
 800027a:	009b      	lsls	r3, r3, #2
 800027c:	0018      	movs	r0, r3
 800027e:	f001 fea5 	bl	8001fcc <HAL_Delay>
	for (int i=0; i<5; i++)
 8000282:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000284:	3301      	adds	r3, #1
 8000286:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000288:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800028a:	2b04      	cmp	r3, #4
 800028c:	ddee      	ble.n	800026c <ESP_Init+0x2c>
	}

	/********* AT **********/
	Uart_sendstring("AT\r\n", wifi_uart);
 800028e:	4a5e      	ldr	r2, [pc, #376]	@ (8000408 <ESP_Init+0x1c8>)
 8000290:	4b62      	ldr	r3, [pc, #392]	@ (800041c <ESP_Init+0x1dc>)
 8000292:	0011      	movs	r1, r2
 8000294:	0018      	movs	r0, r3
 8000296:	f001 f9bf 	bl	8001618 <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n", wifi_uart)));
 800029a:	46c0      	nop			@ (mov r8, r8)
 800029c:	4a5a      	ldr	r2, [pc, #360]	@ (8000408 <ESP_Init+0x1c8>)
 800029e:	4b60      	ldr	r3, [pc, #384]	@ (8000420 <ESP_Init+0x1e0>)
 80002a0:	0011      	movs	r1, r2
 80002a2:	0018      	movs	r0, r3
 80002a4:	f001 fa50 	bl	8001748 <Wait_for>
 80002a8:	1e03      	subs	r3, r0, #0
 80002aa:	d0f7      	beq.n	800029c <ESP_Init+0x5c>
	Uart_sendstring("AT---->OK\n\n", pc_uart);
 80002ac:	4a58      	ldr	r2, [pc, #352]	@ (8000410 <ESP_Init+0x1d0>)
 80002ae:	4b5d      	ldr	r3, [pc, #372]	@ (8000424 <ESP_Init+0x1e4>)
 80002b0:	0011      	movs	r1, r2
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 f9b0 	bl	8001618 <Uart_sendstring>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 80002b8:	4a53      	ldr	r2, [pc, #332]	@ (8000408 <ESP_Init+0x1c8>)
 80002ba:	4b5b      	ldr	r3, [pc, #364]	@ (8000428 <ESP_Init+0x1e8>)
 80002bc:	0011      	movs	r1, r2
 80002be:	0018      	movs	r0, r3
 80002c0:	f001 f9aa 	bl	8001618 <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", wifi_uart)));
 80002c4:	46c0      	nop			@ (mov r8, r8)
 80002c6:	4a50      	ldr	r2, [pc, #320]	@ (8000408 <ESP_Init+0x1c8>)
 80002c8:	4b58      	ldr	r3, [pc, #352]	@ (800042c <ESP_Init+0x1ec>)
 80002ca:	0011      	movs	r1, r2
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 fa3b 	bl	8001748 <Wait_for>
 80002d2:	1e03      	subs	r3, r0, #0
 80002d4:	d0f7      	beq.n	80002c6 <ESP_Init+0x86>
	Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 80002d6:	4a4e      	ldr	r2, [pc, #312]	@ (8000410 <ESP_Init+0x1d0>)
 80002d8:	4b55      	ldr	r3, [pc, #340]	@ (8000430 <ESP_Init+0x1f0>)
 80002da:	0011      	movs	r1, r2
 80002dc:	0018      	movs	r0, r3
 80002de:	f001 f99b 	bl	8001618 <Uart_sendstring>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 80002e2:	4a4b      	ldr	r2, [pc, #300]	@ (8000410 <ESP_Init+0x1d0>)
 80002e4:	4b53      	ldr	r3, [pc, #332]	@ (8000434 <ESP_Init+0x1f4>)
 80002e6:	0011      	movs	r1, r2
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 f995 	bl	8001618 <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	687a      	ldr	r2, [r7, #4]
 80002f2:	4951      	ldr	r1, [pc, #324]	@ (8000438 <ESP_Init+0x1f8>)
 80002f4:	2408      	movs	r4, #8
 80002f6:	1938      	adds	r0, r7, r4
 80002f8:	f003 ff22 	bl	8004140 <siprintf>
	Uart_sendstring(data, wifi_uart);
 80002fc:	4a42      	ldr	r2, [pc, #264]	@ (8000408 <ESP_Init+0x1c8>)
 80002fe:	193b      	adds	r3, r7, r4
 8000300:	0011      	movs	r1, r2
 8000302:	0018      	movs	r0, r3
 8000304:	f001 f988 	bl	8001618 <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\r\n\r\nOK\r\n", SSID, PASSWD);
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	494b      	ldr	r1, [pc, #300]	@ (800043c <ESP_Init+0x1fc>)
 800030e:	1938      	adds	r0, r7, r4
 8000310:	f003 ff16 	bl	8004140 <siprintf>
	while (!(Wait_for(data, wifi_uart)));
 8000314:	46c0      	nop			@ (mov r8, r8)
 8000316:	4a3c      	ldr	r2, [pc, #240]	@ (8000408 <ESP_Init+0x1c8>)
 8000318:	2408      	movs	r4, #8
 800031a:	193b      	adds	r3, r7, r4
 800031c:	0011      	movs	r1, r2
 800031e:	0018      	movs	r0, r3
 8000320:	f001 fa12 	bl	8001748 <Wait_for>
 8000324:	1e03      	subs	r3, r0, #0
 8000326:	d0f6      	beq.n	8000316 <ESP_Init+0xd6>
//	while (!(Copy_upto("\"",buffer, wifi_uart)));
//	while (!(Wait_for("OK\r\n", wifi_uart)));
	sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 8000328:	687a      	ldr	r2, [r7, #4]
 800032a:	4945      	ldr	r1, [pc, #276]	@ (8000440 <ESP_Init+0x200>)
 800032c:	193b      	adds	r3, r7, r4
 800032e:	0018      	movs	r0, r3
 8000330:	f003 ff06 	bl	8004140 <siprintf>
	Uart_sendstring(data,pc_uart);
 8000334:	4a36      	ldr	r2, [pc, #216]	@ (8000410 <ESP_Init+0x1d0>)
 8000336:	193b      	adds	r3, r7, r4
 8000338:	0011      	movs	r1, r2
 800033a:	0018      	movs	r0, r3
 800033c:	f001 f96c 	bl	8001618 <Uart_sendstring>


	/********* AT+CIFSR **********/
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 8000340:	4a31      	ldr	r2, [pc, #196]	@ (8000408 <ESP_Init+0x1c8>)
 8000342:	4b40      	ldr	r3, [pc, #256]	@ (8000444 <ESP_Init+0x204>)
 8000344:	0011      	movs	r1, r2
 8000346:	0018      	movs	r0, r3
 8000348:	f001 f966 	bl	8001618 <Uart_sendstring>
	while (!(Wait_for("+CIFSR:STAIP,\"", wifi_uart)));
 800034c:	46c0      	nop			@ (mov r8, r8)
 800034e:	4a2e      	ldr	r2, [pc, #184]	@ (8000408 <ESP_Init+0x1c8>)
 8000350:	4b3d      	ldr	r3, [pc, #244]	@ (8000448 <ESP_Init+0x208>)
 8000352:	0011      	movs	r1, r2
 8000354:	0018      	movs	r0, r3
 8000356:	f001 f9f7 	bl	8001748 <Wait_for>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d0f7      	beq.n	800034e <ESP_Init+0x10e>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 800035e:	46c0      	nop			@ (mov r8, r8)
 8000360:	4a29      	ldr	r2, [pc, #164]	@ (8000408 <ESP_Init+0x1c8>)
 8000362:	493a      	ldr	r1, [pc, #232]	@ (800044c <ESP_Init+0x20c>)
 8000364:	4b3a      	ldr	r3, [pc, #232]	@ (8000450 <ESP_Init+0x210>)
 8000366:	0018      	movs	r0, r3
 8000368:	f001 f970 	bl	800164c <Copy_upto>
 800036c:	1e03      	subs	r3, r0, #0
 800036e:	d0f7      	beq.n	8000360 <ESP_Init+0x120>
//	while (!(Wait_for("OK\r\n", wifi_uart)));
	int len = strlen (buffer);
 8000370:	4b36      	ldr	r3, [pc, #216]	@ (800044c <ESP_Init+0x20c>)
 8000372:	0018      	movs	r0, r3
 8000374:	f7ff fec6 	bl	8000104 <strlen>
 8000378:	0003      	movs	r3, r0
 800037a:	65bb      	str	r3, [r7, #88]	@ 0x58
	buffer[len-1] = '\0';
 800037c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800037e:	3b01      	subs	r3, #1
 8000380:	4a32      	ldr	r2, [pc, #200]	@ (800044c <ESP_Init+0x20c>)
 8000382:	2100      	movs	r1, #0
 8000384:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\n\n", buffer);
 8000386:	4a31      	ldr	r2, [pc, #196]	@ (800044c <ESP_Init+0x20c>)
 8000388:	4932      	ldr	r1, [pc, #200]	@ (8000454 <ESP_Init+0x214>)
 800038a:	2408      	movs	r4, #8
 800038c:	193b      	adds	r3, r7, r4
 800038e:	0018      	movs	r0, r3
 8000390:	f003 fed6 	bl	8004140 <siprintf>
	Uart_sendstring(data, pc_uart);
 8000394:	4a1e      	ldr	r2, [pc, #120]	@ (8000410 <ESP_Init+0x1d0>)
 8000396:	193b      	adds	r3, r7, r4
 8000398:	0011      	movs	r1, r2
 800039a:	0018      	movs	r0, r3
 800039c:	f001 f93c 	bl	8001618 <Uart_sendstring>


	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 80003a0:	4a19      	ldr	r2, [pc, #100]	@ (8000408 <ESP_Init+0x1c8>)
 80003a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000458 <ESP_Init+0x218>)
 80003a4:	0011      	movs	r1, r2
 80003a6:	0018      	movs	r0, r3
 80003a8:	f001 f936 	bl	8001618 <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", wifi_uart)));
 80003ac:	46c0      	nop			@ (mov r8, r8)
 80003ae:	4a16      	ldr	r2, [pc, #88]	@ (8000408 <ESP_Init+0x1c8>)
 80003b0:	4b2a      	ldr	r3, [pc, #168]	@ (800045c <ESP_Init+0x21c>)
 80003b2:	0011      	movs	r1, r2
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 f9c7 	bl	8001748 <Wait_for>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d0f7      	beq.n	80003ae <ESP_Init+0x16e>
	Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 80003be:	4a14      	ldr	r2, [pc, #80]	@ (8000410 <ESP_Init+0x1d0>)
 80003c0:	4b27      	ldr	r3, [pc, #156]	@ (8000460 <ESP_Init+0x220>)
 80003c2:	0011      	movs	r1, r2
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 f927 	bl	8001618 <Uart_sendstring>

	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 80003ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000408 <ESP_Init+0x1c8>)
 80003cc:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <ESP_Init+0x224>)
 80003ce:	0011      	movs	r1, r2
 80003d0:	0018      	movs	r0, r3
 80003d2:	f001 f921 	bl	8001618 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80003d6:	46c0      	nop			@ (mov r8, r8)
 80003d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000408 <ESP_Init+0x1c8>)
 80003da:	4b23      	ldr	r3, [pc, #140]	@ (8000468 <ESP_Init+0x228>)
 80003dc:	0011      	movs	r1, r2
 80003de:	0018      	movs	r0, r3
 80003e0:	f001 f9b2 	bl	8001748 <Wait_for>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d0f7      	beq.n	80003d8 <ESP_Init+0x198>
	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 80003e8:	4a09      	ldr	r2, [pc, #36]	@ (8000410 <ESP_Init+0x1d0>)
 80003ea:	4b20      	ldr	r3, [pc, #128]	@ (800046c <ESP_Init+0x22c>)
 80003ec:	0011      	movs	r1, r2
 80003ee:	0018      	movs	r0, r3
 80003f0:	f001 f912 	bl	8001618 <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 80003f4:	4a06      	ldr	r2, [pc, #24]	@ (8000410 <ESP_Init+0x1d0>)
 80003f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000470 <ESP_Init+0x230>)
 80003f8:	0011      	movs	r1, r2
 80003fa:	0018      	movs	r0, r3
 80003fc:	f001 f90c 	bl	8001618 <Uart_sendstring>

}
 8000400:	46c0      	nop			@ (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	b019      	add	sp, #100	@ 0x64
 8000406:	bd90      	pop	{r4, r7, pc}
 8000408:	200001bc 	.word	0x200001bc
 800040c:	08004ef4 	.word	0x08004ef4
 8000410:	20000244 	.word	0x20000244
 8000414:	08004f00 	.word	0x08004f00
 8000418:	08004f0c 	.word	0x08004f0c
 800041c:	08004f10 	.word	0x08004f10
 8000420:	08004f18 	.word	0x08004f18
 8000424:	08004f24 	.word	0x08004f24
 8000428:	08004f30 	.word	0x08004f30
 800042c:	08004f40 	.word	0x08004f40
 8000430:	08004f58 	.word	0x08004f58
 8000434:	08004f68 	.word	0x08004f68
 8000438:	08004f8c 	.word	0x08004f8c
 800043c:	08004fa4 	.word	0x08004fa4
 8000440:	08004fc0 	.word	0x08004fc0
 8000444:	08004fd4 	.word	0x08004fd4
 8000448:	08004fe0 	.word	0x08004fe0
 800044c:	20000078 	.word	0x20000078
 8000450:	08004ff0 	.word	0x08004ff0
 8000454:	08004ff4 	.word	0x08004ff4
 8000458:	08005004 	.word	0x08005004
 800045c:	08005014 	.word	0x08005014
 8000460:	0800502c 	.word	0x0800502c
 8000464:	0800503c 	.word	0x0800503c
 8000468:	08005050 	.word	0x08005050
 800046c:	08005058 	.word	0x08005058
 8000470:	0800506c 	.word	0x0800506c

08000474 <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b099      	sub	sp, #100	@ 0x64
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	0018      	movs	r0, r3
 8000482:	f7ff fe3f 	bl	8000104 <strlen>
 8000486:	0003      	movs	r3, r0
 8000488:	65fb      	str	r3, [r7, #92]	@ 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 800048a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800048c:	683a      	ldr	r2, [r7, #0]
 800048e:	491f      	ldr	r1, [pc, #124]	@ (800050c <Server_Send+0x98>)
 8000490:	240c      	movs	r4, #12
 8000492:	1938      	adds	r0, r7, r4
 8000494:	f003 fe54 	bl	8004140 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000498:	4a1d      	ldr	r2, [pc, #116]	@ (8000510 <Server_Send+0x9c>)
 800049a:	193b      	adds	r3, r7, r4
 800049c:	0011      	movs	r1, r2
 800049e:	0018      	movs	r0, r3
 80004a0:	f001 f8ba 	bl	8001618 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 80004a4:	46c0      	nop			@ (mov r8, r8)
 80004a6:	4a1a      	ldr	r2, [pc, #104]	@ (8000510 <Server_Send+0x9c>)
 80004a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000514 <Server_Send+0xa0>)
 80004aa:	0011      	movs	r1, r2
 80004ac:	0018      	movs	r0, r3
 80004ae:	f001 f94b 	bl	8001748 <Wait_for>
 80004b2:	1e03      	subs	r3, r0, #0
 80004b4:	d0f7      	beq.n	80004a6 <Server_Send+0x32>
	Uart_sendstring (str, wifi_uart);
 80004b6:	4a16      	ldr	r2, [pc, #88]	@ (8000510 <Server_Send+0x9c>)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	0011      	movs	r1, r2
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 f8ab 	bl	8001618 <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	4a12      	ldr	r2, [pc, #72]	@ (8000510 <Server_Send+0x9c>)
 80004c6:	4b14      	ldr	r3, [pc, #80]	@ (8000518 <Server_Send+0xa4>)
 80004c8:	0011      	movs	r1, r2
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 f93c 	bl	8001748 <Wait_for>
 80004d0:	1e03      	subs	r3, r0, #0
 80004d2:	d0f7      	beq.n	80004c4 <Server_Send+0x50>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 80004d4:	4a11      	ldr	r2, [pc, #68]	@ (800051c <Server_Send+0xa8>)
 80004d6:	240c      	movs	r4, #12
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0011      	movs	r1, r2
 80004dc:	0018      	movs	r0, r3
 80004de:	f003 fe2f 	bl	8004140 <siprintf>
	Uart_sendstring(data, wifi_uart);
 80004e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000510 <Server_Send+0x9c>)
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	0011      	movs	r1, r2
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 f895 	bl	8001618 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	4a07      	ldr	r2, [pc, #28]	@ (8000510 <Server_Send+0x9c>)
 80004f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000520 <Server_Send+0xac>)
 80004f4:	0011      	movs	r1, r2
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 f926 	bl	8001748 <Wait_for>
 80004fc:	1e03      	subs	r3, r0, #0
 80004fe:	d0f7      	beq.n	80004f0 <Server_Send+0x7c>
	return 1;
 8000500:	2301      	movs	r3, #1
}
 8000502:	0018      	movs	r0, r3
 8000504:	46bd      	mov	sp, r7
 8000506:	b019      	add	sp, #100	@ 0x64
 8000508:	bd90      	pop	{r4, r7, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	0800508c 	.word	0x0800508c
 8000510:	200001bc 	.word	0x200001bc
 8000514:	080050a0 	.word	0x080050a0
 8000518:	080050a4 	.word	0x080050a4
 800051c:	080050ac 	.word	0x080050ac
 8000520:	08005050 	.word	0x08005050

08000524 <Server_Start>:
	}

}

void Server_Start (void)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	4c5e      	ldr	r4, [pc, #376]	@ (80006a0 <Server_Start+0x17c>)
 8000528:	44a5      	add	sp, r4
 800052a:	af00      	add	r7, sp, #0

	char response[256];
	char buffer[512];
	int Link_ID;

	if (Wait_for("+IPD,", wifi_uart) == 1)
 800052c:	4a5d      	ldr	r2, [pc, #372]	@ (80006a4 <Server_Start+0x180>)
 800052e:	4b5e      	ldr	r3, [pc, #376]	@ (80006a8 <Server_Start+0x184>)
 8000530:	0011      	movs	r1, r2
 8000532:	0018      	movs	r0, r3
 8000534:	f001 f908 	bl	8001748 <Wait_for>
 8000538:	0003      	movs	r3, r0
 800053a:	2b01      	cmp	r3, #1
 800053c:	d000      	beq.n	8000540 <Server_Start+0x1c>
 800053e:	e0a8      	b.n	8000692 <Server_Start+0x16e>
	{
		// Get Link ID
		char link_id_char;
		while (!IsDataAvailable(wifi_uart));
 8000540:	46c0      	nop			@ (mov r8, r8)
 8000542:	4b58      	ldr	r3, [pc, #352]	@ (80006a4 <Server_Start+0x180>)
 8000544:	0018      	movs	r0, r3
 8000546:	f001 f82d 	bl	80015a4 <IsDataAvailable>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d0f9      	beq.n	8000542 <Server_Start+0x1e>
		link_id_char = Uart_read(wifi_uart);
 800054e:	4b55      	ldr	r3, [pc, #340]	@ (80006a4 <Server_Start+0x180>)
 8000550:	0018      	movs	r0, r3
 8000552:	f000 ff69 	bl	8001428 <Uart_read>
 8000556:	0002      	movs	r2, r0
 8000558:	4954      	ldr	r1, [pc, #336]	@ (80006ac <Server_Start+0x188>)
 800055a:	187b      	adds	r3, r7, r1
 800055c:	701a      	strb	r2, [r3, #0]
		Link_ID = link_id_char - '0';
 800055e:	187b      	adds	r3, r7, r1
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	3b30      	subs	r3, #48	@ 0x30
 8000564:	22c3      	movs	r2, #195	@ 0xc3
 8000566:	0092      	lsls	r2, r2, #2
 8000568:	18ba      	adds	r2, r7, r2
 800056a:	6013      	str	r3, [r2, #0]

		// Skip until ':' (start of data)
		while (Uart_read(wifi_uart) != ':');
 800056c:	46c0      	nop			@ (mov r8, r8)
 800056e:	4b4d      	ldr	r3, [pc, #308]	@ (80006a4 <Server_Start+0x180>)
 8000570:	0018      	movs	r0, r3
 8000572:	f000 ff59 	bl	8001428 <Uart_read>
 8000576:	0003      	movs	r3, r0
 8000578:	2b3a      	cmp	r3, #58	@ 0x3a
 800057a:	d1f8      	bne.n	800056e <Server_Start+0x4a>

		// Read request line (GET /?... HTTP/1.1)
		int i = 0;
 800057c:	2300      	movs	r3, #0
 800057e:	22c5      	movs	r2, #197	@ 0xc5
 8000580:	0092      	lsls	r2, r2, #2
 8000582:	18ba      	adds	r2, r7, r2
 8000584:	6013      	str	r3, [r2, #0]
//		int char_count = 0;
		while (1)
		{
			while (!IsDataAvailable(wifi_uart));
 8000586:	46c0      	nop			@ (mov r8, r8)
 8000588:	4b46      	ldr	r3, [pc, #280]	@ (80006a4 <Server_Start+0x180>)
 800058a:	0018      	movs	r0, r3
 800058c:	f001 f80a 	bl	80015a4 <IsDataAvailable>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d0f9      	beq.n	8000588 <Server_Start+0x64>
			char c = Uart_read(wifi_uart);
 8000594:	4b43      	ldr	r3, [pc, #268]	@ (80006a4 <Server_Start+0x180>)
 8000596:	0018      	movs	r0, r3
 8000598:	f000 ff46 	bl	8001428 <Uart_read>
 800059c:	0002      	movs	r2, r0
 800059e:	4844      	ldr	r0, [pc, #272]	@ (80006b0 <Server_Start+0x18c>)
 80005a0:	183b      	adds	r3, r7, r0
 80005a2:	701a      	strb	r2, [r3, #0]
			if (c == '\n' || i >= sizeof(buffer) - 1) break;
 80005a4:	183b      	adds	r3, r7, r0
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b0a      	cmp	r3, #10
 80005aa:	d015      	beq.n	80005d8 <Server_Start+0xb4>
 80005ac:	21c5      	movs	r1, #197	@ 0xc5
 80005ae:	0089      	lsls	r1, r1, #2
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	23ff      	movs	r3, #255	@ 0xff
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d80d      	bhi.n	80005d8 <Server_Start+0xb4>
			buffer[i++] = c;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	1c5a      	adds	r2, r3, #1
 80005c2:	1879      	adds	r1, r7, r1
 80005c4:	600a      	str	r2, [r1, #0]
 80005c6:	4a3b      	ldr	r2, [pc, #236]	@ (80006b4 <Server_Start+0x190>)
 80005c8:	21c6      	movs	r1, #198	@ 0xc6
 80005ca:	0089      	lsls	r1, r1, #2
 80005cc:	1852      	adds	r2, r2, r1
 80005ce:	19d2      	adds	r2, r2, r7
 80005d0:	1839      	adds	r1, r7, r0
 80005d2:	7809      	ldrb	r1, [r1, #0]
 80005d4:	54d1      	strb	r1, [r2, r3]
		{
 80005d6:	e7d6      	b.n	8000586 <Server_Start+0x62>
		}
		buffer[i] = '\0';
 80005d8:	4b36      	ldr	r3, [pc, #216]	@ (80006b4 <Server_Start+0x190>)
 80005da:	22c6      	movs	r2, #198	@ 0xc6
 80005dc:	0092      	lsls	r2, r2, #2
 80005de:	189b      	adds	r3, r3, r2
 80005e0:	19da      	adds	r2, r3, r7
 80005e2:	23c5      	movs	r3, #197	@ 0xc5
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	18fb      	adds	r3, r7, r3
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	18d3      	adds	r3, r2, r3
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]

		// Parse GET parameters
		char *param_start = strstr(buffer, "GET /?");
 80005f0:	4a31      	ldr	r2, [pc, #196]	@ (80006b8 <Server_Start+0x194>)
 80005f2:	003b      	movs	r3, r7
 80005f4:	0011      	movs	r1, r2
 80005f6:	0018      	movs	r0, r3
 80005f8:	f003 fdd8 	bl	80041ac <strstr>
 80005fc:	0003      	movs	r3, r0
 80005fe:	24c1      	movs	r4, #193	@ 0xc1
 8000600:	00a4      	lsls	r4, r4, #2
 8000602:	193a      	adds	r2, r7, r4
 8000604:	6013      	str	r3, [r2, #0]
		if (param_start)
 8000606:	193b      	adds	r3, r7, r4
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d030      	beq.n	8000670 <Server_Start+0x14c>
		{
			param_start += strlen("GET /?");
 800060e:	193b      	adds	r3, r7, r4
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3306      	adds	r3, #6
 8000614:	193a      	adds	r2, r7, r4
 8000616:	6013      	str	r3, [r2, #0]
			char *param_end = strchr(param_start, ' ');
 8000618:	193b      	adds	r3, r7, r4
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2120      	movs	r1, #32
 800061e:	0018      	movs	r0, r3
 8000620:	f003 fdb6 	bl	8004190 <strchr>
 8000624:	0003      	movs	r3, r0
 8000626:	22c0      	movs	r2, #192	@ 0xc0
 8000628:	0092      	lsls	r2, r2, #2
 800062a:	18b9      	adds	r1, r7, r2
 800062c:	600b      	str	r3, [r1, #0]
			if (param_end)
 800062e:	18bb      	adds	r3, r7, r2
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d01c      	beq.n	8000670 <Server_Start+0x14c>
			{
				*param_end = '\0'; // Null-terminate param string
 8000636:	18bb      	adds	r3, r7, r2
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
//					}
//
//				}

				// Optional debug
				Uart_sendstring("GET parameters: ", pc_uart);
 800063e:	4a1f      	ldr	r2, [pc, #124]	@ (80006bc <Server_Start+0x198>)
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <Server_Start+0x19c>)
 8000642:	0011      	movs	r1, r2
 8000644:	0018      	movs	r0, r3
 8000646:	f000 ffe7 	bl	8001618 <Uart_sendstring>
				Uart_sendstring(param_start, pc_uart);
 800064a:	4a1c      	ldr	r2, [pc, #112]	@ (80006bc <Server_Start+0x198>)
 800064c:	193b      	adds	r3, r7, r4
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	0011      	movs	r1, r2
 8000652:	0018      	movs	r0, r3
 8000654:	f000 ffe0 	bl	8001618 <Uart_sendstring>
				Uart_sendstring("\n", pc_uart);
 8000658:	4a18      	ldr	r2, [pc, #96]	@ (80006bc <Server_Start+0x198>)
 800065a:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <Server_Start+0x1a0>)
 800065c:	0011      	movs	r1, r2
 800065e:	0018      	movs	r0, r3
 8000660:	f000 ffda 	bl	8001618 <Uart_sendstring>

//				Reset_Braille();
				Handle_Braille(param_start[0]);
 8000664:	193b      	adds	r3, r7, r4
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	0018      	movs	r0, r3
 800066c:	f000 f82e 	bl	80006cc <Handle_Braille>
			}
		}

		// Send back a barebones HTTP response
		sprintf(response,
 8000670:	4a15      	ldr	r2, [pc, #84]	@ (80006c8 <Server_Start+0x1a4>)
 8000672:	2480      	movs	r4, #128	@ 0x80
 8000674:	00a4      	lsls	r4, r4, #2
 8000676:	193b      	adds	r3, r7, r4
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f003 fd60 	bl	8004140 <siprintf>
			"HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\nOK\r\n");

		Server_Send(response, Link_ID);
 8000680:	23c3      	movs	r3, #195	@ 0xc3
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	193b      	adds	r3, r7, r4
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f7ff fef1 	bl	8000474 <Server_Send>
	}
}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	23c7      	movs	r3, #199	@ 0xc7
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	449d      	add	sp, r3
 800069c:	bd90      	pop	{r4, r7, pc}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	fffffce4 	.word	0xfffffce4
 80006a4:	200001bc 	.word	0x200001bc
 80006a8:	080050cc 	.word	0x080050cc
 80006ac:	00000313 	.word	0x00000313
 80006b0:	0000030b 	.word	0x0000030b
 80006b4:	fffffce8 	.word	0xfffffce8
 80006b8:	080050d4 	.word	0x080050d4
 80006bc:	20000244 	.word	0x20000244
 80006c0:	080050dc 	.word	0x080050dc
 80006c4:	080050f0 	.word	0x080050f0
 80006c8:	080050f4 	.word	0x080050f4

080006cc <Handle_Braille>:
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);


}

void Handle_Braille (char letter) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	0002      	movs	r2, r0
 80006d4:	1dfb      	adds	r3, r7, #7
 80006d6:	701a      	strb	r2, [r3, #0]
	  if(letter == 'a' || letter == 'A')
 80006d8:	1dfb      	adds	r3, r7, #7
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b61      	cmp	r3, #97	@ 0x61
 80006de:	d003      	beq.n	80006e8 <Handle_Braille+0x1c>
 80006e0:	1dfb      	adds	r3, r7, #7
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b41      	cmp	r3, #65	@ 0x41
 80006e6:	d12b      	bne.n	8000740 <Handle_Braille+0x74>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80006e8:	2380      	movs	r3, #128	@ 0x80
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	48e4      	ldr	r0, [pc, #912]	@ (8000a80 <Handle_Braille+0x3b4>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	0019      	movs	r1, r3
 80006f2:	f001 ff63 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 80006f6:	2380      	movs	r3, #128	@ 0x80
 80006f8:	011b      	lsls	r3, r3, #4
 80006fa:	48e1      	ldr	r0, [pc, #900]	@ (8000a80 <Handle_Braille+0x3b4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	0019      	movs	r1, r3
 8000700:	f001 ff5c 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000704:	2380      	movs	r3, #128	@ 0x80
 8000706:	015b      	lsls	r3, r3, #5
 8000708:	48dd      	ldr	r0, [pc, #884]	@ (8000a80 <Handle_Braille+0x3b4>)
 800070a:	2200      	movs	r2, #0
 800070c:	0019      	movs	r1, r3
 800070e:	f001 ff55 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000712:	2380      	movs	r3, #128	@ 0x80
 8000714:	019b      	lsls	r3, r3, #6
 8000716:	48da      	ldr	r0, [pc, #872]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000718:	2200      	movs	r2, #0
 800071a:	0019      	movs	r1, r3
 800071c:	f001 ff4e 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000720:	2380      	movs	r3, #128	@ 0x80
 8000722:	01db      	lsls	r3, r3, #7
 8000724:	48d6      	ldr	r0, [pc, #856]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000726:	2200      	movs	r2, #0
 8000728:	0019      	movs	r1, r3
 800072a:	f001 ff47 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 800072e:	2380      	movs	r3, #128	@ 0x80
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	48d3      	ldr	r0, [pc, #844]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000734:	2201      	movs	r2, #1
 8000736:	0019      	movs	r1, r3
 8000738:	f001 ff40 	bl	80025bc <HAL_GPIO_WritePin>
 800073c:	f000 fdc9 	bl	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'b' || letter == 'B')
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b62      	cmp	r3, #98	@ 0x62
 8000746:	d003      	beq.n	8000750 <Handle_Braille+0x84>
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2b42      	cmp	r3, #66	@ 0x42
 800074e:	d12b      	bne.n	80007a8 <Handle_Braille+0xdc>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000750:	2380      	movs	r3, #128	@ 0x80
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	48ca      	ldr	r0, [pc, #808]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000756:	2200      	movs	r2, #0
 8000758:	0019      	movs	r1, r3
 800075a:	f001 ff2f 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 800075e:	2380      	movs	r3, #128	@ 0x80
 8000760:	011b      	lsls	r3, r3, #4
 8000762:	48c7      	ldr	r0, [pc, #796]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000764:	2200      	movs	r2, #0
 8000766:	0019      	movs	r1, r3
 8000768:	f001 ff28 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800076c:	2380      	movs	r3, #128	@ 0x80
 800076e:	015b      	lsls	r3, r3, #5
 8000770:	48c3      	ldr	r0, [pc, #780]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000772:	2200      	movs	r2, #0
 8000774:	0019      	movs	r1, r3
 8000776:	f001 ff21 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 800077a:	2380      	movs	r3, #128	@ 0x80
 800077c:	019b      	lsls	r3, r3, #6
 800077e:	48c0      	ldr	r0, [pc, #768]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000780:	2200      	movs	r2, #0
 8000782:	0019      	movs	r1, r3
 8000784:	f001 ff1a 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000788:	2380      	movs	r3, #128	@ 0x80
 800078a:	01db      	lsls	r3, r3, #7
 800078c:	48bc      	ldr	r0, [pc, #752]	@ (8000a80 <Handle_Braille+0x3b4>)
 800078e:	2201      	movs	r2, #1
 8000790:	0019      	movs	r1, r3
 8000792:	f001 ff13 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000796:	2380      	movs	r3, #128	@ 0x80
 8000798:	021b      	lsls	r3, r3, #8
 800079a:	48b9      	ldr	r0, [pc, #740]	@ (8000a80 <Handle_Braille+0x3b4>)
 800079c:	2201      	movs	r2, #1
 800079e:	0019      	movs	r1, r3
 80007a0:	f001 ff0c 	bl	80025bc <HAL_GPIO_WritePin>
 80007a4:	f000 fd95 	bl	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'c' || letter == 'C')
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b63      	cmp	r3, #99	@ 0x63
 80007ae:	d003      	beq.n	80007b8 <Handle_Braille+0xec>
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b43      	cmp	r3, #67	@ 0x43
 80007b6:	d12b      	bne.n	8000810 <Handle_Braille+0x144>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80007b8:	2380      	movs	r3, #128	@ 0x80
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	48b0      	ldr	r0, [pc, #704]	@ (8000a80 <Handle_Braille+0x3b4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	0019      	movs	r1, r3
 80007c2:	f001 fefb 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 80007c6:	2380      	movs	r3, #128	@ 0x80
 80007c8:	011b      	lsls	r3, r3, #4
 80007ca:	48ad      	ldr	r0, [pc, #692]	@ (8000a80 <Handle_Braille+0x3b4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	0019      	movs	r1, r3
 80007d0:	f001 fef4 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80007d4:	2380      	movs	r3, #128	@ 0x80
 80007d6:	015b      	lsls	r3, r3, #5
 80007d8:	48a9      	ldr	r0, [pc, #676]	@ (8000a80 <Handle_Braille+0x3b4>)
 80007da:	2201      	movs	r2, #1
 80007dc:	0019      	movs	r1, r3
 80007de:	f001 feed 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80007e2:	2380      	movs	r3, #128	@ 0x80
 80007e4:	019b      	lsls	r3, r3, #6
 80007e6:	48a6      	ldr	r0, [pc, #664]	@ (8000a80 <Handle_Braille+0x3b4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	0019      	movs	r1, r3
 80007ec:	f001 fee6 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	01db      	lsls	r3, r3, #7
 80007f4:	48a2      	ldr	r0, [pc, #648]	@ (8000a80 <Handle_Braille+0x3b4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	0019      	movs	r1, r3
 80007fa:	f001 fedf 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80007fe:	2380      	movs	r3, #128	@ 0x80
 8000800:	021b      	lsls	r3, r3, #8
 8000802:	489f      	ldr	r0, [pc, #636]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000804:	2201      	movs	r2, #1
 8000806:	0019      	movs	r1, r3
 8000808:	f001 fed8 	bl	80025bc <HAL_GPIO_WritePin>
 800080c:	f000 fd61 	bl	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'd' ||  letter == 'D')
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b64      	cmp	r3, #100	@ 0x64
 8000816:	d003      	beq.n	8000820 <Handle_Braille+0x154>
 8000818:	1dfb      	adds	r3, r7, #7
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b44      	cmp	r3, #68	@ 0x44
 800081e:	d12b      	bne.n	8000878 <Handle_Braille+0x1ac>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000820:	2380      	movs	r3, #128	@ 0x80
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	4896      	ldr	r0, [pc, #600]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000826:	2200      	movs	r2, #0
 8000828:	0019      	movs	r1, r3
 800082a:	f001 fec7 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 800082e:	2380      	movs	r3, #128	@ 0x80
 8000830:	011b      	lsls	r3, r3, #4
 8000832:	4893      	ldr	r0, [pc, #588]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000834:	2201      	movs	r2, #1
 8000836:	0019      	movs	r1, r3
 8000838:	f001 fec0 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800083c:	2380      	movs	r3, #128	@ 0x80
 800083e:	015b      	lsls	r3, r3, #5
 8000840:	488f      	ldr	r0, [pc, #572]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000842:	2201      	movs	r2, #1
 8000844:	0019      	movs	r1, r3
 8000846:	f001 feb9 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 800084a:	2380      	movs	r3, #128	@ 0x80
 800084c:	019b      	lsls	r3, r3, #6
 800084e:	488c      	ldr	r0, [pc, #560]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000850:	2200      	movs	r2, #0
 8000852:	0019      	movs	r1, r3
 8000854:	f001 feb2 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000858:	2380      	movs	r3, #128	@ 0x80
 800085a:	01db      	lsls	r3, r3, #7
 800085c:	4888      	ldr	r0, [pc, #544]	@ (8000a80 <Handle_Braille+0x3b4>)
 800085e:	2200      	movs	r2, #0
 8000860:	0019      	movs	r1, r3
 8000862:	f001 feab 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000866:	2380      	movs	r3, #128	@ 0x80
 8000868:	021b      	lsls	r3, r3, #8
 800086a:	4885      	ldr	r0, [pc, #532]	@ (8000a80 <Handle_Braille+0x3b4>)
 800086c:	2201      	movs	r2, #1
 800086e:	0019      	movs	r1, r3
 8000870:	f001 fea4 	bl	80025bc <HAL_GPIO_WritePin>
 8000874:	f000 fd2d 	bl	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'e' || letter == 'E')
 8000878:	1dfb      	adds	r3, r7, #7
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b65      	cmp	r3, #101	@ 0x65
 800087e:	d003      	beq.n	8000888 <Handle_Braille+0x1bc>
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b45      	cmp	r3, #69	@ 0x45
 8000886:	d12b      	bne.n	80008e0 <Handle_Braille+0x214>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000888:	2380      	movs	r3, #128	@ 0x80
 800088a:	00db      	lsls	r3, r3, #3
 800088c:	487c      	ldr	r0, [pc, #496]	@ (8000a80 <Handle_Braille+0x3b4>)
 800088e:	2200      	movs	r2, #0
 8000890:	0019      	movs	r1, r3
 8000892:	f001 fe93 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000896:	2380      	movs	r3, #128	@ 0x80
 8000898:	011b      	lsls	r3, r3, #4
 800089a:	4879      	ldr	r0, [pc, #484]	@ (8000a80 <Handle_Braille+0x3b4>)
 800089c:	2201      	movs	r2, #1
 800089e:	0019      	movs	r1, r3
 80008a0:	f001 fe8c 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80008a4:	2380      	movs	r3, #128	@ 0x80
 80008a6:	015b      	lsls	r3, r3, #5
 80008a8:	4875      	ldr	r0, [pc, #468]	@ (8000a80 <Handle_Braille+0x3b4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	0019      	movs	r1, r3
 80008ae:	f001 fe85 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80008b2:	2380      	movs	r3, #128	@ 0x80
 80008b4:	019b      	lsls	r3, r3, #6
 80008b6:	4872      	ldr	r0, [pc, #456]	@ (8000a80 <Handle_Braille+0x3b4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	0019      	movs	r1, r3
 80008bc:	f001 fe7e 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80008c0:	2380      	movs	r3, #128	@ 0x80
 80008c2:	01db      	lsls	r3, r3, #7
 80008c4:	486e      	ldr	r0, [pc, #440]	@ (8000a80 <Handle_Braille+0x3b4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	0019      	movs	r1, r3
 80008ca:	f001 fe77 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80008ce:	2380      	movs	r3, #128	@ 0x80
 80008d0:	021b      	lsls	r3, r3, #8
 80008d2:	486b      	ldr	r0, [pc, #428]	@ (8000a80 <Handle_Braille+0x3b4>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	0019      	movs	r1, r3
 80008d8:	f001 fe70 	bl	80025bc <HAL_GPIO_WritePin>
 80008dc:	f000 fcf9 	bl	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'f' || letter == 'F')
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b66      	cmp	r3, #102	@ 0x66
 80008e6:	d003      	beq.n	80008f0 <Handle_Braille+0x224>
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b46      	cmp	r3, #70	@ 0x46
 80008ee:	d12b      	bne.n	8000948 <Handle_Braille+0x27c>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80008f0:	2380      	movs	r3, #128	@ 0x80
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	4862      	ldr	r0, [pc, #392]	@ (8000a80 <Handle_Braille+0x3b4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	0019      	movs	r1, r3
 80008fa:	f001 fe5f 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 80008fe:	2380      	movs	r3, #128	@ 0x80
 8000900:	011b      	lsls	r3, r3, #4
 8000902:	485f      	ldr	r0, [pc, #380]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000904:	2200      	movs	r2, #0
 8000906:	0019      	movs	r1, r3
 8000908:	f001 fe58 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800090c:	2380      	movs	r3, #128	@ 0x80
 800090e:	015b      	lsls	r3, r3, #5
 8000910:	485b      	ldr	r0, [pc, #364]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000912:	2201      	movs	r2, #1
 8000914:	0019      	movs	r1, r3
 8000916:	f001 fe51 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 800091a:	2380      	movs	r3, #128	@ 0x80
 800091c:	019b      	lsls	r3, r3, #6
 800091e:	4858      	ldr	r0, [pc, #352]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000920:	2200      	movs	r2, #0
 8000922:	0019      	movs	r1, r3
 8000924:	f001 fe4a 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000928:	2380      	movs	r3, #128	@ 0x80
 800092a:	01db      	lsls	r3, r3, #7
 800092c:	4854      	ldr	r0, [pc, #336]	@ (8000a80 <Handle_Braille+0x3b4>)
 800092e:	2201      	movs	r2, #1
 8000930:	0019      	movs	r1, r3
 8000932:	f001 fe43 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000936:	2380      	movs	r3, #128	@ 0x80
 8000938:	021b      	lsls	r3, r3, #8
 800093a:	4851      	ldr	r0, [pc, #324]	@ (8000a80 <Handle_Braille+0x3b4>)
 800093c:	2201      	movs	r2, #1
 800093e:	0019      	movs	r1, r3
 8000940:	f001 fe3c 	bl	80025bc <HAL_GPIO_WritePin>
 8000944:	f000 fcc5 	bl	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'g' || letter == 'G')
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b67      	cmp	r3, #103	@ 0x67
 800094e:	d003      	beq.n	8000958 <Handle_Braille+0x28c>
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b47      	cmp	r3, #71	@ 0x47
 8000956:	d12b      	bne.n	80009b0 <Handle_Braille+0x2e4>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000958:	2380      	movs	r3, #128	@ 0x80
 800095a:	00db      	lsls	r3, r3, #3
 800095c:	4848      	ldr	r0, [pc, #288]	@ (8000a80 <Handle_Braille+0x3b4>)
 800095e:	2200      	movs	r2, #0
 8000960:	0019      	movs	r1, r3
 8000962:	f001 fe2b 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000966:	2380      	movs	r3, #128	@ 0x80
 8000968:	011b      	lsls	r3, r3, #4
 800096a:	4845      	ldr	r0, [pc, #276]	@ (8000a80 <Handle_Braille+0x3b4>)
 800096c:	2201      	movs	r2, #1
 800096e:	0019      	movs	r1, r3
 8000970:	f001 fe24 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000974:	2380      	movs	r3, #128	@ 0x80
 8000976:	015b      	lsls	r3, r3, #5
 8000978:	4841      	ldr	r0, [pc, #260]	@ (8000a80 <Handle_Braille+0x3b4>)
 800097a:	2201      	movs	r2, #1
 800097c:	0019      	movs	r1, r3
 800097e:	f001 fe1d 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000982:	2380      	movs	r3, #128	@ 0x80
 8000984:	019b      	lsls	r3, r3, #6
 8000986:	483e      	ldr	r0, [pc, #248]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000988:	2200      	movs	r2, #0
 800098a:	0019      	movs	r1, r3
 800098c:	f001 fe16 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000990:	2380      	movs	r3, #128	@ 0x80
 8000992:	01db      	lsls	r3, r3, #7
 8000994:	483a      	ldr	r0, [pc, #232]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000996:	2201      	movs	r2, #1
 8000998:	0019      	movs	r1, r3
 800099a:	f001 fe0f 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 800099e:	2380      	movs	r3, #128	@ 0x80
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	4837      	ldr	r0, [pc, #220]	@ (8000a80 <Handle_Braille+0x3b4>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	0019      	movs	r1, r3
 80009a8:	f001 fe08 	bl	80025bc <HAL_GPIO_WritePin>
 80009ac:	f000 fc91 	bl	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'h' || letter == 'H')
 80009b0:	1dfb      	adds	r3, r7, #7
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b68      	cmp	r3, #104	@ 0x68
 80009b6:	d003      	beq.n	80009c0 <Handle_Braille+0x2f4>
 80009b8:	1dfb      	adds	r3, r7, #7
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b48      	cmp	r3, #72	@ 0x48
 80009be:	d12b      	bne.n	8000a18 <Handle_Braille+0x34c>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80009c0:	2380      	movs	r3, #128	@ 0x80
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	482e      	ldr	r0, [pc, #184]	@ (8000a80 <Handle_Braille+0x3b4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	0019      	movs	r1, r3
 80009ca:	f001 fdf7 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 80009ce:	2380      	movs	r3, #128	@ 0x80
 80009d0:	011b      	lsls	r3, r3, #4
 80009d2:	482b      	ldr	r0, [pc, #172]	@ (8000a80 <Handle_Braille+0x3b4>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	0019      	movs	r1, r3
 80009d8:	f001 fdf0 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80009dc:	2380      	movs	r3, #128	@ 0x80
 80009de:	015b      	lsls	r3, r3, #5
 80009e0:	4827      	ldr	r0, [pc, #156]	@ (8000a80 <Handle_Braille+0x3b4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	0019      	movs	r1, r3
 80009e6:	f001 fde9 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80009ea:	2380      	movs	r3, #128	@ 0x80
 80009ec:	019b      	lsls	r3, r3, #6
 80009ee:	4824      	ldr	r0, [pc, #144]	@ (8000a80 <Handle_Braille+0x3b4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	0019      	movs	r1, r3
 80009f4:	f001 fde2 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80009f8:	2380      	movs	r3, #128	@ 0x80
 80009fa:	01db      	lsls	r3, r3, #7
 80009fc:	4820      	ldr	r0, [pc, #128]	@ (8000a80 <Handle_Braille+0x3b4>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	0019      	movs	r1, r3
 8000a02:	f001 fddb 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000a06:	2380      	movs	r3, #128	@ 0x80
 8000a08:	021b      	lsls	r3, r3, #8
 8000a0a:	481d      	ldr	r0, [pc, #116]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	0019      	movs	r1, r3
 8000a10:	f001 fdd4 	bl	80025bc <HAL_GPIO_WritePin>
 8000a14:	f000 fc5d 	bl	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'i' || letter == 'I')
 8000a18:	1dfb      	adds	r3, r7, #7
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b69      	cmp	r3, #105	@ 0x69
 8000a1e:	d003      	beq.n	8000a28 <Handle_Braille+0x35c>
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b49      	cmp	r3, #73	@ 0x49
 8000a26:	d12d      	bne.n	8000a84 <Handle_Braille+0x3b8>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000a28:	2380      	movs	r3, #128	@ 0x80
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	4814      	ldr	r0, [pc, #80]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	0019      	movs	r1, r3
 8000a32:	f001 fdc3 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8000a36:	2380      	movs	r3, #128	@ 0x80
 8000a38:	011b      	lsls	r3, r3, #4
 8000a3a:	4811      	ldr	r0, [pc, #68]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	0019      	movs	r1, r3
 8000a40:	f001 fdbc 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000a44:	2380      	movs	r3, #128	@ 0x80
 8000a46:	015b      	lsls	r3, r3, #5
 8000a48:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	f001 fdb5 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000a52:	2380      	movs	r3, #128	@ 0x80
 8000a54:	019b      	lsls	r3, r3, #6
 8000a56:	480a      	ldr	r0, [pc, #40]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	0019      	movs	r1, r3
 8000a5c:	f001 fdae 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000a60:	2380      	movs	r3, #128	@ 0x80
 8000a62:	01db      	lsls	r3, r3, #7
 8000a64:	4806      	ldr	r0, [pc, #24]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	0019      	movs	r1, r3
 8000a6a:	f001 fda7 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000a6e:	2380      	movs	r3, #128	@ 0x80
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	4803      	ldr	r0, [pc, #12]	@ (8000a80 <Handle_Braille+0x3b4>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	0019      	movs	r1, r3
 8000a78:	f001 fda0 	bl	80025bc <HAL_GPIO_WritePin>
 8000a7c:	f000 fc29 	bl	80012d2 <Handle_Braille+0xc06>
 8000a80:	48000400 	.word	0x48000400
	  }
	  else if(letter == 'j' || letter == 'J')
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b6a      	cmp	r3, #106	@ 0x6a
 8000a8a:	d003      	beq.n	8000a94 <Handle_Braille+0x3c8>
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b4a      	cmp	r3, #74	@ 0x4a
 8000a92:	d12b      	bne.n	8000aec <Handle_Braille+0x420>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000a94:	2380      	movs	r3, #128	@ 0x80
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	48e1      	ldr	r0, [pc, #900]	@ (8000e20 <Handle_Braille+0x754>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	0019      	movs	r1, r3
 8000a9e:	f001 fd8d 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000aa2:	2380      	movs	r3, #128	@ 0x80
 8000aa4:	011b      	lsls	r3, r3, #4
 8000aa6:	48de      	ldr	r0, [pc, #888]	@ (8000e20 <Handle_Braille+0x754>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	0019      	movs	r1, r3
 8000aac:	f001 fd86 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000ab0:	2380      	movs	r3, #128	@ 0x80
 8000ab2:	015b      	lsls	r3, r3, #5
 8000ab4:	48da      	ldr	r0, [pc, #872]	@ (8000e20 <Handle_Braille+0x754>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	0019      	movs	r1, r3
 8000aba:	f001 fd7f 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000abe:	2380      	movs	r3, #128	@ 0x80
 8000ac0:	019b      	lsls	r3, r3, #6
 8000ac2:	48d7      	ldr	r0, [pc, #860]	@ (8000e20 <Handle_Braille+0x754>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	0019      	movs	r1, r3
 8000ac8:	f001 fd78 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000acc:	2380      	movs	r3, #128	@ 0x80
 8000ace:	01db      	lsls	r3, r3, #7
 8000ad0:	48d3      	ldr	r0, [pc, #844]	@ (8000e20 <Handle_Braille+0x754>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	f001 fd71 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000ada:	2380      	movs	r3, #128	@ 0x80
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	48d0      	ldr	r0, [pc, #832]	@ (8000e20 <Handle_Braille+0x754>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	f001 fd6a 	bl	80025bc <HAL_GPIO_WritePin>
 8000ae8:	f000 fbf3 	bl	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'k' || letter == 'K')
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b6b      	cmp	r3, #107	@ 0x6b
 8000af2:	d003      	beq.n	8000afc <Handle_Braille+0x430>
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b4b      	cmp	r3, #75	@ 0x4b
 8000afa:	d12b      	bne.n	8000b54 <Handle_Braille+0x488>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000afc:	2380      	movs	r3, #128	@ 0x80
 8000afe:	00db      	lsls	r3, r3, #3
 8000b00:	48c7      	ldr	r0, [pc, #796]	@ (8000e20 <Handle_Braille+0x754>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	0019      	movs	r1, r3
 8000b06:	f001 fd59 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8000b0a:	2380      	movs	r3, #128	@ 0x80
 8000b0c:	011b      	lsls	r3, r3, #4
 8000b0e:	48c4      	ldr	r0, [pc, #784]	@ (8000e20 <Handle_Braille+0x754>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	0019      	movs	r1, r3
 8000b14:	f001 fd52 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000b18:	2380      	movs	r3, #128	@ 0x80
 8000b1a:	015b      	lsls	r3, r3, #5
 8000b1c:	48c0      	ldr	r0, [pc, #768]	@ (8000e20 <Handle_Braille+0x754>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	0019      	movs	r1, r3
 8000b22:	f001 fd4b 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000b26:	2380      	movs	r3, #128	@ 0x80
 8000b28:	019b      	lsls	r3, r3, #6
 8000b2a:	48bd      	ldr	r0, [pc, #756]	@ (8000e20 <Handle_Braille+0x754>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	0019      	movs	r1, r3
 8000b30:	f001 fd44 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	01db      	lsls	r3, r3, #7
 8000b38:	48b9      	ldr	r0, [pc, #740]	@ (8000e20 <Handle_Braille+0x754>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	f001 fd3d 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000b42:	2380      	movs	r3, #128	@ 0x80
 8000b44:	021b      	lsls	r3, r3, #8
 8000b46:	48b6      	ldr	r0, [pc, #728]	@ (8000e20 <Handle_Braille+0x754>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	f001 fd36 	bl	80025bc <HAL_GPIO_WritePin>
 8000b50:	f000 fbbf 	bl	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'l' || letter == 'L')
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b6c      	cmp	r3, #108	@ 0x6c
 8000b5a:	d003      	beq.n	8000b64 <Handle_Braille+0x498>
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	2b4c      	cmp	r3, #76	@ 0x4c
 8000b62:	d12a      	bne.n	8000bba <Handle_Braille+0x4ee>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000b64:	2380      	movs	r3, #128	@ 0x80
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	48ad      	ldr	r0, [pc, #692]	@ (8000e20 <Handle_Braille+0x754>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	f001 fd25 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8000b72:	2380      	movs	r3, #128	@ 0x80
 8000b74:	011b      	lsls	r3, r3, #4
 8000b76:	48aa      	ldr	r0, [pc, #680]	@ (8000e20 <Handle_Braille+0x754>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	0019      	movs	r1, r3
 8000b7c:	f001 fd1e 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000b80:	2380      	movs	r3, #128	@ 0x80
 8000b82:	015b      	lsls	r3, r3, #5
 8000b84:	48a6      	ldr	r0, [pc, #664]	@ (8000e20 <Handle_Braille+0x754>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	0019      	movs	r1, r3
 8000b8a:	f001 fd17 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000b8e:	2380      	movs	r3, #128	@ 0x80
 8000b90:	019b      	lsls	r3, r3, #6
 8000b92:	48a3      	ldr	r0, [pc, #652]	@ (8000e20 <Handle_Braille+0x754>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	0019      	movs	r1, r3
 8000b98:	f001 fd10 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000b9c:	2380      	movs	r3, #128	@ 0x80
 8000b9e:	01db      	lsls	r3, r3, #7
 8000ba0:	489f      	ldr	r0, [pc, #636]	@ (8000e20 <Handle_Braille+0x754>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	f001 fd09 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000baa:	2380      	movs	r3, #128	@ 0x80
 8000bac:	021b      	lsls	r3, r3, #8
 8000bae:	489c      	ldr	r0, [pc, #624]	@ (8000e20 <Handle_Braille+0x754>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	f001 fd02 	bl	80025bc <HAL_GPIO_WritePin>
 8000bb8:	e38b      	b.n	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'm' || letter == 'M')
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b6d      	cmp	r3, #109	@ 0x6d
 8000bc0:	d003      	beq.n	8000bca <Handle_Braille+0x4fe>
 8000bc2:	1dfb      	adds	r3, r7, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b4d      	cmp	r3, #77	@ 0x4d
 8000bc8:	d12a      	bne.n	8000c20 <Handle_Braille+0x554>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000bca:	2380      	movs	r3, #128	@ 0x80
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	4894      	ldr	r0, [pc, #592]	@ (8000e20 <Handle_Braille+0x754>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	f001 fcf2 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8000bd8:	2380      	movs	r3, #128	@ 0x80
 8000bda:	011b      	lsls	r3, r3, #4
 8000bdc:	4890      	ldr	r0, [pc, #576]	@ (8000e20 <Handle_Braille+0x754>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	0019      	movs	r1, r3
 8000be2:	f001 fceb 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000be6:	2380      	movs	r3, #128	@ 0x80
 8000be8:	015b      	lsls	r3, r3, #5
 8000bea:	488d      	ldr	r0, [pc, #564]	@ (8000e20 <Handle_Braille+0x754>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	0019      	movs	r1, r3
 8000bf0:	f001 fce4 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	019b      	lsls	r3, r3, #6
 8000bf8:	4889      	ldr	r0, [pc, #548]	@ (8000e20 <Handle_Braille+0x754>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	f001 fcdd 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000c02:	2380      	movs	r3, #128	@ 0x80
 8000c04:	01db      	lsls	r3, r3, #7
 8000c06:	4886      	ldr	r0, [pc, #536]	@ (8000e20 <Handle_Braille+0x754>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	f001 fcd6 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000c10:	2380      	movs	r3, #128	@ 0x80
 8000c12:	021b      	lsls	r3, r3, #8
 8000c14:	4882      	ldr	r0, [pc, #520]	@ (8000e20 <Handle_Braille+0x754>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	0019      	movs	r1, r3
 8000c1a:	f001 fccf 	bl	80025bc <HAL_GPIO_WritePin>
 8000c1e:	e358      	b.n	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'n' || letter == 'N')
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b6e      	cmp	r3, #110	@ 0x6e
 8000c26:	d003      	beq.n	8000c30 <Handle_Braille+0x564>
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b4e      	cmp	r3, #78	@ 0x4e
 8000c2e:	d12a      	bne.n	8000c86 <Handle_Braille+0x5ba>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000c30:	2380      	movs	r3, #128	@ 0x80
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	487a      	ldr	r0, [pc, #488]	@ (8000e20 <Handle_Braille+0x754>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	0019      	movs	r1, r3
 8000c3a:	f001 fcbf 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000c3e:	2380      	movs	r3, #128	@ 0x80
 8000c40:	011b      	lsls	r3, r3, #4
 8000c42:	4877      	ldr	r0, [pc, #476]	@ (8000e20 <Handle_Braille+0x754>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	0019      	movs	r1, r3
 8000c48:	f001 fcb8 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000c4c:	2380      	movs	r3, #128	@ 0x80
 8000c4e:	015b      	lsls	r3, r3, #5
 8000c50:	4873      	ldr	r0, [pc, #460]	@ (8000e20 <Handle_Braille+0x754>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	0019      	movs	r1, r3
 8000c56:	f001 fcb1 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000c5a:	2380      	movs	r3, #128	@ 0x80
 8000c5c:	019b      	lsls	r3, r3, #6
 8000c5e:	4870      	ldr	r0, [pc, #448]	@ (8000e20 <Handle_Braille+0x754>)
 8000c60:	2201      	movs	r2, #1
 8000c62:	0019      	movs	r1, r3
 8000c64:	f001 fcaa 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000c68:	2380      	movs	r3, #128	@ 0x80
 8000c6a:	01db      	lsls	r3, r3, #7
 8000c6c:	486c      	ldr	r0, [pc, #432]	@ (8000e20 <Handle_Braille+0x754>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	0019      	movs	r1, r3
 8000c72:	f001 fca3 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000c76:	2380      	movs	r3, #128	@ 0x80
 8000c78:	021b      	lsls	r3, r3, #8
 8000c7a:	4869      	ldr	r0, [pc, #420]	@ (8000e20 <Handle_Braille+0x754>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	0019      	movs	r1, r3
 8000c80:	f001 fc9c 	bl	80025bc <HAL_GPIO_WritePin>
 8000c84:	e325      	b.n	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'o' || letter == 'O')
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b6f      	cmp	r3, #111	@ 0x6f
 8000c8c:	d003      	beq.n	8000c96 <Handle_Braille+0x5ca>
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b4f      	cmp	r3, #79	@ 0x4f
 8000c94:	d12a      	bne.n	8000cec <Handle_Braille+0x620>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000c96:	2380      	movs	r3, #128	@ 0x80
 8000c98:	00db      	lsls	r3, r3, #3
 8000c9a:	4861      	ldr	r0, [pc, #388]	@ (8000e20 <Handle_Braille+0x754>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	0019      	movs	r1, r3
 8000ca0:	f001 fc8c 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000ca4:	2380      	movs	r3, #128	@ 0x80
 8000ca6:	011b      	lsls	r3, r3, #4
 8000ca8:	485d      	ldr	r0, [pc, #372]	@ (8000e20 <Handle_Braille+0x754>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	0019      	movs	r1, r3
 8000cae:	f001 fc85 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000cb2:	2380      	movs	r3, #128	@ 0x80
 8000cb4:	015b      	lsls	r3, r3, #5
 8000cb6:	485a      	ldr	r0, [pc, #360]	@ (8000e20 <Handle_Braille+0x754>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	0019      	movs	r1, r3
 8000cbc:	f001 fc7e 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000cc0:	2380      	movs	r3, #128	@ 0x80
 8000cc2:	019b      	lsls	r3, r3, #6
 8000cc4:	4856      	ldr	r0, [pc, #344]	@ (8000e20 <Handle_Braille+0x754>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	0019      	movs	r1, r3
 8000cca:	f001 fc77 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000cce:	2380      	movs	r3, #128	@ 0x80
 8000cd0:	01db      	lsls	r3, r3, #7
 8000cd2:	4853      	ldr	r0, [pc, #332]	@ (8000e20 <Handle_Braille+0x754>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	f001 fc70 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000cdc:	2380      	movs	r3, #128	@ 0x80
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	484f      	ldr	r0, [pc, #316]	@ (8000e20 <Handle_Braille+0x754>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	0019      	movs	r1, r3
 8000ce6:	f001 fc69 	bl	80025bc <HAL_GPIO_WritePin>
 8000cea:	e2f2      	b.n	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'p' || letter == 'P')
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b70      	cmp	r3, #112	@ 0x70
 8000cf2:	d003      	beq.n	8000cfc <Handle_Braille+0x630>
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b50      	cmp	r3, #80	@ 0x50
 8000cfa:	d12a      	bne.n	8000d52 <Handle_Braille+0x686>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000cfc:	2380      	movs	r3, #128	@ 0x80
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	4847      	ldr	r0, [pc, #284]	@ (8000e20 <Handle_Braille+0x754>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	0019      	movs	r1, r3
 8000d06:	f001 fc59 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8000d0a:	2380      	movs	r3, #128	@ 0x80
 8000d0c:	011b      	lsls	r3, r3, #4
 8000d0e:	4844      	ldr	r0, [pc, #272]	@ (8000e20 <Handle_Braille+0x754>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	0019      	movs	r1, r3
 8000d14:	f001 fc52 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	015b      	lsls	r3, r3, #5
 8000d1c:	4840      	ldr	r0, [pc, #256]	@ (8000e20 <Handle_Braille+0x754>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	0019      	movs	r1, r3
 8000d22:	f001 fc4b 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000d26:	2380      	movs	r3, #128	@ 0x80
 8000d28:	019b      	lsls	r3, r3, #6
 8000d2a:	483d      	ldr	r0, [pc, #244]	@ (8000e20 <Handle_Braille+0x754>)
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	0019      	movs	r1, r3
 8000d30:	f001 fc44 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000d34:	2380      	movs	r3, #128	@ 0x80
 8000d36:	01db      	lsls	r3, r3, #7
 8000d38:	4839      	ldr	r0, [pc, #228]	@ (8000e20 <Handle_Braille+0x754>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	f001 fc3d 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000d42:	2380      	movs	r3, #128	@ 0x80
 8000d44:	021b      	lsls	r3, r3, #8
 8000d46:	4836      	ldr	r0, [pc, #216]	@ (8000e20 <Handle_Braille+0x754>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	0019      	movs	r1, r3
 8000d4c:	f001 fc36 	bl	80025bc <HAL_GPIO_WritePin>
 8000d50:	e2bf      	b.n	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'q' || letter == 'Q')
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b71      	cmp	r3, #113	@ 0x71
 8000d58:	d003      	beq.n	8000d62 <Handle_Braille+0x696>
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b51      	cmp	r3, #81	@ 0x51
 8000d60:	d12a      	bne.n	8000db8 <Handle_Braille+0x6ec>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000d62:	2380      	movs	r3, #128	@ 0x80
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	482e      	ldr	r0, [pc, #184]	@ (8000e20 <Handle_Braille+0x754>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	f001 fc26 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000d70:	2380      	movs	r3, #128	@ 0x80
 8000d72:	011b      	lsls	r3, r3, #4
 8000d74:	482a      	ldr	r0, [pc, #168]	@ (8000e20 <Handle_Braille+0x754>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	0019      	movs	r1, r3
 8000d7a:	f001 fc1f 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000d7e:	2380      	movs	r3, #128	@ 0x80
 8000d80:	015b      	lsls	r3, r3, #5
 8000d82:	4827      	ldr	r0, [pc, #156]	@ (8000e20 <Handle_Braille+0x754>)
 8000d84:	2201      	movs	r2, #1
 8000d86:	0019      	movs	r1, r3
 8000d88:	f001 fc18 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	019b      	lsls	r3, r3, #6
 8000d90:	4823      	ldr	r0, [pc, #140]	@ (8000e20 <Handle_Braille+0x754>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	0019      	movs	r1, r3
 8000d96:	f001 fc11 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000d9a:	2380      	movs	r3, #128	@ 0x80
 8000d9c:	01db      	lsls	r3, r3, #7
 8000d9e:	4820      	ldr	r0, [pc, #128]	@ (8000e20 <Handle_Braille+0x754>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	0019      	movs	r1, r3
 8000da4:	f001 fc0a 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000da8:	2380      	movs	r3, #128	@ 0x80
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	481c      	ldr	r0, [pc, #112]	@ (8000e20 <Handle_Braille+0x754>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	0019      	movs	r1, r3
 8000db2:	f001 fc03 	bl	80025bc <HAL_GPIO_WritePin>
 8000db6:	e28c      	b.n	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'r' || letter == 'R')
 8000db8:	1dfb      	adds	r3, r7, #7
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b72      	cmp	r3, #114	@ 0x72
 8000dbe:	d003      	beq.n	8000dc8 <Handle_Braille+0x6fc>
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b52      	cmp	r3, #82	@ 0x52
 8000dc6:	d12d      	bne.n	8000e24 <Handle_Braille+0x758>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000dc8:	2380      	movs	r3, #128	@ 0x80
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	4814      	ldr	r0, [pc, #80]	@ (8000e20 <Handle_Braille+0x754>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	f001 fbf3 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000dd6:	2380      	movs	r3, #128	@ 0x80
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	4811      	ldr	r0, [pc, #68]	@ (8000e20 <Handle_Braille+0x754>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	0019      	movs	r1, r3
 8000de0:	f001 fbec 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000de4:	2380      	movs	r3, #128	@ 0x80
 8000de6:	015b      	lsls	r3, r3, #5
 8000de8:	480d      	ldr	r0, [pc, #52]	@ (8000e20 <Handle_Braille+0x754>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	0019      	movs	r1, r3
 8000dee:	f001 fbe5 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000df2:	2380      	movs	r3, #128	@ 0x80
 8000df4:	019b      	lsls	r3, r3, #6
 8000df6:	480a      	ldr	r0, [pc, #40]	@ (8000e20 <Handle_Braille+0x754>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	0019      	movs	r1, r3
 8000dfc:	f001 fbde 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000e00:	2380      	movs	r3, #128	@ 0x80
 8000e02:	01db      	lsls	r3, r3, #7
 8000e04:	4806      	ldr	r0, [pc, #24]	@ (8000e20 <Handle_Braille+0x754>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	0019      	movs	r1, r3
 8000e0a:	f001 fbd7 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000e0e:	2380      	movs	r3, #128	@ 0x80
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	4803      	ldr	r0, [pc, #12]	@ (8000e20 <Handle_Braille+0x754>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	0019      	movs	r1, r3
 8000e18:	f001 fbd0 	bl	80025bc <HAL_GPIO_WritePin>
 8000e1c:	e259      	b.n	80012d2 <Handle_Braille+0xc06>
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	48000400 	.word	0x48000400
	  }
	  else if(letter == 's' || letter == 'S')
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b73      	cmp	r3, #115	@ 0x73
 8000e2a:	d003      	beq.n	8000e34 <Handle_Braille+0x768>
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b53      	cmp	r3, #83	@ 0x53
 8000e32:	d12a      	bne.n	8000e8a <Handle_Braille+0x7be>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000e34:	2380      	movs	r3, #128	@ 0x80
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	48de      	ldr	r0, [pc, #888]	@ (80011b4 <Handle_Braille+0xae8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	f001 fbbd 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8000e42:	2380      	movs	r3, #128	@ 0x80
 8000e44:	011b      	lsls	r3, r3, #4
 8000e46:	48db      	ldr	r0, [pc, #876]	@ (80011b4 <Handle_Braille+0xae8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	f001 fbb6 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000e50:	2380      	movs	r3, #128	@ 0x80
 8000e52:	015b      	lsls	r3, r3, #5
 8000e54:	48d7      	ldr	r0, [pc, #860]	@ (80011b4 <Handle_Braille+0xae8>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	0019      	movs	r1, r3
 8000e5a:	f001 fbaf 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000e5e:	2380      	movs	r3, #128	@ 0x80
 8000e60:	019b      	lsls	r3, r3, #6
 8000e62:	48d4      	ldr	r0, [pc, #848]	@ (80011b4 <Handle_Braille+0xae8>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	0019      	movs	r1, r3
 8000e68:	f001 fba8 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000e6c:	2380      	movs	r3, #128	@ 0x80
 8000e6e:	01db      	lsls	r3, r3, #7
 8000e70:	48d0      	ldr	r0, [pc, #832]	@ (80011b4 <Handle_Braille+0xae8>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	0019      	movs	r1, r3
 8000e76:	f001 fba1 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000e7a:	2380      	movs	r3, #128	@ 0x80
 8000e7c:	021b      	lsls	r3, r3, #8
 8000e7e:	48cd      	ldr	r0, [pc, #820]	@ (80011b4 <Handle_Braille+0xae8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	0019      	movs	r1, r3
 8000e84:	f001 fb9a 	bl	80025bc <HAL_GPIO_WritePin>
 8000e88:	e223      	b.n	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 't' || letter == 'T')
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b74      	cmp	r3, #116	@ 0x74
 8000e90:	d003      	beq.n	8000e9a <Handle_Braille+0x7ce>
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b54      	cmp	r3, #84	@ 0x54
 8000e98:	d12a      	bne.n	8000ef0 <Handle_Braille+0x824>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 8000e9a:	2380      	movs	r3, #128	@ 0x80
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	48c5      	ldr	r0, [pc, #788]	@ (80011b4 <Handle_Braille+0xae8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	0019      	movs	r1, r3
 8000ea4:	f001 fb8a 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000ea8:	2380      	movs	r3, #128	@ 0x80
 8000eaa:	011b      	lsls	r3, r3, #4
 8000eac:	48c1      	ldr	r0, [pc, #772]	@ (80011b4 <Handle_Braille+0xae8>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	f001 fb83 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000eb6:	2380      	movs	r3, #128	@ 0x80
 8000eb8:	015b      	lsls	r3, r3, #5
 8000eba:	48be      	ldr	r0, [pc, #760]	@ (80011b4 <Handle_Braille+0xae8>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	0019      	movs	r1, r3
 8000ec0:	f001 fb7c 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000ec4:	2380      	movs	r3, #128	@ 0x80
 8000ec6:	019b      	lsls	r3, r3, #6
 8000ec8:	48ba      	ldr	r0, [pc, #744]	@ (80011b4 <Handle_Braille+0xae8>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	0019      	movs	r1, r3
 8000ece:	f001 fb75 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000ed2:	2380      	movs	r3, #128	@ 0x80
 8000ed4:	01db      	lsls	r3, r3, #7
 8000ed6:	48b7      	ldr	r0, [pc, #732]	@ (80011b4 <Handle_Braille+0xae8>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	0019      	movs	r1, r3
 8000edc:	f001 fb6e 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8000ee0:	2380      	movs	r3, #128	@ 0x80
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	48b3      	ldr	r0, [pc, #716]	@ (80011b4 <Handle_Braille+0xae8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	0019      	movs	r1, r3
 8000eea:	f001 fb67 	bl	80025bc <HAL_GPIO_WritePin>
 8000eee:	e1f0      	b.n	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'u' || letter == 'U')
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b75      	cmp	r3, #117	@ 0x75
 8000ef6:	d003      	beq.n	8000f00 <Handle_Braille+0x834>
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b55      	cmp	r3, #85	@ 0x55
 8000efe:	d12a      	bne.n	8000f56 <Handle_Braille+0x88a>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000f00:	2380      	movs	r3, #128	@ 0x80
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	48ab      	ldr	r0, [pc, #684]	@ (80011b4 <Handle_Braille+0xae8>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	0019      	movs	r1, r3
 8000f0a:	f001 fb57 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8000f0e:	2380      	movs	r3, #128	@ 0x80
 8000f10:	011b      	lsls	r3, r3, #4
 8000f12:	48a8      	ldr	r0, [pc, #672]	@ (80011b4 <Handle_Braille+0xae8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	0019      	movs	r1, r3
 8000f18:	f001 fb50 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000f1c:	2380      	movs	r3, #128	@ 0x80
 8000f1e:	015b      	lsls	r3, r3, #5
 8000f20:	48a4      	ldr	r0, [pc, #656]	@ (80011b4 <Handle_Braille+0xae8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	0019      	movs	r1, r3
 8000f26:	f001 fb49 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000f2a:	2380      	movs	r3, #128	@ 0x80
 8000f2c:	019b      	lsls	r3, r3, #6
 8000f2e:	48a1      	ldr	r0, [pc, #644]	@ (80011b4 <Handle_Braille+0xae8>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	0019      	movs	r1, r3
 8000f34:	f001 fb42 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8000f38:	2380      	movs	r3, #128	@ 0x80
 8000f3a:	01db      	lsls	r3, r3, #7
 8000f3c:	489d      	ldr	r0, [pc, #628]	@ (80011b4 <Handle_Braille+0xae8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	0019      	movs	r1, r3
 8000f42:	f001 fb3b 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000f46:	2380      	movs	r3, #128	@ 0x80
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	489a      	ldr	r0, [pc, #616]	@ (80011b4 <Handle_Braille+0xae8>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	0019      	movs	r1, r3
 8000f50:	f001 fb34 	bl	80025bc <HAL_GPIO_WritePin>
 8000f54:	e1bd      	b.n	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'v' || letter == 'V')
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b76      	cmp	r3, #118	@ 0x76
 8000f5c:	d003      	beq.n	8000f66 <Handle_Braille+0x89a>
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b56      	cmp	r3, #86	@ 0x56
 8000f64:	d12a      	bne.n	8000fbc <Handle_Braille+0x8f0>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000f66:	2380      	movs	r3, #128	@ 0x80
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	4892      	ldr	r0, [pc, #584]	@ (80011b4 <Handle_Braille+0xae8>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	0019      	movs	r1, r3
 8000f70:	f001 fb24 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8000f74:	2380      	movs	r3, #128	@ 0x80
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	488e      	ldr	r0, [pc, #568]	@ (80011b4 <Handle_Braille+0xae8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	0019      	movs	r1, r3
 8000f7e:	f001 fb1d 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8000f82:	2380      	movs	r3, #128	@ 0x80
 8000f84:	015b      	lsls	r3, r3, #5
 8000f86:	488b      	ldr	r0, [pc, #556]	@ (80011b4 <Handle_Braille+0xae8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	f001 fb16 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000f90:	2380      	movs	r3, #128	@ 0x80
 8000f92:	019b      	lsls	r3, r3, #6
 8000f94:	4887      	ldr	r0, [pc, #540]	@ (80011b4 <Handle_Braille+0xae8>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	0019      	movs	r1, r3
 8000f9a:	f001 fb0f 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000f9e:	2380      	movs	r3, #128	@ 0x80
 8000fa0:	01db      	lsls	r3, r3, #7
 8000fa2:	4884      	ldr	r0, [pc, #528]	@ (80011b4 <Handle_Braille+0xae8>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	f001 fb08 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	4880      	ldr	r0, [pc, #512]	@ (80011b4 <Handle_Braille+0xae8>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	f001 fb01 	bl	80025bc <HAL_GPIO_WritePin>
 8000fba:	e18a      	b.n	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'w' || letter == 'W')
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b77      	cmp	r3, #119	@ 0x77
 8000fc2:	d003      	beq.n	8000fcc <Handle_Braille+0x900>
 8000fc4:	1dfb      	adds	r3, r7, #7
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b57      	cmp	r3, #87	@ 0x57
 8000fca:	d12a      	bne.n	8001022 <Handle_Braille+0x956>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000fcc:	2380      	movs	r3, #128	@ 0x80
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4878      	ldr	r0, [pc, #480]	@ (80011b4 <Handle_Braille+0xae8>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	0019      	movs	r1, r3
 8000fd6:	f001 faf1 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 8000fda:	2380      	movs	r3, #128	@ 0x80
 8000fdc:	011b      	lsls	r3, r3, #4
 8000fde:	4875      	ldr	r0, [pc, #468]	@ (80011b4 <Handle_Braille+0xae8>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	0019      	movs	r1, r3
 8000fe4:	f001 faea 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	015b      	lsls	r3, r3, #5
 8000fec:	4871      	ldr	r0, [pc, #452]	@ (80011b4 <Handle_Braille+0xae8>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	0019      	movs	r1, r3
 8000ff2:	f001 fae3 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8000ff6:	2380      	movs	r3, #128	@ 0x80
 8000ff8:	019b      	lsls	r3, r3, #6
 8000ffa:	486e      	ldr	r0, [pc, #440]	@ (80011b4 <Handle_Braille+0xae8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	0019      	movs	r1, r3
 8001000:	f001 fadc 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001004:	2380      	movs	r3, #128	@ 0x80
 8001006:	01db      	lsls	r3, r3, #7
 8001008:	486a      	ldr	r0, [pc, #424]	@ (80011b4 <Handle_Braille+0xae8>)
 800100a:	2201      	movs	r2, #1
 800100c:	0019      	movs	r1, r3
 800100e:	f001 fad5 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001012:	2380      	movs	r3, #128	@ 0x80
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	4867      	ldr	r0, [pc, #412]	@ (80011b4 <Handle_Braille+0xae8>)
 8001018:	2200      	movs	r2, #0
 800101a:	0019      	movs	r1, r3
 800101c:	f001 face 	bl	80025bc <HAL_GPIO_WritePin>
 8001020:	e157      	b.n	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'x' || letter == 'X')
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b78      	cmp	r3, #120	@ 0x78
 8001028:	d003      	beq.n	8001032 <Handle_Braille+0x966>
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b58      	cmp	r3, #88	@ 0x58
 8001030:	d12a      	bne.n	8001088 <Handle_Braille+0x9bc>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001032:	2380      	movs	r3, #128	@ 0x80
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	485f      	ldr	r0, [pc, #380]	@ (80011b4 <Handle_Braille+0xae8>)
 8001038:	2201      	movs	r2, #1
 800103a:	0019      	movs	r1, r3
 800103c:	f001 fabe 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 8001040:	2380      	movs	r3, #128	@ 0x80
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	485b      	ldr	r0, [pc, #364]	@ (80011b4 <Handle_Braille+0xae8>)
 8001046:	2200      	movs	r2, #0
 8001048:	0019      	movs	r1, r3
 800104a:	f001 fab7 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800104e:	2380      	movs	r3, #128	@ 0x80
 8001050:	015b      	lsls	r3, r3, #5
 8001052:	4858      	ldr	r0, [pc, #352]	@ (80011b4 <Handle_Braille+0xae8>)
 8001054:	2201      	movs	r2, #1
 8001056:	0019      	movs	r1, r3
 8001058:	f001 fab0 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	019b      	lsls	r3, r3, #6
 8001060:	4854      	ldr	r0, [pc, #336]	@ (80011b4 <Handle_Braille+0xae8>)
 8001062:	2201      	movs	r2, #1
 8001064:	0019      	movs	r1, r3
 8001066:	f001 faa9 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 800106a:	2380      	movs	r3, #128	@ 0x80
 800106c:	01db      	lsls	r3, r3, #7
 800106e:	4851      	ldr	r0, [pc, #324]	@ (80011b4 <Handle_Braille+0xae8>)
 8001070:	2200      	movs	r2, #0
 8001072:	0019      	movs	r1, r3
 8001074:	f001 faa2 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8001078:	2380      	movs	r3, #128	@ 0x80
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	484d      	ldr	r0, [pc, #308]	@ (80011b4 <Handle_Braille+0xae8>)
 800107e:	2201      	movs	r2, #1
 8001080:	0019      	movs	r1, r3
 8001082:	f001 fa9b 	bl	80025bc <HAL_GPIO_WritePin>
 8001086:	e124      	b.n	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'y' || letter == 'Y')
 8001088:	1dfb      	adds	r3, r7, #7
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b79      	cmp	r3, #121	@ 0x79
 800108e:	d003      	beq.n	8001098 <Handle_Braille+0x9cc>
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b59      	cmp	r3, #89	@ 0x59
 8001096:	d12a      	bne.n	80010ee <Handle_Braille+0xa22>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8001098:	2380      	movs	r3, #128	@ 0x80
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4845      	ldr	r0, [pc, #276]	@ (80011b4 <Handle_Braille+0xae8>)
 800109e:	2201      	movs	r2, #1
 80010a0:	0019      	movs	r1, r3
 80010a2:	f001 fa8b 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 80010a6:	2380      	movs	r3, #128	@ 0x80
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	4842      	ldr	r0, [pc, #264]	@ (80011b4 <Handle_Braille+0xae8>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	0019      	movs	r1, r3
 80010b0:	f001 fa84 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80010b4:	2380      	movs	r3, #128	@ 0x80
 80010b6:	015b      	lsls	r3, r3, #5
 80010b8:	483e      	ldr	r0, [pc, #248]	@ (80011b4 <Handle_Braille+0xae8>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	0019      	movs	r1, r3
 80010be:	f001 fa7d 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80010c2:	2380      	movs	r3, #128	@ 0x80
 80010c4:	019b      	lsls	r3, r3, #6
 80010c6:	483b      	ldr	r0, [pc, #236]	@ (80011b4 <Handle_Braille+0xae8>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	0019      	movs	r1, r3
 80010cc:	f001 fa76 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80010d0:	2380      	movs	r3, #128	@ 0x80
 80010d2:	01db      	lsls	r3, r3, #7
 80010d4:	4837      	ldr	r0, [pc, #220]	@ (80011b4 <Handle_Braille+0xae8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	0019      	movs	r1, r3
 80010da:	f001 fa6f 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80010de:	2380      	movs	r3, #128	@ 0x80
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	4834      	ldr	r0, [pc, #208]	@ (80011b4 <Handle_Braille+0xae8>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	0019      	movs	r1, r3
 80010e8:	f001 fa68 	bl	80025bc <HAL_GPIO_WritePin>
 80010ec:	e0f1      	b.n	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == 'z' || letter == 'Z')
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b7a      	cmp	r3, #122	@ 0x7a
 80010f4:	d003      	beq.n	80010fe <Handle_Braille+0xa32>
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b5a      	cmp	r3, #90	@ 0x5a
 80010fc:	d12a      	bne.n	8001154 <Handle_Braille+0xa88>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 80010fe:	2380      	movs	r3, #128	@ 0x80
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	482c      	ldr	r0, [pc, #176]	@ (80011b4 <Handle_Braille+0xae8>)
 8001104:	2201      	movs	r2, #1
 8001106:	0019      	movs	r1, r3
 8001108:	f001 fa58 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 800110c:	2380      	movs	r3, #128	@ 0x80
 800110e:	011b      	lsls	r3, r3, #4
 8001110:	4828      	ldr	r0, [pc, #160]	@ (80011b4 <Handle_Braille+0xae8>)
 8001112:	2201      	movs	r2, #1
 8001114:	0019      	movs	r1, r3
 8001116:	f001 fa51 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800111a:	2380      	movs	r3, #128	@ 0x80
 800111c:	015b      	lsls	r3, r3, #5
 800111e:	4825      	ldr	r0, [pc, #148]	@ (80011b4 <Handle_Braille+0xae8>)
 8001120:	2200      	movs	r2, #0
 8001122:	0019      	movs	r1, r3
 8001124:	f001 fa4a 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001128:	2380      	movs	r3, #128	@ 0x80
 800112a:	019b      	lsls	r3, r3, #6
 800112c:	4821      	ldr	r0, [pc, #132]	@ (80011b4 <Handle_Braille+0xae8>)
 800112e:	2201      	movs	r2, #1
 8001130:	0019      	movs	r1, r3
 8001132:	f001 fa43 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	01db      	lsls	r3, r3, #7
 800113a:	481e      	ldr	r0, [pc, #120]	@ (80011b4 <Handle_Braille+0xae8>)
 800113c:	2200      	movs	r2, #0
 800113e:	0019      	movs	r1, r3
 8001140:	f001 fa3c 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8001144:	2380      	movs	r3, #128	@ 0x80
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	481a      	ldr	r0, [pc, #104]	@ (80011b4 <Handle_Braille+0xae8>)
 800114a:	2201      	movs	r2, #1
 800114c:	0019      	movs	r1, r3
 800114e:	f001 fa35 	bl	80025bc <HAL_GPIO_WritePin>
 8001152:	e0be      	b.n	80012d2 <Handle_Braille+0xc06>
	  }
	  else if(letter == '.')
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b2e      	cmp	r3, #46	@ 0x2e
 800115a:	d12d      	bne.n	80011b8 <Handle_Braille+0xaec>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4814      	ldr	r0, [pc, #80]	@ (80011b4 <Handle_Braille+0xae8>)
 8001162:	2201      	movs	r2, #1
 8001164:	0019      	movs	r1, r3
 8001166:	f001 fa29 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 800116a:	2380      	movs	r3, #128	@ 0x80
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	4811      	ldr	r0, [pc, #68]	@ (80011b4 <Handle_Braille+0xae8>)
 8001170:	2201      	movs	r2, #1
 8001172:	0019      	movs	r1, r3
 8001174:	f001 fa22 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8001178:	2380      	movs	r3, #128	@ 0x80
 800117a:	015b      	lsls	r3, r3, #5
 800117c:	480d      	ldr	r0, [pc, #52]	@ (80011b4 <Handle_Braille+0xae8>)
 800117e:	2200      	movs	r2, #0
 8001180:	0019      	movs	r1, r3
 8001182:	f001 fa1b 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001186:	2380      	movs	r3, #128	@ 0x80
 8001188:	019b      	lsls	r3, r3, #6
 800118a:	480a      	ldr	r0, [pc, #40]	@ (80011b4 <Handle_Braille+0xae8>)
 800118c:	2200      	movs	r2, #0
 800118e:	0019      	movs	r1, r3
 8001190:	f001 fa14 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001194:	2380      	movs	r3, #128	@ 0x80
 8001196:	01db      	lsls	r3, r3, #7
 8001198:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <Handle_Braille+0xae8>)
 800119a:	2201      	movs	r2, #1
 800119c:	0019      	movs	r1, r3
 800119e:	f001 fa0d 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80011a2:	2380      	movs	r3, #128	@ 0x80
 80011a4:	021b      	lsls	r3, r3, #8
 80011a6:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <Handle_Braille+0xae8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	0019      	movs	r1, r3
 80011ac:	f001 fa06 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
	  }
}
 80011b0:	e08f      	b.n	80012d2 <Handle_Braille+0xc06>
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	48000400 	.word	0x48000400
	  else if(letter == ',')
 80011b8:	1dfb      	adds	r3, r7, #7
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b2c      	cmp	r3, #44	@ 0x2c
 80011be:	d12a      	bne.n	8001216 <Handle_Braille+0xb4a>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 80011c0:	2380      	movs	r3, #128	@ 0x80
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4845      	ldr	r0, [pc, #276]	@ (80012dc <Handle_Braille+0xc10>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	0019      	movs	r1, r3
 80011ca:	f001 f9f7 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 80011ce:	2380      	movs	r3, #128	@ 0x80
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	4842      	ldr	r0, [pc, #264]	@ (80012dc <Handle_Braille+0xc10>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	0019      	movs	r1, r3
 80011d8:	f001 f9f0 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80011dc:	2380      	movs	r3, #128	@ 0x80
 80011de:	015b      	lsls	r3, r3, #5
 80011e0:	483e      	ldr	r0, [pc, #248]	@ (80012dc <Handle_Braille+0xc10>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	0019      	movs	r1, r3
 80011e6:	f001 f9e9 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80011ea:	2380      	movs	r3, #128	@ 0x80
 80011ec:	019b      	lsls	r3, r3, #6
 80011ee:	483b      	ldr	r0, [pc, #236]	@ (80012dc <Handle_Braille+0xc10>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	0019      	movs	r1, r3
 80011f4:	f001 f9e2 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 80011f8:	2380      	movs	r3, #128	@ 0x80
 80011fa:	01db      	lsls	r3, r3, #7
 80011fc:	4837      	ldr	r0, [pc, #220]	@ (80012dc <Handle_Braille+0xc10>)
 80011fe:	2201      	movs	r2, #1
 8001200:	0019      	movs	r1, r3
 8001202:	f001 f9db 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001206:	2380      	movs	r3, #128	@ 0x80
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	4834      	ldr	r0, [pc, #208]	@ (80012dc <Handle_Braille+0xc10>)
 800120c:	2200      	movs	r2, #0
 800120e:	0019      	movs	r1, r3
 8001210:	f001 f9d4 	bl	80025bc <HAL_GPIO_WritePin>
}
 8001214:	e05d      	b.n	80012d2 <Handle_Braille+0xc06>
	  else if(letter == ' ')
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b20      	cmp	r3, #32
 800121c:	d12a      	bne.n	8001274 <Handle_Braille+0xba8>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 0);
 800121e:	2380      	movs	r3, #128	@ 0x80
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	482e      	ldr	r0, [pc, #184]	@ (80012dc <Handle_Braille+0xc10>)
 8001224:	2200      	movs	r2, #0
 8001226:	0019      	movs	r1, r3
 8001228:	f001 f9c8 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 0);
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	482a      	ldr	r0, [pc, #168]	@ (80012dc <Handle_Braille+0xc10>)
 8001232:	2200      	movs	r2, #0
 8001234:	0019      	movs	r1, r3
 8001236:	f001 f9c1 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800123a:	2380      	movs	r3, #128	@ 0x80
 800123c:	015b      	lsls	r3, r3, #5
 800123e:	4827      	ldr	r0, [pc, #156]	@ (80012dc <Handle_Braille+0xc10>)
 8001240:	2200      	movs	r2, #0
 8001242:	0019      	movs	r1, r3
 8001244:	f001 f9ba 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	019b      	lsls	r3, r3, #6
 800124c:	4823      	ldr	r0, [pc, #140]	@ (80012dc <Handle_Braille+0xc10>)
 800124e:	2200      	movs	r2, #0
 8001250:	0019      	movs	r1, r3
 8001252:	f001 f9b3 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001256:	2380      	movs	r3, #128	@ 0x80
 8001258:	01db      	lsls	r3, r3, #7
 800125a:	4820      	ldr	r0, [pc, #128]	@ (80012dc <Handle_Braille+0xc10>)
 800125c:	2200      	movs	r2, #0
 800125e:	0019      	movs	r1, r3
 8001260:	f001 f9ac 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001264:	2380      	movs	r3, #128	@ 0x80
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	481c      	ldr	r0, [pc, #112]	@ (80012dc <Handle_Braille+0xc10>)
 800126a:	2200      	movs	r2, #0
 800126c:	0019      	movs	r1, r3
 800126e:	f001 f9a5 	bl	80025bc <HAL_GPIO_WritePin>
}
 8001272:	e02e      	b.n	80012d2 <Handle_Braille+0xc06>
	  else if(letter == '#')
 8001274:	1dfb      	adds	r3, r7, #7
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b23      	cmp	r3, #35	@ 0x23
 800127a:	d12a      	bne.n	80012d2 <Handle_Braille+0xc06>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	4816      	ldr	r0, [pc, #88]	@ (80012dc <Handle_Braille+0xc10>)
 8001282:	2201      	movs	r2, #1
 8001284:	0019      	movs	r1, r3
 8001286:	f001 f999 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 800128a:	2380      	movs	r3, #128	@ 0x80
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	4813      	ldr	r0, [pc, #76]	@ (80012dc <Handle_Braille+0xc10>)
 8001290:	2201      	movs	r2, #1
 8001292:	0019      	movs	r1, r3
 8001294:	f001 f992 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8001298:	2380      	movs	r3, #128	@ 0x80
 800129a:	015b      	lsls	r3, r3, #5
 800129c:	480f      	ldr	r0, [pc, #60]	@ (80012dc <Handle_Braille+0xc10>)
 800129e:	2201      	movs	r2, #1
 80012a0:	0019      	movs	r1, r3
 80012a2:	f001 f98b 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80012a6:	2380      	movs	r3, #128	@ 0x80
 80012a8:	019b      	lsls	r3, r3, #6
 80012aa:	480c      	ldr	r0, [pc, #48]	@ (80012dc <Handle_Braille+0xc10>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	0019      	movs	r1, r3
 80012b0:	f001 f984 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 80012b4:	2380      	movs	r3, #128	@ 0x80
 80012b6:	01db      	lsls	r3, r3, #7
 80012b8:	4808      	ldr	r0, [pc, #32]	@ (80012dc <Handle_Braille+0xc10>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	0019      	movs	r1, r3
 80012be:	f001 f97d 	bl	80025bc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80012c2:	2380      	movs	r3, #128	@ 0x80
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	4805      	ldr	r0, [pc, #20]	@ (80012dc <Handle_Braille+0xc10>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	0019      	movs	r1, r3
 80012cc:	f001 f976 	bl	80025bc <HAL_GPIO_WritePin>
}
 80012d0:	e7ff      	b.n	80012d2 <Handle_Braille+0xc06>
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	48000400 	.word	0x48000400

080012e0 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <Ringbuf_init+0x64>)
 80012e6:	4a18      	ldr	r2, [pc, #96]	@ (8001348 <Ringbuf_init+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 80012ea:	4b18      	ldr	r3, [pc, #96]	@ (800134c <Ringbuf_init+0x6c>)
 80012ec:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <Ringbuf_init+0x70>)
 80012ee:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 80012f0:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <Ringbuf_init+0x74>)
 80012f2:	4a19      	ldr	r2, [pc, #100]	@ (8001358 <Ringbuf_init+0x78>)
 80012f4:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 80012f6:	4b19      	ldr	r3, [pc, #100]	@ (800135c <Ringbuf_init+0x7c>)
 80012f8:	4a19      	ldr	r2, [pc, #100]	@ (8001360 <Ringbuf_init+0x80>)
 80012fa:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 80012fc:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <Ringbuf_init+0x84>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <Ringbuf_init+0x84>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2101      	movs	r1, #1
 8001308:	430a      	orrs	r2, r1
 800130a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 800130c:	4b16      	ldr	r3, [pc, #88]	@ (8001368 <Ringbuf_init+0x88>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <Ringbuf_init+0x88>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2101      	movs	r1, #1
 8001318:	430a      	orrs	r2, r1
 800131a:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <Ringbuf_init+0x84>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <Ringbuf_init+0x84>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2120      	movs	r1, #32
 8001328:	430a      	orrs	r2, r1
 800132a:	601a      	str	r2, [r3, #0]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 800132c:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <Ringbuf_init+0x88>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <Ringbuf_init+0x88>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2120      	movs	r1, #32
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
}
 800133c:	46c0      	nop			@ (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			@ (mov r8, r8)
 8001344:	200001ac 	.word	0x200001ac
 8001348:	2000008c 	.word	0x2000008c
 800134c:	200001b0 	.word	0x200001b0
 8001350:	200000d4 	.word	0x200000d4
 8001354:	200001b4 	.word	0x200001b4
 8001358:	2000011c 	.word	0x2000011c
 800135c:	200001b8 	.word	0x200001b8
 8001360:	20000164 	.word	0x20000164
 8001364:	200001bc 	.word	0x200001bc
 8001368:	20000244 	.word	0x20000244

0800136c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	0002      	movs	r2, r0
 8001374:	6039      	str	r1, [r7, #0]
 8001376:	1dfb      	adds	r3, r7, #7
 8001378:	701a      	strb	r2, [r3, #0]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	3301      	adds	r3, #1
 8001380:	001a      	movs	r2, r3
 8001382:	233f      	movs	r3, #63	@ 0x3f
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	429a      	cmp	r2, r3
 8001390:	d008      	beq.n	80013a4 <store_char+0x38>
    buffer->buffer[buffer->head] = c;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	1df9      	adds	r1, r7, #7
 800139a:	7809      	ldrb	r1, [r1, #0]
 800139c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 80013a4:	46c0      	nop			@ (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b004      	add	sp, #16
 80013aa:	bd80      	pop	{r7, pc}

080013ac <Uart_peek>:
	}
}


int Uart_peek(UART_HandleTypeDef *uart)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <Uart_peek+0x6c>)
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d111      	bne.n	80013e0 <Uart_peek+0x34>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 80013bc:	4b17      	ldr	r3, [pc, #92]	@ (800141c <Uart_peek+0x70>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013c2:	4b16      	ldr	r3, [pc, #88]	@ (800141c <Uart_peek+0x70>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d102      	bne.n	80013d2 <Uart_peek+0x26>
		  {
		    return -1;
 80013cc:	2301      	movs	r3, #1
 80013ce:	425b      	negs	r3, r3
 80013d0:	e01e      	b.n	8001410 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 80013d2:	4b12      	ldr	r3, [pc, #72]	@ (800141c <Uart_peek+0x70>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <Uart_peek+0x70>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013dc:	5cd3      	ldrb	r3, [r2, r3]
 80013de:	e017      	b.n	8001410 <Uart_peek+0x64>
		  }
	}

	else if (uart == pc_uart)
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <Uart_peek+0x74>)
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d111      	bne.n	800140c <Uart_peek+0x60>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <Uart_peek+0x78>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <Uart_peek+0x78>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d102      	bne.n	80013fe <Uart_peek+0x52>
		  {
		    return -1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	425b      	negs	r3, r3
 80013fc:	e008      	b.n	8001410 <Uart_peek+0x64>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <Uart_peek+0x78>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <Uart_peek+0x78>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001408:	5cd3      	ldrb	r3, [r2, r3]
 800140a:	e001      	b.n	8001410 <Uart_peek+0x64>
		  }
	}

	return -1;
 800140c:	2301      	movs	r3, #1
 800140e:	425b      	negs	r3, r3
}
 8001410:	0018      	movs	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	b002      	add	sp, #8
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200001bc 	.word	0x200001bc
 800141c:	200001ac 	.word	0x200001ac
 8001420:	20000244 	.word	0x20000244
 8001424:	200001b4 	.word	0x200001b4

08001428 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	4b26      	ldr	r3, [pc, #152]	@ (80014cc <Uart_read+0xa4>)
 8001434:	429a      	cmp	r2, r3
 8001436:	d11f      	bne.n	8001478 <Uart_read+0x50>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8001438:	4b25      	ldr	r3, [pc, #148]	@ (80014d0 <Uart_read+0xa8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800143e:	4b24      	ldr	r3, [pc, #144]	@ (80014d0 <Uart_read+0xa8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001444:	429a      	cmp	r2, r3
 8001446:	d102      	bne.n	800144e <Uart_read+0x26>
		  {
		    return -1;
 8001448:	2301      	movs	r3, #1
 800144a:	425b      	negs	r3, r3
 800144c:	e03a      	b.n	80014c4 <Uart_read+0x9c>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 800144e:	4b20      	ldr	r3, [pc, #128]	@ (80014d0 <Uart_read+0xa8>)
 8001450:	6819      	ldr	r1, [r3, #0]
 8001452:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <Uart_read+0xa8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001458:	200e      	movs	r0, #14
 800145a:	183b      	adds	r3, r7, r0
 800145c:	5c8a      	ldrb	r2, [r1, r2]
 800145e:	701a      	strb	r2, [r3, #0]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <Uart_read+0xa8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <Uart_read+0xa8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	213f      	movs	r1, #63	@ 0x3f
 800146e:	400a      	ands	r2, r1
 8001470:	645a      	str	r2, [r3, #68]	@ 0x44
		    return c;
 8001472:	183b      	adds	r3, r7, r0
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	e025      	b.n	80014c4 <Uart_read+0x9c>
		  }
	}

	else if (uart == pc_uart)
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <Uart_read+0xac>)
 800147c:	429a      	cmp	r2, r3
 800147e:	d11f      	bne.n	80014c0 <Uart_read+0x98>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <Uart_read+0xb0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001486:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <Uart_read+0xb0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148c:	429a      	cmp	r2, r3
 800148e:	d102      	bne.n	8001496 <Uart_read+0x6e>
		  {
		    return -1;
 8001490:	2301      	movs	r3, #1
 8001492:	425b      	negs	r3, r3
 8001494:	e016      	b.n	80014c4 <Uart_read+0x9c>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8001496:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <Uart_read+0xb0>)
 8001498:	6819      	ldr	r1, [r3, #0]
 800149a:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <Uart_read+0xb0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80014a0:	200f      	movs	r0, #15
 80014a2:	183b      	adds	r3, r7, r0
 80014a4:	5c8a      	ldrb	r2, [r1, r2]
 80014a6:	701a      	strb	r2, [r3, #0]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 80014a8:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <Uart_read+0xb0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <Uart_read+0xb0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	213f      	movs	r1, #63	@ 0x3f
 80014b6:	400a      	ands	r2, r1
 80014b8:	645a      	str	r2, [r3, #68]	@ 0x44
		    return c;
 80014ba:	183b      	adds	r3, r7, r0
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	e001      	b.n	80014c4 <Uart_read+0x9c>
		  }
	}

	else return -1;
 80014c0:	2301      	movs	r3, #1
 80014c2:	425b      	negs	r3, r3
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b004      	add	sp, #16
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200001bc 	.word	0x200001bc
 80014d0:	200001ac 	.word	0x200001ac
 80014d4:	20000244 	.word	0x20000244
 80014d8:	200001b4 	.word	0x200001b4

080014dc <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
	if (c>=0)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	db4e      	blt.n	800158a <Uart_write+0xae>
	{
		if (uart == device_uart){
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	4b29      	ldr	r3, [pc, #164]	@ (8001594 <Uart_write+0xb8>)
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d123      	bne.n	800153c <Uart_write+0x60>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <Uart_write+0xbc>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	3301      	adds	r3, #1
 80014fc:	001a      	movs	r2, r3
 80014fe:	233f      	movs	r3, #63	@ 0x3f
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8001504:	46c0      	nop			@ (mov r8, r8)
 8001506:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <Uart_write+0xbc>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	429a      	cmp	r2, r3
 8001510:	d0f9      	beq.n	8001506 <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8001512:	4b21      	ldr	r3, [pc, #132]	@ (8001598 <Uart_write+0xbc>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <Uart_write+0xbc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	b2c9      	uxtb	r1, r1
 8001520:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8001522:	4b1d      	ldr	r3, [pc, #116]	@ (8001598 <Uart_write+0xbc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	641a      	str	r2, [r3, #64]	@ 0x40

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 800152a:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <Uart_write+0xb8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <Uart_write+0xb8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2180      	movs	r1, #128	@ 0x80
 8001536:	430a      	orrs	r2, r1
 8001538:	601a      	str	r2, [r3, #0]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 800153a:	e026      	b.n	800158a <Uart_write+0xae>
		else if (uart == pc_uart){
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	4b17      	ldr	r3, [pc, #92]	@ (800159c <Uart_write+0xc0>)
 8001540:	429a      	cmp	r2, r3
 8001542:	d122      	bne.n	800158a <Uart_write+0xae>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8001544:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <Uart_write+0xc4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154a:	3301      	adds	r3, #1
 800154c:	001a      	movs	r2, r3
 800154e:	233f      	movs	r3, #63	@ 0x3f
 8001550:	4013      	ands	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8001554:	46c0      	nop			@ (mov r8, r8)
 8001556:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <Uart_write+0xc4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	429a      	cmp	r2, r3
 8001560:	d0f9      	beq.n	8001556 <Uart_write+0x7a>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8001562:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <Uart_write+0xc4>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <Uart_write+0xc4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	b2c9      	uxtb	r1, r1
 8001570:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8001572:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <Uart_write+0xc4>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	641a      	str	r2, [r3, #64]	@ 0x40
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <Uart_write+0xc0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <Uart_write+0xc0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2180      	movs	r1, #128	@ 0x80
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
}
 800158a:	46c0      	nop			@ (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b004      	add	sp, #16
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	200001bc 	.word	0x200001bc
 8001598:	200001b0 	.word	0x200001b0
 800159c:	20000244 	.word	0x20000244
 80015a0:	200001b8 	.word	0x200001b8

080015a4 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <IsDataAvailable+0x64>)
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d10f      	bne.n	80015d4 <IsDataAvailable+0x30>
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <IsDataAvailable+0x68>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b13      	ldr	r3, [pc, #76]	@ (800160c <IsDataAvailable+0x68>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	3340      	adds	r3, #64	@ 0x40
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	001a      	movs	r2, r3
 80015ce:	233f      	movs	r3, #63	@ 0x3f
 80015d0:	4013      	ands	r3, r2
 80015d2:	e015      	b.n	8001600 <IsDataAvailable+0x5c>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <IsDataAvailable+0x6c>)
 80015d8:	429a      	cmp	r2, r3
 80015da:	d10f      	bne.n	80015fc <IsDataAvailable+0x58>
 80015dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <IsDataAvailable+0x70>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <IsDataAvailable+0x70>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	3340      	adds	r3, #64	@ 0x40
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	001a      	movs	r2, r3
 80015f6:	233f      	movs	r3, #63	@ 0x3f
 80015f8:	4013      	ands	r3, r2
 80015fa:	e001      	b.n	8001600 <IsDataAvailable+0x5c>
	return -1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	425b      	negs	r3, r3
}
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	b002      	add	sp, #8
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200001bc 	.word	0x200001bc
 800160c:	200001ac 	.word	0x200001ac
 8001610:	20000244 	.word	0x20000244
 8001614:	200001b4 	.word	0x200001b4

08001618 <Uart_sendstring>:
	}
	return 1;
}

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8001622:	e009      	b.n	8001638 <Uart_sendstring+0x20>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	001a      	movs	r2, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	0019      	movs	r1, r3
 8001632:	0010      	movs	r0, r2
 8001634:	f7ff ff52 	bl	80014dc <Uart_write>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f1      	bne.n	8001624 <Uart_sendstring+0xc>
}
 8001640:	46c0      	nop			@ (mov r8, r8)
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	46bd      	mov	sp, r7
 8001646:	b002      	add	sp, #8
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	0018      	movs	r0, r3
 8001660:	f7fe fd50 	bl	8000104 <strlen>
 8001664:	0003      	movs	r3, r0
 8001666:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 800166c:	46c0      	nop			@ (mov r8, r8)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	0018      	movs	r0, r3
 8001672:	f7ff ff97 	bl	80015a4 <IsDataAvailable>
 8001676:	1e03      	subs	r3, r0, #0
 8001678:	d0f9      	beq.n	800166e <Copy_upto+0x22>
	while (Uart_peek(uart) != string[so_far])
 800167a:	e01c      	b.n	80016b6 <Copy_upto+0x6a>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 800167c:	4b31      	ldr	r3, [pc, #196]	@ (8001744 <Copy_upto+0xf8>)
 800167e:	6819      	ldr	r1, [r3, #0]
 8001680:	4b30      	ldr	r3, [pc, #192]	@ (8001744 <Copy_upto+0xf8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	68b8      	ldr	r0, [r7, #8]
 800168a:	18c3      	adds	r3, r0, r3
 800168c:	5c8a      	ldrb	r2, [r1, r2]
 800168e:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001690:	4b2c      	ldr	r3, [pc, #176]	@ (8001744 <Copy_upto+0xf8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	4b2a      	ldr	r3, [pc, #168]	@ (8001744 <Copy_upto+0xf8>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	213f      	movs	r1, #63	@ 0x3f
 800169e:	400a      	ands	r2, r1
 80016a0:	645a      	str	r2, [r3, #68]	@ 0x44
			indx++;
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	3301      	adds	r3, #1
 80016a6:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 80016a8:	46c0      	nop			@ (mov r8, r8)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff ff79 	bl	80015a4 <IsDataAvailable>
 80016b2:	1e03      	subs	r3, r0, #0
 80016b4:	d0f9      	beq.n	80016aa <Copy_upto+0x5e>
	while (Uart_peek(uart) != string[so_far])
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	0018      	movs	r0, r3
 80016ba:	f7ff fe77 	bl	80013ac <Uart_peek>
 80016be:	0001      	movs	r1, r0
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	18d3      	adds	r3, r2, r3
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	4299      	cmp	r1, r3
 80016ca:	d1d7      	bne.n	800167c <Copy_upto+0x30>

		}
	while (Uart_peek(uart) == string [so_far])
 80016cc:	e01c      	b.n	8001708 <Copy_upto+0xbc>
	{
		so_far++;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3301      	adds	r3, #1
 80016d2:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	0018      	movs	r0, r3
 80016d8:	f7ff fea6 	bl	8001428 <Uart_read>
 80016dc:	0001      	movs	r1, r0
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	61ba      	str	r2, [r7, #24]
 80016e4:	001a      	movs	r2, r3
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	189b      	adds	r3, r3, r2
 80016ea:	b2ca      	uxtb	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d101      	bne.n	80016fa <Copy_upto+0xae>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e020      	b.n	800173c <Copy_upto+0xf0>
		while (!IsDataAvailable(uart));
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	0018      	movs	r0, r3
 8001700:	f7ff ff50 	bl	80015a4 <IsDataAvailable>
 8001704:	1e03      	subs	r3, r0, #0
 8001706:	d0f9      	beq.n	80016fc <Copy_upto+0xb0>
	while (Uart_peek(uart) == string [so_far])
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	0018      	movs	r0, r3
 800170c:	f7ff fe4e 	bl	80013ac <Uart_peek>
 8001710:	0001      	movs	r1, r0
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	18d3      	adds	r3, r2, r3
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	4299      	cmp	r1, r3
 800171c:	d0d7      	beq.n	80016ce <Copy_upto+0x82>
	}

	if (so_far != len)
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	429a      	cmp	r2, r3
 8001724:	d002      	beq.n	800172c <Copy_upto+0xe0>
	{
		so_far = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
		goto again;
 800172a:	e79f      	b.n	800166c <Copy_upto+0x20>
	}

	if (so_far == len) return 1;
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	429a      	cmp	r2, r3
 8001732:	d101      	bne.n	8001738 <Copy_upto+0xec>
 8001734:	2301      	movs	r3, #1
 8001736:	e001      	b.n	800173c <Copy_upto+0xf0>
	else return -1;
 8001738:	2301      	movs	r3, #1
 800173a:	425b      	negs	r3, r3

}
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	b008      	add	sp, #32
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200001ac 	.word	0x200001ac

08001748 <Wait_for>:

int Wait_for (char *string, UART_HandleTypeDef *uart)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	0018      	movs	r0, r3
 800175a:	f7fe fcd3 	bl	8000104 <strlen>
 800175e:	0003      	movs	r3, r0
 8001760:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable(uart));
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	0018      	movs	r0, r3
 8001768:	f7ff ff1c 	bl	80015a4 <IsDataAvailable>
 800176c:	1e03      	subs	r3, r0, #0
 800176e:	d0f9      	beq.n	8001764 <Wait_for+0x1c>
	if (uart == device_uart)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	4b32      	ldr	r3, [pc, #200]	@ (800183c <Wait_for+0xf4>)
 8001774:	429a      	cmp	r2, r3
 8001776:	d115      	bne.n	80017a4 <Wait_for+0x5c>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8001778:	e008      	b.n	800178c <Wait_for+0x44>
 800177a:	4b31      	ldr	r3, [pc, #196]	@ (8001840 <Wait_for+0xf8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	4b2f      	ldr	r3, [pc, #188]	@ (8001840 <Wait_for+0xf8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	213f      	movs	r1, #63	@ 0x3f
 8001788:	400a      	ands	r2, r1
 800178a:	645a      	str	r2, [r3, #68]	@ 0x44
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	0018      	movs	r0, r3
 8001790:	f7ff fe0c 	bl	80013ac <Uart_peek>
 8001794:	0001      	movs	r1, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	18d3      	adds	r3, r2, r3
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	4299      	cmp	r1, r3
 80017a0:	d1eb      	bne.n	800177a <Wait_for+0x32>
 80017a2:	e02d      	b.n	8001800 <Wait_for+0xb8>
	else if (uart == pc_uart)
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	4b27      	ldr	r3, [pc, #156]	@ (8001844 <Wait_for+0xfc>)
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d129      	bne.n	8001800 <Wait_for+0xb8>
		while (Uart_peek(uart) != string[so_far]) _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 80017ac:	e008      	b.n	80017c0 <Wait_for+0x78>
 80017ae:	4b26      	ldr	r3, [pc, #152]	@ (8001848 <Wait_for+0x100>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <Wait_for+0x100>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	213f      	movs	r1, #63	@ 0x3f
 80017bc:	400a      	ands	r2, r1
 80017be:	645a      	str	r2, [r3, #68]	@ 0x44
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	0018      	movs	r0, r3
 80017c4:	f7ff fdf2 	bl	80013ac <Uart_peek>
 80017c8:	0001      	movs	r1, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	18d3      	adds	r3, r2, r3
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	4299      	cmp	r1, r3
 80017d4:	d1eb      	bne.n	80017ae <Wait_for+0x66>
	while (Uart_peek(uart) == string [so_far])
 80017d6:	e013      	b.n	8001800 <Wait_for+0xb8>
	{
		so_far++;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3301      	adds	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7ff fe21 	bl	8001428 <Uart_read>
		if (so_far == len) return 1;
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d101      	bne.n	80017f2 <Wait_for+0xaa>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e020      	b.n	8001834 <Wait_for+0xec>
		while (!IsDataAvailable(uart));
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7ff fed4 	bl	80015a4 <IsDataAvailable>
 80017fc:	1e03      	subs	r3, r0, #0
 80017fe:	d0f9      	beq.n	80017f4 <Wait_for+0xac>
	while (Uart_peek(uart) == string [so_far])
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	0018      	movs	r0, r3
 8001804:	f7ff fdd2 	bl	80013ac <Uart_peek>
 8001808:	0001      	movs	r1, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	18d3      	adds	r3, r2, r3
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	4299      	cmp	r1, r3
 8001814:	d0e0      	beq.n	80017d8 <Wait_for+0x90>
	}

	if (so_far != len)
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	429a      	cmp	r2, r3
 800181c:	d002      	beq.n	8001824 <Wait_for+0xdc>
	{
		so_far = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]
		goto again;
 8001822:	e79e      	b.n	8001762 <Wait_for+0x1a>
	}

	if (so_far == len) return 1;
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	429a      	cmp	r2, r3
 800182a:	d101      	bne.n	8001830 <Wait_for+0xe8>
 800182c:	2301      	movs	r3, #1
 800182e:	e001      	b.n	8001834 <Wait_for+0xec>
	else return -1;
 8001830:	2301      	movs	r3, #1
 8001832:	425b      	negs	r3, r3
}
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b004      	add	sp, #16
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200001bc 	.word	0x200001bc
 8001840:	200001ac 	.word	0x200001ac
 8001844:	20000244 	.word	0x20000244
 8001848:	200001b4 	.word	0x200001b4

0800184c <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2220      	movs	r2, #32
 8001868:	4013      	ands	r3, r2
 800186a:	d028      	beq.n	80018be <Uart_isr+0x72>
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	2220      	movs	r2, #32
 8001870:	4013      	ands	r3, r2
 8001872:	d024      	beq.n	80018be <Uart_isr+0x72>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->ISR;                       /* Read status register */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001880:	b29a      	uxth	r2, r3
 8001882:	210f      	movs	r1, #15
 8001884:	187b      	adds	r3, r7, r1
 8001886:	701a      	strb	r2, [r3, #0]
        if (huart == device_uart)
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4b3f      	ldr	r3, [pc, #252]	@ (8001988 <Uart_isr+0x13c>)
 800188c:	429a      	cmp	r2, r3
 800188e:	d108      	bne.n	80018a2 <Uart_isr+0x56>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8001890:	4b3e      	ldr	r3, [pc, #248]	@ (800198c <Uart_isr+0x140>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	187b      	adds	r3, r7, r1
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	0011      	movs	r1, r2
 800189a:	0018      	movs	r0, r3
 800189c:	f7ff fd66 	bl	800136c <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 80018a0:	e06b      	b.n	800197a <Uart_isr+0x12e>
        else if (huart == pc_uart)
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001990 <Uart_isr+0x144>)
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d167      	bne.n	800197a <Uart_isr+0x12e>
           	store_char (c, _rx_buffer2);  // store data in buffer
 80018aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001994 <Uart_isr+0x148>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	230f      	movs	r3, #15
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	0011      	movs	r1, r2
 80018b6:	0018      	movs	r0, r3
 80018b8:	f7ff fd58 	bl	800136c <store_char>
        return;
 80018bc:	e05d      	b.n	800197a <Uart_isr+0x12e>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2280      	movs	r2, #128	@ 0x80
 80018c2:	4013      	ands	r3, r2
 80018c4:	d05c      	beq.n	8001980 <Uart_isr+0x134>
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	2280      	movs	r2, #128	@ 0x80
 80018ca:	4013      	ands	r3, r2
 80018cc:	d058      	beq.n	8001980 <Uart_isr+0x134>
    {
    	if (huart == device_uart){
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001988 <Uart_isr+0x13c>)
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d126      	bne.n	8001924 <Uart_isr+0xd8>
    	if(tx_buffer1.head == tx_buffer1.tail)
 80018d6:	4b30      	ldr	r3, [pc, #192]	@ (8001998 <Uart_isr+0x14c>)
 80018d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018da:	4b2f      	ldr	r3, [pc, #188]	@ (8001998 <Uart_isr+0x14c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	429a      	cmp	r2, r3
 80018e0:	d108      	bne.n	80018f4 <Uart_isr+0xa8>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2180      	movs	r1, #128	@ 0x80
 80018ee:	438a      	bics	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]
        	      huart->Instance->ISR;
        	      huart->Instance->TDR = c;

        	    }
        	}
    	return;
 80018f2:	e044      	b.n	800197e <Uart_isr+0x132>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 80018f4:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <Uart_isr+0x14c>)
 80018f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80018f8:	200d      	movs	r0, #13
 80018fa:	183b      	adds	r3, r7, r0
 80018fc:	4926      	ldr	r1, [pc, #152]	@ (8001998 <Uart_isr+0x14c>)
 80018fe:	5c8a      	ldrb	r2, [r1, r2]
 8001900:	701a      	strb	r2, [r3, #0]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8001902:	4b25      	ldr	r3, [pc, #148]	@ (8001998 <Uart_isr+0x14c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001906:	3301      	adds	r3, #1
 8001908:	223f      	movs	r2, #63	@ 0x3f
 800190a:	401a      	ands	r2, r3
 800190c:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <Uart_isr+0x14c>)
 800190e:	645a      	str	r2, [r3, #68]	@ 0x44
    	      huart->Instance->ISR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->TDR = c;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	183a      	adds	r2, r7, r0
 800191c:	7812      	ldrb	r2, [r2, #0]
 800191e:	b292      	uxth	r2, r2
 8001920:	851a      	strh	r2, [r3, #40]	@ 0x28
    	return;
 8001922:	e02c      	b.n	800197e <Uart_isr+0x132>
    	else if (huart == pc_uart){
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	4b1a      	ldr	r3, [pc, #104]	@ (8001990 <Uart_isr+0x144>)
 8001928:	429a      	cmp	r2, r3
 800192a:	d128      	bne.n	800197e <Uart_isr+0x132>
        	if(tx_buffer2.head == tx_buffer2.tail)
 800192c:	4b1b      	ldr	r3, [pc, #108]	@ (800199c <Uart_isr+0x150>)
 800192e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001930:	4b1a      	ldr	r3, [pc, #104]	@ (800199c <Uart_isr+0x150>)
 8001932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001934:	429a      	cmp	r2, r3
 8001936:	d108      	bne.n	800194a <Uart_isr+0xfe>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2180      	movs	r1, #128	@ 0x80
 8001944:	438a      	bics	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
    	return;
 8001948:	e019      	b.n	800197e <Uart_isr+0x132>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 800194a:	4b14      	ldr	r3, [pc, #80]	@ (800199c <Uart_isr+0x150>)
 800194c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800194e:	200e      	movs	r0, #14
 8001950:	183b      	adds	r3, r7, r0
 8001952:	4912      	ldr	r1, [pc, #72]	@ (800199c <Uart_isr+0x150>)
 8001954:	5c8a      	ldrb	r2, [r1, r2]
 8001956:	701a      	strb	r2, [r3, #0]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001958:	4b10      	ldr	r3, [pc, #64]	@ (800199c <Uart_isr+0x150>)
 800195a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195c:	3301      	adds	r3, #1
 800195e:	223f      	movs	r2, #63	@ 0x3f
 8001960:	401a      	ands	r2, r3
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <Uart_isr+0x150>)
 8001964:	645a      	str	r2, [r3, #68]	@ 0x44
        	      huart->Instance->ISR;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	69db      	ldr	r3, [r3, #28]
        	      huart->Instance->TDR = c;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	183a      	adds	r2, r7, r0
 8001972:	7812      	ldrb	r2, [r2, #0]
 8001974:	b292      	uxth	r2, r2
 8001976:	851a      	strh	r2, [r3, #40]	@ 0x28
    	return;
 8001978:	e001      	b.n	800197e <Uart_isr+0x132>
        return;
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	e000      	b.n	8001980 <Uart_isr+0x134>
    	return;
 800197e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8001980:	46bd      	mov	sp, r7
 8001982:	b006      	add	sp, #24
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			@ (mov r8, r8)
 8001988:	200001bc 	.word	0x200001bc
 800198c:	200001ac 	.word	0x200001ac
 8001990:	20000244 	.word	0x20000244
 8001994:	200001b4 	.word	0x200001b4
 8001998:	200000d4 	.word	0x200000d4
 800199c:	20000164 	.word	0x20000164

080019a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019a4:	f000 faae 	bl	8001f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019a8:	f000 f814 	bl	80019d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ac:	f000 f8d6 	bl	8001b5c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80019b0:	f000 f874 	bl	8001a9c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80019b4:	f000 f8a2 	bl	8001afc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Init("DESKTOP-BFVT10T 8599", "434?tT46");
 80019b8:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <main+0x2c>)
 80019ba:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <main+0x30>)
 80019bc:	0011      	movs	r1, r2
 80019be:	0018      	movs	r0, r3
 80019c0:	f7fe fc3e 	bl	8000240 <ESP_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	Server_Start();
 80019c4:	f7fe fdae 	bl	8000524 <Server_Start>
 80019c8:	e7fc      	b.n	80019c4 <main+0x24>
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	08005128 	.word	0x08005128
 80019d0:	08005134 	.word	0x08005134

080019d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b099      	sub	sp, #100	@ 0x64
 80019d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019da:	242c      	movs	r4, #44	@ 0x2c
 80019dc:	193b      	adds	r3, r7, r4
 80019de:	0018      	movs	r0, r3
 80019e0:	2334      	movs	r3, #52	@ 0x34
 80019e2:	001a      	movs	r2, r3
 80019e4:	2100      	movs	r1, #0
 80019e6:	f002 fbcb 	bl	8004180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ea:	231c      	movs	r3, #28
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	0018      	movs	r0, r3
 80019f0:	2310      	movs	r3, #16
 80019f2:	001a      	movs	r2, r3
 80019f4:	2100      	movs	r1, #0
 80019f6:	f002 fbc3 	bl	8004180 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019fa:	003b      	movs	r3, r7
 80019fc:	0018      	movs	r0, r3
 80019fe:	231c      	movs	r3, #28
 8001a00:	001a      	movs	r2, r3
 8001a02:	2100      	movs	r1, #0
 8001a04:	f002 fbbc 	bl	8004180 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a08:	0021      	movs	r1, r4
 8001a0a:	187b      	adds	r3, r7, r1
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a10:	187b      	adds	r3, r7, r1
 8001a12:	2201      	movs	r2, #1
 8001a14:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a16:	187b      	adds	r3, r7, r1
 8001a18:	2210      	movs	r2, #16
 8001a1a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1c:	187b      	adds	r3, r7, r1
 8001a1e:	2202      	movs	r2, #2
 8001a20:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a22:	187b      	adds	r3, r7, r1
 8001a24:	2280      	movs	r2, #128	@ 0x80
 8001a26:	0212      	lsls	r2, r2, #8
 8001a28:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001a2a:	187b      	adds	r3, r7, r1
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	2200      	movs	r2, #0
 8001a34:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f000 fddd 	bl	80025f8 <HAL_RCC_OscConfig>
 8001a3e:	1e03      	subs	r3, r0, #0
 8001a40:	d001      	beq.n	8001a46 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001a42:	f000 f8fd 	bl	8001c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a46:	211c      	movs	r1, #28
 8001a48:	187b      	adds	r3, r7, r1
 8001a4a:	2207      	movs	r2, #7
 8001a4c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a4e:	187b      	adds	r3, r7, r1
 8001a50:	2202      	movs	r2, #2
 8001a52:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a54:	187b      	adds	r3, r7, r1
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	2100      	movs	r1, #0
 8001a64:	0018      	movs	r0, r3
 8001a66:	f001 f94d 	bl	8002d04 <HAL_RCC_ClockConfig>
 8001a6a:	1e03      	subs	r3, r0, #0
 8001a6c:	d001      	beq.n	8001a72 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001a6e:	f000 f8e7 	bl	8001c40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8001a72:	003b      	movs	r3, r7
 8001a74:	2203      	movs	r2, #3
 8001a76:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001a78:	003b      	movs	r3, r7
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a7e:	003b      	movs	r3, r7
 8001a80:	2200      	movs	r2, #0
 8001a82:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a84:	003b      	movs	r3, r7
 8001a86:	0018      	movs	r0, r3
 8001a88:	f001 faa8 	bl	8002fdc <HAL_RCCEx_PeriphCLKConfig>
 8001a8c:	1e03      	subs	r3, r0, #0
 8001a8e:	d001      	beq.n	8001a94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a90:	f000 f8d6 	bl	8001c40 <Error_Handler>
  }
}
 8001a94:	46c0      	nop			@ (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b019      	add	sp, #100	@ 0x64
 8001a9a:	bd90      	pop	{r4, r7, pc}

08001a9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001aa2:	4a15      	ldr	r2, [pc, #84]	@ (8001af8 <MX_USART1_UART_Init+0x5c>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001aa8:	22e1      	movs	r2, #225	@ 0xe1
 8001aaa:	0252      	lsls	r2, r2, #9
 8001aac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ade:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <MX_USART1_UART_Init+0x58>)
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f001 fb7b 	bl	80031dc <HAL_UART_Init>
 8001ae6:	1e03      	subs	r3, r0, #0
 8001ae8:	d001      	beq.n	8001aee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001aea:	f000 f8a9 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200001bc 	.word	0x200001bc
 8001af8:	40013800 	.word	0x40013800

08001afc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b00:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <MX_USART2_UART_Init+0x58>)
 8001b02:	4a15      	ldr	r2, [pc, #84]	@ (8001b58 <MX_USART2_UART_Init+0x5c>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b06:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <MX_USART2_UART_Init+0x58>)
 8001b08:	22e1      	movs	r2, #225	@ 0xe1
 8001b0a:	0252      	lsls	r2, r2, #9
 8001b0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <MX_USART2_UART_Init+0x58>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <MX_USART2_UART_Init+0x58>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <MX_USART2_UART_Init+0x58>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	@ (8001b54 <MX_USART2_UART_Init+0x58>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	@ (8001b54 <MX_USART2_UART_Init+0x58>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <MX_USART2_UART_Init+0x58>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <MX_USART2_UART_Init+0x58>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b38:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <MX_USART2_UART_Init+0x58>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b3e:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <MX_USART2_UART_Init+0x58>)
 8001b40:	0018      	movs	r0, r3
 8001b42:	f001 fb4b 	bl	80031dc <HAL_UART_Init>
 8001b46:	1e03      	subs	r3, r0, #0
 8001b48:	d001      	beq.n	8001b4e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b4a:	f000 f879 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000244 	.word	0x20000244
 8001b58:	40004400 	.word	0x40004400

08001b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b089      	sub	sp, #36	@ 0x24
 8001b60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b62:	240c      	movs	r4, #12
 8001b64:	193b      	adds	r3, r7, r4
 8001b66:	0018      	movs	r0, r3
 8001b68:	2314      	movs	r3, #20
 8001b6a:	001a      	movs	r2, r3
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	f002 fb07 	bl	8004180 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b72:	4b31      	ldr	r3, [pc, #196]	@ (8001c38 <MX_GPIO_Init+0xdc>)
 8001b74:	695a      	ldr	r2, [r3, #20]
 8001b76:	4b30      	ldr	r3, [pc, #192]	@ (8001c38 <MX_GPIO_Init+0xdc>)
 8001b78:	2180      	movs	r1, #128	@ 0x80
 8001b7a:	03c9      	lsls	r1, r1, #15
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	4b2d      	ldr	r3, [pc, #180]	@ (8001c38 <MX_GPIO_Init+0xdc>)
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	2380      	movs	r3, #128	@ 0x80
 8001b86:	03db      	lsls	r3, r3, #15
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c38 <MX_GPIO_Init+0xdc>)
 8001b90:	695a      	ldr	r2, [r3, #20]
 8001b92:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <MX_GPIO_Init+0xdc>)
 8001b94:	2180      	movs	r1, #128	@ 0x80
 8001b96:	0289      	lsls	r1, r1, #10
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	615a      	str	r2, [r3, #20]
 8001b9c:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <MX_GPIO_Init+0xdc>)
 8001b9e:	695a      	ldr	r2, [r3, #20]
 8001ba0:	2380      	movs	r3, #128	@ 0x80
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001baa:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <MX_GPIO_Init+0xdc>)
 8001bac:	695a      	ldr	r2, [r3, #20]
 8001bae:	4b22      	ldr	r3, [pc, #136]	@ (8001c38 <MX_GPIO_Init+0xdc>)
 8001bb0:	2180      	movs	r1, #128	@ 0x80
 8001bb2:	02c9      	lsls	r1, r1, #11
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	615a      	str	r2, [r3, #20]
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c38 <MX_GPIO_Init+0xdc>)
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	02db      	lsls	r3, r3, #11
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001bc6:	2390      	movs	r3, #144	@ 0x90
 8001bc8:	05db      	lsls	r3, r3, #23
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2120      	movs	r1, #32
 8001bce:	0018      	movs	r0, r3
 8001bd0:	f000 fcf4 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001bd4:	23fc      	movs	r3, #252	@ 0xfc
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	4818      	ldr	r0, [pc, #96]	@ (8001c3c <MX_GPIO_Init+0xe0>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	0019      	movs	r1, r3
 8001bde:	f000 fced 	bl	80025bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001be2:	193b      	adds	r3, r7, r4
 8001be4:	2220      	movs	r2, #32
 8001be6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be8:	193b      	adds	r3, r7, r4
 8001bea:	2201      	movs	r2, #1
 8001bec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	193b      	adds	r3, r7, r4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	193b      	adds	r3, r7, r4
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	193a      	adds	r2, r7, r4
 8001bfc:	2390      	movs	r3, #144	@ 0x90
 8001bfe:	05db      	lsls	r3, r3, #23
 8001c00:	0011      	movs	r1, r2
 8001c02:	0018      	movs	r0, r3
 8001c04:	f000 fb62 	bl	80022cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8001c08:	0021      	movs	r1, r4
 8001c0a:	187b      	adds	r3, r7, r1
 8001c0c:	22fc      	movs	r2, #252	@ 0xfc
 8001c0e:	0212      	lsls	r2, r2, #8
 8001c10:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	187b      	adds	r3, r7, r1
 8001c14:	2201      	movs	r2, #1
 8001c16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	187b      	adds	r3, r7, r1
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1e:	187b      	adds	r3, r7, r1
 8001c20:	2200      	movs	r2, #0
 8001c22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c24:	187b      	adds	r3, r7, r1
 8001c26:	4a05      	ldr	r2, [pc, #20]	@ (8001c3c <MX_GPIO_Init+0xe0>)
 8001c28:	0019      	movs	r1, r3
 8001c2a:	0010      	movs	r0, r2
 8001c2c:	f000 fb4e 	bl	80022cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c30:	46c0      	nop			@ (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b009      	add	sp, #36	@ 0x24
 8001c36:	bd90      	pop	{r4, r7, pc}
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	48000400 	.word	0x48000400

08001c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c44:	b672      	cpsid	i
}
 8001c46:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c48:	46c0      	nop			@ (mov r8, r8)
 8001c4a:	e7fd      	b.n	8001c48 <Error_Handler+0x8>

08001c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c54:	699a      	ldr	r2, [r3, #24]
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c58:	2101      	movs	r1, #1
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	619a      	str	r2, [r3, #24]
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2201      	movs	r2, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c70:	2180      	movs	r1, #128	@ 0x80
 8001c72:	0549      	lsls	r1, r1, #21
 8001c74:	430a      	orrs	r2, r1
 8001c76:	61da      	str	r2, [r3, #28]
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	055b      	lsls	r3, r3, #21
 8001c80:	4013      	ands	r3, r2
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b002      	add	sp, #8
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b08d      	sub	sp, #52	@ 0x34
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	241c      	movs	r4, #28
 8001c9e:	193b      	adds	r3, r7, r4
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	2314      	movs	r3, #20
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	f002 fa6a 	bl	8004180 <memset>
  if(huart->Instance==USART1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a41      	ldr	r2, [pc, #260]	@ (8001db8 <HAL_UART_MspInit+0x124>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d13c      	bne.n	8001d30 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cb6:	4b41      	ldr	r3, [pc, #260]	@ (8001dbc <HAL_UART_MspInit+0x128>)
 8001cb8:	699a      	ldr	r2, [r3, #24]
 8001cba:	4b40      	ldr	r3, [pc, #256]	@ (8001dbc <HAL_UART_MspInit+0x128>)
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	01c9      	lsls	r1, r1, #7
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	619a      	str	r2, [r3, #24]
 8001cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8001dbc <HAL_UART_MspInit+0x128>)
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	2380      	movs	r3, #128	@ 0x80
 8001cca:	01db      	lsls	r3, r3, #7
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001dbc <HAL_UART_MspInit+0x128>)
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	4b39      	ldr	r3, [pc, #228]	@ (8001dbc <HAL_UART_MspInit+0x128>)
 8001cd8:	2180      	movs	r1, #128	@ 0x80
 8001cda:	0289      	lsls	r1, r1, #10
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	615a      	str	r2, [r3, #20]
 8001ce0:	4b36      	ldr	r3, [pc, #216]	@ (8001dbc <HAL_UART_MspInit+0x128>)
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	2380      	movs	r3, #128	@ 0x80
 8001ce6:	029b      	lsls	r3, r3, #10
 8001ce8:	4013      	ands	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cee:	193b      	adds	r3, r7, r4
 8001cf0:	22c0      	movs	r2, #192	@ 0xc0
 8001cf2:	00d2      	lsls	r2, r2, #3
 8001cf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	0021      	movs	r1, r4
 8001cf8:	187b      	adds	r3, r7, r1
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	187b      	adds	r3, r7, r1
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d04:	187b      	adds	r3, r7, r1
 8001d06:	2203      	movs	r2, #3
 8001d08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	187a      	adds	r2, r7, r1
 8001d12:	2390      	movs	r3, #144	@ 0x90
 8001d14:	05db      	lsls	r3, r3, #23
 8001d16:	0011      	movs	r1, r2
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 fad7 	bl	80022cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	201b      	movs	r0, #27
 8001d24:	f000 fa22 	bl	800216c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d28:	201b      	movs	r0, #27
 8001d2a:	f000 fa34 	bl	8002196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d2e:	e03f      	b.n	8001db0 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a22      	ldr	r2, [pc, #136]	@ (8001dc0 <HAL_UART_MspInit+0x12c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d13a      	bne.n	8001db0 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d3a:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <HAL_UART_MspInit+0x128>)
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dbc <HAL_UART_MspInit+0x128>)
 8001d40:	2180      	movs	r1, #128	@ 0x80
 8001d42:	0289      	lsls	r1, r1, #10
 8001d44:	430a      	orrs	r2, r1
 8001d46:	61da      	str	r2, [r3, #28]
 8001d48:	4b1c      	ldr	r3, [pc, #112]	@ (8001dbc <HAL_UART_MspInit+0x128>)
 8001d4a:	69da      	ldr	r2, [r3, #28]
 8001d4c:	2380      	movs	r3, #128	@ 0x80
 8001d4e:	029b      	lsls	r3, r3, #10
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d56:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_UART_MspInit+0x128>)
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <HAL_UART_MspInit+0x128>)
 8001d5c:	2180      	movs	r1, #128	@ 0x80
 8001d5e:	0289      	lsls	r1, r1, #10
 8001d60:	430a      	orrs	r2, r1
 8001d62:	615a      	str	r2, [r3, #20]
 8001d64:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <HAL_UART_MspInit+0x128>)
 8001d66:	695a      	ldr	r2, [r3, #20]
 8001d68:	2380      	movs	r3, #128	@ 0x80
 8001d6a:	029b      	lsls	r3, r3, #10
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d72:	211c      	movs	r1, #28
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	220c      	movs	r2, #12
 8001d78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	2203      	movs	r2, #3
 8001d8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001d8c:	187b      	adds	r3, r7, r1
 8001d8e:	2201      	movs	r2, #1
 8001d90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	187a      	adds	r2, r7, r1
 8001d94:	2390      	movs	r3, #144	@ 0x90
 8001d96:	05db      	lsls	r3, r3, #23
 8001d98:	0011      	movs	r1, r2
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f000 fa96 	bl	80022cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2100      	movs	r1, #0
 8001da4:	201c      	movs	r0, #28
 8001da6:	f000 f9e1 	bl	800216c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001daa:	201c      	movs	r0, #28
 8001dac:	f000 f9f3 	bl	8002196 <HAL_NVIC_EnableIRQ>
}
 8001db0:	46c0      	nop			@ (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b00d      	add	sp, #52	@ 0x34
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	40013800 	.word	0x40013800
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40004400 	.word	0x40004400

08001dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dc8:	46c0      	nop			@ (mov r8, r8)
 8001dca:	e7fd      	b.n	8001dc8 <NMI_Handler+0x4>

08001dcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd0:	46c0      	nop			@ (mov r8, r8)
 8001dd2:	e7fd      	b.n	8001dd0 <HardFault_Handler+0x4>

08001dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001dd8:	46c0      	nop			@ (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001de2:	46c0      	nop			@ (mov r8, r8)
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dec:	f000 f8d2 	bl	8001f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df0:	46c0      	nop			@ (mov r8, r8)
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <USART1_IRQHandler+0x1c>)
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f7ff fd24 	bl	800184c <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e04:	4b03      	ldr	r3, [pc, #12]	@ (8001e14 <USART1_IRQHandler+0x1c>)
 8001e06:	0018      	movs	r0, r3
 8001e08:	f001 fa3c 	bl	8003284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e0c:	46c0      	nop			@ (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			@ (mov r8, r8)
 8001e14:	200001bc 	.word	0x200001bc

08001e18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <USART2_IRQHandler+0x1c>)
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f7ff fd14 	bl	800184c <Uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e24:	4b03      	ldr	r3, [pc, #12]	@ (8001e34 <USART2_IRQHandler+0x1c>)
 8001e26:	0018      	movs	r0, r3
 8001e28:	f001 fa2c 	bl	8003284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e2c:	46c0      	nop			@ (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			@ (mov r8, r8)
 8001e34:	20000244 	.word	0x20000244

08001e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e40:	4a14      	ldr	r2, [pc, #80]	@ (8001e94 <_sbrk+0x5c>)
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <_sbrk+0x60>)
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e54:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <_sbrk+0x64>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	@ (8001ea0 <_sbrk+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	@ (8001e9c <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	18d3      	adds	r3, r2, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d207      	bcs.n	8001e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e68:	f002 f9b6 	bl	80041d8 <__errno>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	220c      	movs	r2, #12
 8001e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	425b      	negs	r3, r3
 8001e76:	e009      	b.n	8001e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e78:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	@ (8001e9c <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	18d2      	adds	r2, r2, r3
 8001e86:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <_sbrk+0x64>)
 8001e88:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b006      	add	sp, #24
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20008000 	.word	0x20008000
 8001e98:	00000400 	.word	0x00000400
 8001e9c:	200002cc 	.word	0x200002cc
 8001ea0:	20000420 	.word	0x20000420

08001ea4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001ea8:	46c0      	nop			@ (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001eb0:	480d      	ldr	r0, [pc, #52]	@ (8001ee8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eb2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001eb4:	f7ff fff6 	bl	8001ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb8:	480c      	ldr	r0, [pc, #48]	@ (8001eec <LoopForever+0x6>)
  ldr r1, =_edata
 8001eba:	490d      	ldr	r1, [pc, #52]	@ (8001ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef4 <LoopForever+0xe>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec0:	e002      	b.n	8001ec8 <LoopCopyDataInit>

08001ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec6:	3304      	adds	r3, #4

08001ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ecc:	d3f9      	bcc.n	8001ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ece:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8001efc <LoopForever+0x16>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed4:	e001      	b.n	8001eda <LoopFillZerobss>

08001ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed8:	3204      	adds	r2, #4

08001eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001edc:	d3fb      	bcc.n	8001ed6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001ede:	f002 f981 	bl	80041e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ee2:	f7ff fd5d 	bl	80019a0 <main>

08001ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ee6:	e7fe      	b.n	8001ee6 <LoopForever>
  ldr   r0, =_estack
 8001ee8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001ef4:	080051c0 	.word	0x080051c0
  ldr r2, =_sbss
 8001ef8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001efc:	2000041c 	.word	0x2000041c

08001f00 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC1_COMP_IRQHandler>
	...

08001f04 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f08:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <HAL_Init+0x24>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <HAL_Init+0x24>)
 8001f0e:	2110      	movs	r1, #16
 8001f10:	430a      	orrs	r2, r1
 8001f12:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001f14:	2003      	movs	r0, #3
 8001f16:	f000 f809 	bl	8001f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f1a:	f7ff fe97 	bl	8001c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	46c0      	nop			@ (mov r8, r8)
 8001f28:	40022000 	.word	0x40022000

08001f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b590      	push	{r4, r7, lr}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f34:	4b14      	ldr	r3, [pc, #80]	@ (8001f88 <HAL_InitTick+0x5c>)
 8001f36:	681c      	ldr	r4, [r3, #0]
 8001f38:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <HAL_InitTick+0x60>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	23fa      	movs	r3, #250	@ 0xfa
 8001f40:	0098      	lsls	r0, r3, #2
 8001f42:	f7fe f8f1 	bl	8000128 <__udivsi3>
 8001f46:	0003      	movs	r3, r0
 8001f48:	0019      	movs	r1, r3
 8001f4a:	0020      	movs	r0, r4
 8001f4c:	f7fe f8ec 	bl	8000128 <__udivsi3>
 8001f50:	0003      	movs	r3, r0
 8001f52:	0018      	movs	r0, r3
 8001f54:	f000 f92f 	bl	80021b6 <HAL_SYSTICK_Config>
 8001f58:	1e03      	subs	r3, r0, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e00f      	b.n	8001f80 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d80b      	bhi.n	8001f7e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	2301      	movs	r3, #1
 8001f6a:	425b      	negs	r3, r3
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f000 f8fc 	bl	800216c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f74:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_InitTick+0x64>)
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b003      	add	sp, #12
 8001f86:	bd90      	pop	{r4, r7, pc}
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f98:	4b05      	ldr	r3, [pc, #20]	@ (8001fb0 <HAL_IncTick+0x1c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <HAL_IncTick+0x20>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	18d2      	adds	r2, r2, r3
 8001fa4:	4b03      	ldr	r3, [pc, #12]	@ (8001fb4 <HAL_IncTick+0x20>)
 8001fa6:	601a      	str	r2, [r3, #0]
}
 8001fa8:	46c0      	nop			@ (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	46c0      	nop			@ (mov r8, r8)
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	200002d0 	.word	0x200002d0

08001fb8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b02      	ldr	r3, [pc, #8]	@ (8001fc8 <HAL_GetTick+0x10>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			@ (mov r8, r8)
 8001fc8:	200002d0 	.word	0x200002d0

08001fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff fff0 	bl	8001fb8 <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	d005      	beq.n	8001ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <HAL_Delay+0x44>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	001a      	movs	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	189b      	adds	r3, r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	f7ff ffe0 	bl	8001fb8 <HAL_GetTick>
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d8f7      	bhi.n	8001ff4 <HAL_Delay+0x28>
  {
  }
}
 8002004:	46c0      	nop			@ (mov r8, r8)
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	b004      	add	sp, #16
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			@ (mov r8, r8)
 8002010:	20000008 	.word	0x20000008

08002014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	0002      	movs	r2, r0
 800201c:	1dfb      	adds	r3, r7, #7
 800201e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002020:	1dfb      	adds	r3, r7, #7
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b7f      	cmp	r3, #127	@ 0x7f
 8002026:	d809      	bhi.n	800203c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002028:	1dfb      	adds	r3, r7, #7
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	001a      	movs	r2, r3
 800202e:	231f      	movs	r3, #31
 8002030:	401a      	ands	r2, r3
 8002032:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <__NVIC_EnableIRQ+0x30>)
 8002034:	2101      	movs	r1, #1
 8002036:	4091      	lsls	r1, r2
 8002038:	000a      	movs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
  }
}
 800203c:	46c0      	nop			@ (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}
 8002044:	e000e100 	.word	0xe000e100

08002048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	0002      	movs	r2, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	1dfb      	adds	r3, r7, #7
 8002054:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002056:	1dfb      	adds	r3, r7, #7
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b7f      	cmp	r3, #127	@ 0x7f
 800205c:	d828      	bhi.n	80020b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800205e:	4a2f      	ldr	r2, [pc, #188]	@ (800211c <__NVIC_SetPriority+0xd4>)
 8002060:	1dfb      	adds	r3, r7, #7
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b25b      	sxtb	r3, r3
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	33c0      	adds	r3, #192	@ 0xc0
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	589b      	ldr	r3, [r3, r2]
 800206e:	1dfa      	adds	r2, r7, #7
 8002070:	7812      	ldrb	r2, [r2, #0]
 8002072:	0011      	movs	r1, r2
 8002074:	2203      	movs	r2, #3
 8002076:	400a      	ands	r2, r1
 8002078:	00d2      	lsls	r2, r2, #3
 800207a:	21ff      	movs	r1, #255	@ 0xff
 800207c:	4091      	lsls	r1, r2
 800207e:	000a      	movs	r2, r1
 8002080:	43d2      	mvns	r2, r2
 8002082:	401a      	ands	r2, r3
 8002084:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	019b      	lsls	r3, r3, #6
 800208a:	22ff      	movs	r2, #255	@ 0xff
 800208c:	401a      	ands	r2, r3
 800208e:	1dfb      	adds	r3, r7, #7
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	0018      	movs	r0, r3
 8002094:	2303      	movs	r3, #3
 8002096:	4003      	ands	r3, r0
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800209c:	481f      	ldr	r0, [pc, #124]	@ (800211c <__NVIC_SetPriority+0xd4>)
 800209e:	1dfb      	adds	r3, r7, #7
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	b25b      	sxtb	r3, r3
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	430a      	orrs	r2, r1
 80020a8:	33c0      	adds	r3, #192	@ 0xc0
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020ae:	e031      	b.n	8002114 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002120 <__NVIC_SetPriority+0xd8>)
 80020b2:	1dfb      	adds	r3, r7, #7
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	0019      	movs	r1, r3
 80020b8:	230f      	movs	r3, #15
 80020ba:	400b      	ands	r3, r1
 80020bc:	3b08      	subs	r3, #8
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3306      	adds	r3, #6
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	18d3      	adds	r3, r2, r3
 80020c6:	3304      	adds	r3, #4
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	1dfa      	adds	r2, r7, #7
 80020cc:	7812      	ldrb	r2, [r2, #0]
 80020ce:	0011      	movs	r1, r2
 80020d0:	2203      	movs	r2, #3
 80020d2:	400a      	ands	r2, r1
 80020d4:	00d2      	lsls	r2, r2, #3
 80020d6:	21ff      	movs	r1, #255	@ 0xff
 80020d8:	4091      	lsls	r1, r2
 80020da:	000a      	movs	r2, r1
 80020dc:	43d2      	mvns	r2, r2
 80020de:	401a      	ands	r2, r3
 80020e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	019b      	lsls	r3, r3, #6
 80020e6:	22ff      	movs	r2, #255	@ 0xff
 80020e8:	401a      	ands	r2, r3
 80020ea:	1dfb      	adds	r3, r7, #7
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	0018      	movs	r0, r3
 80020f0:	2303      	movs	r3, #3
 80020f2:	4003      	ands	r3, r0
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020f8:	4809      	ldr	r0, [pc, #36]	@ (8002120 <__NVIC_SetPriority+0xd8>)
 80020fa:	1dfb      	adds	r3, r7, #7
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	001c      	movs	r4, r3
 8002100:	230f      	movs	r3, #15
 8002102:	4023      	ands	r3, r4
 8002104:	3b08      	subs	r3, #8
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	430a      	orrs	r2, r1
 800210a:	3306      	adds	r3, #6
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	18c3      	adds	r3, r0, r3
 8002110:	3304      	adds	r3, #4
 8002112:	601a      	str	r2, [r3, #0]
}
 8002114:	46c0      	nop			@ (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	b003      	add	sp, #12
 800211a:	bd90      	pop	{r4, r7, pc}
 800211c:	e000e100 	.word	0xe000e100
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	1e5a      	subs	r2, r3, #1
 8002130:	2380      	movs	r3, #128	@ 0x80
 8002132:	045b      	lsls	r3, r3, #17
 8002134:	429a      	cmp	r2, r3
 8002136:	d301      	bcc.n	800213c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002138:	2301      	movs	r3, #1
 800213a:	e010      	b.n	800215e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213c:	4b0a      	ldr	r3, [pc, #40]	@ (8002168 <SysTick_Config+0x44>)
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	3a01      	subs	r2, #1
 8002142:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002144:	2301      	movs	r3, #1
 8002146:	425b      	negs	r3, r3
 8002148:	2103      	movs	r1, #3
 800214a:	0018      	movs	r0, r3
 800214c:	f7ff ff7c 	bl	8002048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <SysTick_Config+0x44>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <SysTick_Config+0x44>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	0018      	movs	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	b002      	add	sp, #8
 8002164:	bd80      	pop	{r7, pc}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
 8002176:	210f      	movs	r1, #15
 8002178:	187b      	adds	r3, r7, r1
 800217a:	1c02      	adds	r2, r0, #0
 800217c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	187b      	adds	r3, r7, r1
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	b25b      	sxtb	r3, r3
 8002186:	0011      	movs	r1, r2
 8002188:	0018      	movs	r0, r3
 800218a:	f7ff ff5d 	bl	8002048 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	b004      	add	sp, #16
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	0002      	movs	r2, r0
 800219e:	1dfb      	adds	r3, r7, #7
 80021a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a2:	1dfb      	adds	r3, r7, #7
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b25b      	sxtb	r3, r3
 80021a8:	0018      	movs	r0, r3
 80021aa:	f7ff ff33 	bl	8002014 <__NVIC_EnableIRQ>
}
 80021ae:	46c0      	nop			@ (mov r8, r8)
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b002      	add	sp, #8
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7ff ffaf 	bl	8002124 <SysTick_Config>
 80021c6:	0003      	movs	r3, r0
}
 80021c8:	0018      	movs	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b002      	add	sp, #8
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2221      	movs	r2, #33	@ 0x21
 80021dc:	5c9b      	ldrb	r3, [r3, r2]
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d008      	beq.n	80021f6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2204      	movs	r2, #4
 80021e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2220      	movs	r2, #32
 80021ee:	2100      	movs	r1, #0
 80021f0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e020      	b.n	8002238 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	210e      	movs	r1, #14
 8002202:	438a      	bics	r2, r1
 8002204:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2101      	movs	r1, #1
 8002212:	438a      	bics	r2, r1
 8002214:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221e:	2101      	movs	r1, #1
 8002220:	4091      	lsls	r1, r2
 8002222:	000a      	movs	r2, r1
 8002224:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2221      	movs	r2, #33	@ 0x21
 800222a:	2101      	movs	r1, #1
 800222c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2220      	movs	r2, #32
 8002232:	2100      	movs	r1, #0
 8002234:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	b002      	add	sp, #8
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002248:	210f      	movs	r1, #15
 800224a:	187b      	adds	r3, r7, r1
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2221      	movs	r2, #33	@ 0x21
 8002254:	5c9b      	ldrb	r3, [r3, r2]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d006      	beq.n	800226a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2204      	movs	r2, #4
 8002260:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002262:	187b      	adds	r3, r7, r1
 8002264:	2201      	movs	r2, #1
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e028      	b.n	80022bc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	210e      	movs	r1, #14
 8002276:	438a      	bics	r2, r1
 8002278:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2101      	movs	r1, #1
 8002286:	438a      	bics	r2, r1
 8002288:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002292:	2101      	movs	r1, #1
 8002294:	4091      	lsls	r1, r2
 8002296:	000a      	movs	r2, r1
 8002298:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2221      	movs	r2, #33	@ 0x21
 800229e:	2101      	movs	r1, #1
 80022a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2220      	movs	r2, #32
 80022a6:	2100      	movs	r1, #0
 80022a8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d004      	beq.n	80022bc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	0010      	movs	r0, r2
 80022ba:	4798      	blx	r3
    }
  }
  return status;
 80022bc:	230f      	movs	r3, #15
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	781b      	ldrb	r3, [r3, #0]
}
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b004      	add	sp, #16
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b086      	sub	sp, #24
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022da:	e155      	b.n	8002588 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2101      	movs	r1, #1
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4091      	lsls	r1, r2
 80022e6:	000a      	movs	r2, r1
 80022e8:	4013      	ands	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d100      	bne.n	80022f4 <HAL_GPIO_Init+0x28>
 80022f2:	e146      	b.n	8002582 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2203      	movs	r2, #3
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d005      	beq.n	800230c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2203      	movs	r2, #3
 8002306:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002308:	2b02      	cmp	r3, #2
 800230a:	d130      	bne.n	800236e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	409a      	lsls	r2, r3
 800231a:	0013      	movs	r3, r2
 800231c:	43da      	mvns	r2, r3
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4013      	ands	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	409a      	lsls	r2, r3
 800232e:	0013      	movs	r3, r2
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002342:	2201      	movs	r2, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
 8002348:	0013      	movs	r3, r2
 800234a:	43da      	mvns	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	2201      	movs	r2, #1
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2203      	movs	r2, #3
 8002374:	4013      	ands	r3, r2
 8002376:	2b03      	cmp	r3, #3
 8002378:	d017      	beq.n	80023aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	2203      	movs	r2, #3
 8002386:	409a      	lsls	r2, r3
 8002388:	0013      	movs	r3, r2
 800238a:	43da      	mvns	r2, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	409a      	lsls	r2, r3
 800239c:	0013      	movs	r3, r2
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2203      	movs	r2, #3
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d123      	bne.n	80023fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	0092      	lsls	r2, r2, #2
 80023c0:	58d3      	ldr	r3, [r2, r3]
 80023c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2207      	movs	r2, #7
 80023c8:	4013      	ands	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	409a      	lsls	r2, r3
 80023d0:	0013      	movs	r3, r2
 80023d2:	43da      	mvns	r2, r3
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2107      	movs	r1, #7
 80023e2:	400b      	ands	r3, r1
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	409a      	lsls	r2, r3
 80023e8:	0013      	movs	r3, r2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	08da      	lsrs	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3208      	adds	r2, #8
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	6939      	ldr	r1, [r7, #16]
 80023fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	409a      	lsls	r2, r3
 800240c:	0013      	movs	r3, r2
 800240e:	43da      	mvns	r2, r3
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2203      	movs	r2, #3
 800241c:	401a      	ands	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	409a      	lsls	r2, r3
 8002424:	0013      	movs	r3, r2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	23c0      	movs	r3, #192	@ 0xc0
 8002438:	029b      	lsls	r3, r3, #10
 800243a:	4013      	ands	r3, r2
 800243c:	d100      	bne.n	8002440 <HAL_GPIO_Init+0x174>
 800243e:	e0a0      	b.n	8002582 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002440:	4b57      	ldr	r3, [pc, #348]	@ (80025a0 <HAL_GPIO_Init+0x2d4>)
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	4b56      	ldr	r3, [pc, #344]	@ (80025a0 <HAL_GPIO_Init+0x2d4>)
 8002446:	2101      	movs	r1, #1
 8002448:	430a      	orrs	r2, r1
 800244a:	619a      	str	r2, [r3, #24]
 800244c:	4b54      	ldr	r3, [pc, #336]	@ (80025a0 <HAL_GPIO_Init+0x2d4>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2201      	movs	r2, #1
 8002452:	4013      	ands	r3, r2
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002458:	4a52      	ldr	r2, [pc, #328]	@ (80025a4 <HAL_GPIO_Init+0x2d8>)
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	3302      	adds	r3, #2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	589b      	ldr	r3, [r3, r2]
 8002464:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	2203      	movs	r2, #3
 800246a:	4013      	ands	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	220f      	movs	r2, #15
 8002470:	409a      	lsls	r2, r3
 8002472:	0013      	movs	r3, r2
 8002474:	43da      	mvns	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	2390      	movs	r3, #144	@ 0x90
 8002480:	05db      	lsls	r3, r3, #23
 8002482:	429a      	cmp	r2, r3
 8002484:	d019      	beq.n	80024ba <HAL_GPIO_Init+0x1ee>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a47      	ldr	r2, [pc, #284]	@ (80025a8 <HAL_GPIO_Init+0x2dc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d013      	beq.n	80024b6 <HAL_GPIO_Init+0x1ea>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a46      	ldr	r2, [pc, #280]	@ (80025ac <HAL_GPIO_Init+0x2e0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00d      	beq.n	80024b2 <HAL_GPIO_Init+0x1e6>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a45      	ldr	r2, [pc, #276]	@ (80025b0 <HAL_GPIO_Init+0x2e4>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d007      	beq.n	80024ae <HAL_GPIO_Init+0x1e2>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a44      	ldr	r2, [pc, #272]	@ (80025b4 <HAL_GPIO_Init+0x2e8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d101      	bne.n	80024aa <HAL_GPIO_Init+0x1de>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e008      	b.n	80024bc <HAL_GPIO_Init+0x1f0>
 80024aa:	2305      	movs	r3, #5
 80024ac:	e006      	b.n	80024bc <HAL_GPIO_Init+0x1f0>
 80024ae:	2303      	movs	r3, #3
 80024b0:	e004      	b.n	80024bc <HAL_GPIO_Init+0x1f0>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e002      	b.n	80024bc <HAL_GPIO_Init+0x1f0>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <HAL_GPIO_Init+0x1f0>
 80024ba:	2300      	movs	r3, #0
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	2103      	movs	r1, #3
 80024c0:	400a      	ands	r2, r1
 80024c2:	0092      	lsls	r2, r2, #2
 80024c4:	4093      	lsls	r3, r2
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024cc:	4935      	ldr	r1, [pc, #212]	@ (80025a4 <HAL_GPIO_Init+0x2d8>)
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	089b      	lsrs	r3, r3, #2
 80024d2:	3302      	adds	r3, #2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024da:	4b37      	ldr	r3, [pc, #220]	@ (80025b8 <HAL_GPIO_Init+0x2ec>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	43da      	mvns	r2, r3
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	2380      	movs	r3, #128	@ 0x80
 80024f0:	035b      	lsls	r3, r3, #13
 80024f2:	4013      	ands	r3, r2
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024fe:	4b2e      	ldr	r3, [pc, #184]	@ (80025b8 <HAL_GPIO_Init+0x2ec>)
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002504:	4b2c      	ldr	r3, [pc, #176]	@ (80025b8 <HAL_GPIO_Init+0x2ec>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	43da      	mvns	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	2380      	movs	r3, #128	@ 0x80
 800251a:	039b      	lsls	r3, r3, #14
 800251c:	4013      	ands	r3, r2
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002528:	4b23      	ldr	r3, [pc, #140]	@ (80025b8 <HAL_GPIO_Init+0x2ec>)
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800252e:	4b22      	ldr	r3, [pc, #136]	@ (80025b8 <HAL_GPIO_Init+0x2ec>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	43da      	mvns	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4013      	ands	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	2380      	movs	r3, #128	@ 0x80
 8002544:	029b      	lsls	r3, r3, #10
 8002546:	4013      	ands	r3, r2
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002552:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <HAL_GPIO_Init+0x2ec>)
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002558:	4b17      	ldr	r3, [pc, #92]	@ (80025b8 <HAL_GPIO_Init+0x2ec>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	43da      	mvns	r2, r3
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4013      	ands	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	2380      	movs	r3, #128	@ 0x80
 800256e:	025b      	lsls	r3, r3, #9
 8002570:	4013      	ands	r3, r2
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800257c:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <HAL_GPIO_Init+0x2ec>)
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	3301      	adds	r3, #1
 8002586:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	40da      	lsrs	r2, r3
 8002590:	1e13      	subs	r3, r2, #0
 8002592:	d000      	beq.n	8002596 <HAL_GPIO_Init+0x2ca>
 8002594:	e6a2      	b.n	80022dc <HAL_GPIO_Init+0x10>
  } 
}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	46c0      	nop			@ (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b006      	add	sp, #24
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40010000 	.word	0x40010000
 80025a8:	48000400 	.word	0x48000400
 80025ac:	48000800 	.word	0x48000800
 80025b0:	48000c00 	.word	0x48000c00
 80025b4:	48001000 	.word	0x48001000
 80025b8:	40010400 	.word	0x40010400

080025bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	0008      	movs	r0, r1
 80025c6:	0011      	movs	r1, r2
 80025c8:	1cbb      	adds	r3, r7, #2
 80025ca:	1c02      	adds	r2, r0, #0
 80025cc:	801a      	strh	r2, [r3, #0]
 80025ce:	1c7b      	adds	r3, r7, #1
 80025d0:	1c0a      	adds	r2, r1, #0
 80025d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d4:	1c7b      	adds	r3, r7, #1
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025dc:	1cbb      	adds	r3, r7, #2
 80025de:	881a      	ldrh	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025e6:	1cbb      	adds	r3, r7, #2
 80025e8:	881a      	ldrh	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025ee:	46c0      	nop			@ (mov r8, r8)
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b002      	add	sp, #8
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b088      	sub	sp, #32
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d102      	bne.n	800260c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	f000 fb76 	bl	8002cf8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2201      	movs	r2, #1
 8002612:	4013      	ands	r3, r2
 8002614:	d100      	bne.n	8002618 <HAL_RCC_OscConfig+0x20>
 8002616:	e08e      	b.n	8002736 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002618:	4bc5      	ldr	r3, [pc, #788]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	220c      	movs	r2, #12
 800261e:	4013      	ands	r3, r2
 8002620:	2b04      	cmp	r3, #4
 8002622:	d00e      	beq.n	8002642 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002624:	4bc2      	ldr	r3, [pc, #776]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	220c      	movs	r2, #12
 800262a:	4013      	ands	r3, r2
 800262c:	2b08      	cmp	r3, #8
 800262e:	d117      	bne.n	8002660 <HAL_RCC_OscConfig+0x68>
 8002630:	4bbf      	ldr	r3, [pc, #764]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	23c0      	movs	r3, #192	@ 0xc0
 8002636:	025b      	lsls	r3, r3, #9
 8002638:	401a      	ands	r2, r3
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	025b      	lsls	r3, r3, #9
 800263e:	429a      	cmp	r2, r3
 8002640:	d10e      	bne.n	8002660 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002642:	4bbb      	ldr	r3, [pc, #748]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	029b      	lsls	r3, r3, #10
 800264a:	4013      	ands	r3, r2
 800264c:	d100      	bne.n	8002650 <HAL_RCC_OscConfig+0x58>
 800264e:	e071      	b.n	8002734 <HAL_RCC_OscConfig+0x13c>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d000      	beq.n	800265a <HAL_RCC_OscConfig+0x62>
 8002658:	e06c      	b.n	8002734 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	f000 fb4c 	bl	8002cf8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d107      	bne.n	8002678 <HAL_RCC_OscConfig+0x80>
 8002668:	4bb1      	ldr	r3, [pc, #708]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4bb0      	ldr	r3, [pc, #704]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 800266e:	2180      	movs	r1, #128	@ 0x80
 8002670:	0249      	lsls	r1, r1, #9
 8002672:	430a      	orrs	r2, r1
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e02f      	b.n	80026d8 <HAL_RCC_OscConfig+0xe0>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10c      	bne.n	800269a <HAL_RCC_OscConfig+0xa2>
 8002680:	4bab      	ldr	r3, [pc, #684]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4baa      	ldr	r3, [pc, #680]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002686:	49ab      	ldr	r1, [pc, #684]	@ (8002934 <HAL_RCC_OscConfig+0x33c>)
 8002688:	400a      	ands	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	4ba8      	ldr	r3, [pc, #672]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4ba7      	ldr	r3, [pc, #668]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002692:	49a9      	ldr	r1, [pc, #676]	@ (8002938 <HAL_RCC_OscConfig+0x340>)
 8002694:	400a      	ands	r2, r1
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e01e      	b.n	80026d8 <HAL_RCC_OscConfig+0xe0>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b05      	cmp	r3, #5
 80026a0:	d10e      	bne.n	80026c0 <HAL_RCC_OscConfig+0xc8>
 80026a2:	4ba3      	ldr	r3, [pc, #652]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	4ba2      	ldr	r3, [pc, #648]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80026a8:	2180      	movs	r1, #128	@ 0x80
 80026aa:	02c9      	lsls	r1, r1, #11
 80026ac:	430a      	orrs	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	4b9f      	ldr	r3, [pc, #636]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4b9e      	ldr	r3, [pc, #632]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80026b6:	2180      	movs	r1, #128	@ 0x80
 80026b8:	0249      	lsls	r1, r1, #9
 80026ba:	430a      	orrs	r2, r1
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	e00b      	b.n	80026d8 <HAL_RCC_OscConfig+0xe0>
 80026c0:	4b9b      	ldr	r3, [pc, #620]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b9a      	ldr	r3, [pc, #616]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80026c6:	499b      	ldr	r1, [pc, #620]	@ (8002934 <HAL_RCC_OscConfig+0x33c>)
 80026c8:	400a      	ands	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	4b98      	ldr	r3, [pc, #608]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b97      	ldr	r3, [pc, #604]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80026d2:	4999      	ldr	r1, [pc, #612]	@ (8002938 <HAL_RCC_OscConfig+0x340>)
 80026d4:	400a      	ands	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d014      	beq.n	800270a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff fc6a 	bl	8001fb8 <HAL_GetTick>
 80026e4:	0003      	movs	r3, r0
 80026e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ea:	f7ff fc65 	bl	8001fb8 <HAL_GetTick>
 80026ee:	0002      	movs	r2, r0
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b64      	cmp	r3, #100	@ 0x64
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e2fd      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	2380      	movs	r3, #128	@ 0x80
 8002702:	029b      	lsls	r3, r3, #10
 8002704:	4013      	ands	r3, r2
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0xf2>
 8002708:	e015      	b.n	8002736 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7ff fc55 	bl	8001fb8 <HAL_GetTick>
 800270e:	0003      	movs	r3, r0
 8002710:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002714:	f7ff fc50 	bl	8001fb8 <HAL_GetTick>
 8002718:	0002      	movs	r2, r0
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	@ 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e2e8      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002726:	4b82      	ldr	r3, [pc, #520]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	2380      	movs	r3, #128	@ 0x80
 800272c:	029b      	lsls	r3, r3, #10
 800272e:	4013      	ands	r3, r2
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x11c>
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2202      	movs	r2, #2
 800273c:	4013      	ands	r3, r2
 800273e:	d100      	bne.n	8002742 <HAL_RCC_OscConfig+0x14a>
 8002740:	e06c      	b.n	800281c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002742:	4b7b      	ldr	r3, [pc, #492]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	220c      	movs	r2, #12
 8002748:	4013      	ands	r3, r2
 800274a:	d00e      	beq.n	800276a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800274c:	4b78      	ldr	r3, [pc, #480]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	220c      	movs	r2, #12
 8002752:	4013      	ands	r3, r2
 8002754:	2b08      	cmp	r3, #8
 8002756:	d11f      	bne.n	8002798 <HAL_RCC_OscConfig+0x1a0>
 8002758:	4b75      	ldr	r3, [pc, #468]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	23c0      	movs	r3, #192	@ 0xc0
 800275e:	025b      	lsls	r3, r3, #9
 8002760:	401a      	ands	r2, r3
 8002762:	2380      	movs	r3, #128	@ 0x80
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	429a      	cmp	r2, r3
 8002768:	d116      	bne.n	8002798 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800276a:	4b71      	ldr	r3, [pc, #452]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2202      	movs	r2, #2
 8002770:	4013      	ands	r3, r2
 8002772:	d005      	beq.n	8002780 <HAL_RCC_OscConfig+0x188>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d001      	beq.n	8002780 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e2bb      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002780:	4b6b      	ldr	r3, [pc, #428]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	22f8      	movs	r2, #248	@ 0xf8
 8002786:	4393      	bics	r3, r2
 8002788:	0019      	movs	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00da      	lsls	r2, r3, #3
 8002790:	4b67      	ldr	r3, [pc, #412]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002792:	430a      	orrs	r2, r1
 8002794:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002796:	e041      	b.n	800281c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d024      	beq.n	80027ea <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027a0:	4b63      	ldr	r3, [pc, #396]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b62      	ldr	r3, [pc, #392]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80027a6:	2101      	movs	r1, #1
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7ff fc04 	bl	8001fb8 <HAL_GetTick>
 80027b0:	0003      	movs	r3, r0
 80027b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b6:	f7ff fbff 	bl	8001fb8 <HAL_GetTick>
 80027ba:	0002      	movs	r2, r0
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e297      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c8:	4b59      	ldr	r3, [pc, #356]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2202      	movs	r2, #2
 80027ce:	4013      	ands	r3, r2
 80027d0:	d0f1      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d2:	4b57      	ldr	r3, [pc, #348]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	22f8      	movs	r2, #248	@ 0xf8
 80027d8:	4393      	bics	r3, r2
 80027da:	0019      	movs	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	00da      	lsls	r2, r3, #3
 80027e2:	4b53      	ldr	r3, [pc, #332]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80027e4:	430a      	orrs	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e018      	b.n	800281c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ea:	4b51      	ldr	r3, [pc, #324]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4b50      	ldr	r3, [pc, #320]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80027f0:	2101      	movs	r1, #1
 80027f2:	438a      	bics	r2, r1
 80027f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7ff fbdf 	bl	8001fb8 <HAL_GetTick>
 80027fa:	0003      	movs	r3, r0
 80027fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002800:	f7ff fbda 	bl	8001fb8 <HAL_GetTick>
 8002804:	0002      	movs	r2, r0
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e272      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002812:	4b47      	ldr	r3, [pc, #284]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2202      	movs	r2, #2
 8002818:	4013      	ands	r3, r2
 800281a:	d1f1      	bne.n	8002800 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2208      	movs	r2, #8
 8002822:	4013      	ands	r3, r2
 8002824:	d036      	beq.n	8002894 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d019      	beq.n	8002862 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282e:	4b40      	ldr	r3, [pc, #256]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002832:	4b3f      	ldr	r3, [pc, #252]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002834:	2101      	movs	r1, #1
 8002836:	430a      	orrs	r2, r1
 8002838:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7ff fbbd 	bl	8001fb8 <HAL_GetTick>
 800283e:	0003      	movs	r3, r0
 8002840:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002844:	f7ff fbb8 	bl	8001fb8 <HAL_GetTick>
 8002848:	0002      	movs	r2, r0
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e250      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002856:	4b36      	ldr	r3, [pc, #216]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	2202      	movs	r2, #2
 800285c:	4013      	ands	r3, r2
 800285e:	d0f1      	beq.n	8002844 <HAL_RCC_OscConfig+0x24c>
 8002860:	e018      	b.n	8002894 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002862:	4b33      	ldr	r3, [pc, #204]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002864:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002866:	4b32      	ldr	r3, [pc, #200]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002868:	2101      	movs	r1, #1
 800286a:	438a      	bics	r2, r1
 800286c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286e:	f7ff fba3 	bl	8001fb8 <HAL_GetTick>
 8002872:	0003      	movs	r3, r0
 8002874:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002878:	f7ff fb9e 	bl	8001fb8 <HAL_GetTick>
 800287c:	0002      	movs	r2, r0
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e236      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288a:	4b29      	ldr	r3, [pc, #164]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 800288c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288e:	2202      	movs	r2, #2
 8002890:	4013      	ands	r3, r2
 8002892:	d1f1      	bne.n	8002878 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2204      	movs	r2, #4
 800289a:	4013      	ands	r3, r2
 800289c:	d100      	bne.n	80028a0 <HAL_RCC_OscConfig+0x2a8>
 800289e:	e0b5      	b.n	8002a0c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a0:	201f      	movs	r0, #31
 80028a2:	183b      	adds	r3, r7, r0
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a8:	4b21      	ldr	r3, [pc, #132]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	055b      	lsls	r3, r3, #21
 80028b0:	4013      	ands	r3, r2
 80028b2:	d110      	bne.n	80028d6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80028b6:	69da      	ldr	r2, [r3, #28]
 80028b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80028ba:	2180      	movs	r1, #128	@ 0x80
 80028bc:	0549      	lsls	r1, r1, #21
 80028be:	430a      	orrs	r2, r1
 80028c0:	61da      	str	r2, [r3, #28]
 80028c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 80028c4:	69da      	ldr	r2, [r3, #28]
 80028c6:	2380      	movs	r3, #128	@ 0x80
 80028c8:	055b      	lsls	r3, r3, #21
 80028ca:	4013      	ands	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80028d0:	183b      	adds	r3, r7, r0
 80028d2:	2201      	movs	r2, #1
 80028d4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b19      	ldr	r3, [pc, #100]	@ (800293c <HAL_RCC_OscConfig+0x344>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	2380      	movs	r3, #128	@ 0x80
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4013      	ands	r3, r2
 80028e0:	d11a      	bne.n	8002918 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e2:	4b16      	ldr	r3, [pc, #88]	@ (800293c <HAL_RCC_OscConfig+0x344>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4b15      	ldr	r3, [pc, #84]	@ (800293c <HAL_RCC_OscConfig+0x344>)
 80028e8:	2180      	movs	r1, #128	@ 0x80
 80028ea:	0049      	lsls	r1, r1, #1
 80028ec:	430a      	orrs	r2, r1
 80028ee:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028f0:	f7ff fb62 	bl	8001fb8 <HAL_GetTick>
 80028f4:	0003      	movs	r3, r0
 80028f6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028fa:	f7ff fb5d 	bl	8001fb8 <HAL_GetTick>
 80028fe:	0002      	movs	r2, r0
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b64      	cmp	r3, #100	@ 0x64
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e1f5      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290c:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <HAL_RCC_OscConfig+0x344>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	2380      	movs	r3, #128	@ 0x80
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4013      	ands	r3, r2
 8002916:	d0f0      	beq.n	80028fa <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d10f      	bne.n	8002940 <HAL_RCC_OscConfig+0x348>
 8002920:	4b03      	ldr	r3, [pc, #12]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002922:	6a1a      	ldr	r2, [r3, #32]
 8002924:	4b02      	ldr	r3, [pc, #8]	@ (8002930 <HAL_RCC_OscConfig+0x338>)
 8002926:	2101      	movs	r1, #1
 8002928:	430a      	orrs	r2, r1
 800292a:	621a      	str	r2, [r3, #32]
 800292c:	e036      	b.n	800299c <HAL_RCC_OscConfig+0x3a4>
 800292e:	46c0      	nop			@ (mov r8, r8)
 8002930:	40021000 	.word	0x40021000
 8002934:	fffeffff 	.word	0xfffeffff
 8002938:	fffbffff 	.word	0xfffbffff
 800293c:	40007000 	.word	0x40007000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10c      	bne.n	8002962 <HAL_RCC_OscConfig+0x36a>
 8002948:	4bca      	ldr	r3, [pc, #808]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 800294a:	6a1a      	ldr	r2, [r3, #32]
 800294c:	4bc9      	ldr	r3, [pc, #804]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 800294e:	2101      	movs	r1, #1
 8002950:	438a      	bics	r2, r1
 8002952:	621a      	str	r2, [r3, #32]
 8002954:	4bc7      	ldr	r3, [pc, #796]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002956:	6a1a      	ldr	r2, [r3, #32]
 8002958:	4bc6      	ldr	r3, [pc, #792]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 800295a:	2104      	movs	r1, #4
 800295c:	438a      	bics	r2, r1
 800295e:	621a      	str	r2, [r3, #32]
 8002960:	e01c      	b.n	800299c <HAL_RCC_OscConfig+0x3a4>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b05      	cmp	r3, #5
 8002968:	d10c      	bne.n	8002984 <HAL_RCC_OscConfig+0x38c>
 800296a:	4bc2      	ldr	r3, [pc, #776]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 800296c:	6a1a      	ldr	r2, [r3, #32]
 800296e:	4bc1      	ldr	r3, [pc, #772]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002970:	2104      	movs	r1, #4
 8002972:	430a      	orrs	r2, r1
 8002974:	621a      	str	r2, [r3, #32]
 8002976:	4bbf      	ldr	r3, [pc, #764]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002978:	6a1a      	ldr	r2, [r3, #32]
 800297a:	4bbe      	ldr	r3, [pc, #760]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 800297c:	2101      	movs	r1, #1
 800297e:	430a      	orrs	r2, r1
 8002980:	621a      	str	r2, [r3, #32]
 8002982:	e00b      	b.n	800299c <HAL_RCC_OscConfig+0x3a4>
 8002984:	4bbb      	ldr	r3, [pc, #748]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002986:	6a1a      	ldr	r2, [r3, #32]
 8002988:	4bba      	ldr	r3, [pc, #744]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 800298a:	2101      	movs	r1, #1
 800298c:	438a      	bics	r2, r1
 800298e:	621a      	str	r2, [r3, #32]
 8002990:	4bb8      	ldr	r3, [pc, #736]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002992:	6a1a      	ldr	r2, [r3, #32]
 8002994:	4bb7      	ldr	r3, [pc, #732]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002996:	2104      	movs	r1, #4
 8002998:	438a      	bics	r2, r1
 800299a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d014      	beq.n	80029ce <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a4:	f7ff fb08 	bl	8001fb8 <HAL_GetTick>
 80029a8:	0003      	movs	r3, r0
 80029aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ac:	e009      	b.n	80029c2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7ff fb03 	bl	8001fb8 <HAL_GetTick>
 80029b2:	0002      	movs	r2, r0
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	4aaf      	ldr	r2, [pc, #700]	@ (8002c78 <HAL_RCC_OscConfig+0x680>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e19a      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c2:	4bac      	ldr	r3, [pc, #688]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	2202      	movs	r2, #2
 80029c8:	4013      	ands	r3, r2
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x3b6>
 80029cc:	e013      	b.n	80029f6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ce:	f7ff faf3 	bl	8001fb8 <HAL_GetTick>
 80029d2:	0003      	movs	r3, r0
 80029d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d6:	e009      	b.n	80029ec <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029d8:	f7ff faee 	bl	8001fb8 <HAL_GetTick>
 80029dc:	0002      	movs	r2, r0
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	4aa5      	ldr	r2, [pc, #660]	@ (8002c78 <HAL_RCC_OscConfig+0x680>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e185      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ec:	4ba1      	ldr	r3, [pc, #644]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	2202      	movs	r2, #2
 80029f2:	4013      	ands	r3, r2
 80029f4:	d1f0      	bne.n	80029d8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029f6:	231f      	movs	r3, #31
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d105      	bne.n	8002a0c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a00:	4b9c      	ldr	r3, [pc, #624]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002a02:	69da      	ldr	r2, [r3, #28]
 8002a04:	4b9b      	ldr	r3, [pc, #620]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002a06:	499d      	ldr	r1, [pc, #628]	@ (8002c7c <HAL_RCC_OscConfig+0x684>)
 8002a08:	400a      	ands	r2, r1
 8002a0a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2210      	movs	r2, #16
 8002a12:	4013      	ands	r3, r2
 8002a14:	d063      	beq.n	8002ade <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d12a      	bne.n	8002a74 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a1e:	4b95      	ldr	r3, [pc, #596]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002a20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a22:	4b94      	ldr	r3, [pc, #592]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002a24:	2104      	movs	r1, #4
 8002a26:	430a      	orrs	r2, r1
 8002a28:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002a2a:	4b92      	ldr	r3, [pc, #584]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a2e:	4b91      	ldr	r3, [pc, #580]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002a30:	2101      	movs	r1, #1
 8002a32:	430a      	orrs	r2, r1
 8002a34:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a36:	f7ff fabf 	bl	8001fb8 <HAL_GetTick>
 8002a3a:	0003      	movs	r3, r0
 8002a3c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a40:	f7ff faba 	bl	8001fb8 <HAL_GetTick>
 8002a44:	0002      	movs	r2, r0
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e152      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a52:	4b88      	ldr	r3, [pc, #544]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a56:	2202      	movs	r2, #2
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d0f1      	beq.n	8002a40 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a5c:	4b85      	ldr	r3, [pc, #532]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a60:	22f8      	movs	r2, #248	@ 0xf8
 8002a62:	4393      	bics	r3, r2
 8002a64:	0019      	movs	r1, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	00da      	lsls	r2, r3, #3
 8002a6c:	4b81      	ldr	r3, [pc, #516]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a72:	e034      	b.n	8002ade <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	3305      	adds	r3, #5
 8002a7a:	d111      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a7c:	4b7d      	ldr	r3, [pc, #500]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002a7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a80:	4b7c      	ldr	r3, [pc, #496]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002a82:	2104      	movs	r1, #4
 8002a84:	438a      	bics	r2, r1
 8002a86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a88:	4b7a      	ldr	r3, [pc, #488]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8c:	22f8      	movs	r2, #248	@ 0xf8
 8002a8e:	4393      	bics	r3, r2
 8002a90:	0019      	movs	r1, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	00da      	lsls	r2, r3, #3
 8002a98:	4b76      	ldr	r3, [pc, #472]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a9e:	e01e      	b.n	8002ade <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002aa0:	4b74      	ldr	r3, [pc, #464]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002aa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aa4:	4b73      	ldr	r3, [pc, #460]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002aa6:	2104      	movs	r1, #4
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002aac:	4b71      	ldr	r3, [pc, #452]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ab0:	4b70      	ldr	r3, [pc, #448]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	438a      	bics	r2, r1
 8002ab6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab8:	f7ff fa7e 	bl	8001fb8 <HAL_GetTick>
 8002abc:	0003      	movs	r3, r0
 8002abe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ac2:	f7ff fa79 	bl	8001fb8 <HAL_GetTick>
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e111      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ad4:	4b67      	ldr	r3, [pc, #412]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad8:	2202      	movs	r2, #2
 8002ada:	4013      	ands	r3, r2
 8002adc:	d1f1      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d05c      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002ae8:	4b62      	ldr	r3, [pc, #392]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	220c      	movs	r2, #12
 8002aee:	4013      	ands	r3, r2
 8002af0:	2b0c      	cmp	r3, #12
 8002af2:	d00e      	beq.n	8002b12 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002af4:	4b5f      	ldr	r3, [pc, #380]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	220c      	movs	r2, #12
 8002afa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002afc:	2b08      	cmp	r3, #8
 8002afe:	d114      	bne.n	8002b2a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002b00:	4b5c      	ldr	r3, [pc, #368]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	23c0      	movs	r3, #192	@ 0xc0
 8002b06:	025b      	lsls	r3, r3, #9
 8002b08:	401a      	ands	r2, r3
 8002b0a:	23c0      	movs	r3, #192	@ 0xc0
 8002b0c:	025b      	lsls	r3, r3, #9
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d10b      	bne.n	8002b2a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002b12:	4b58      	ldr	r3, [pc, #352]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b16:	2380      	movs	r3, #128	@ 0x80
 8002b18:	029b      	lsls	r3, r3, #10
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d040      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x5a8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d03c      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0e6      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d01b      	beq.n	8002b6a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002b32:	4b50      	ldr	r3, [pc, #320]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002b34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b36:	4b4f      	ldr	r3, [pc, #316]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002b38:	2180      	movs	r1, #128	@ 0x80
 8002b3a:	0249      	lsls	r1, r1, #9
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7ff fa3a 	bl	8001fb8 <HAL_GetTick>
 8002b44:	0003      	movs	r3, r0
 8002b46:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b4a:	f7ff fa35 	bl	8001fb8 <HAL_GetTick>
 8002b4e:	0002      	movs	r2, r0
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e0cd      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002b5c:	4b45      	ldr	r3, [pc, #276]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002b5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b60:	2380      	movs	r3, #128	@ 0x80
 8002b62:	029b      	lsls	r3, r3, #10
 8002b64:	4013      	ands	r3, r2
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x552>
 8002b68:	e01b      	b.n	8002ba2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002b6a:	4b42      	ldr	r3, [pc, #264]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002b6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b6e:	4b41      	ldr	r3, [pc, #260]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002b70:	4943      	ldr	r1, [pc, #268]	@ (8002c80 <HAL_RCC_OscConfig+0x688>)
 8002b72:	400a      	ands	r2, r1
 8002b74:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b76:	f7ff fa1f 	bl	8001fb8 <HAL_GetTick>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b80:	f7ff fa1a 	bl	8001fb8 <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0b2      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002b92:	4b38      	ldr	r3, [pc, #224]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b96:	2380      	movs	r3, #128	@ 0x80
 8002b98:	029b      	lsls	r3, r3, #10
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x588>
 8002b9e:	e000      	b.n	8002ba2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002ba0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d100      	bne.n	8002bac <HAL_RCC_OscConfig+0x5b4>
 8002baa:	e0a4      	b.n	8002cf6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bac:	4b31      	ldr	r3, [pc, #196]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	220c      	movs	r2, #12
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d100      	bne.n	8002bba <HAL_RCC_OscConfig+0x5c2>
 8002bb8:	e078      	b.n	8002cac <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d14c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002bc8:	492e      	ldr	r1, [pc, #184]	@ (8002c84 <HAL_RCC_OscConfig+0x68c>)
 8002bca:	400a      	ands	r2, r1
 8002bcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7ff f9f3 	bl	8001fb8 <HAL_GetTick>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7ff f9ee 	bl	8001fb8 <HAL_GetTick>
 8002bdc:	0002      	movs	r2, r0
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e086      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bea:	4b22      	ldr	r3, [pc, #136]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	049b      	lsls	r3, r3, #18
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfa:	220f      	movs	r2, #15
 8002bfc:	4393      	bics	r3, r2
 8002bfe:	0019      	movs	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c04:	4b1b      	ldr	r3, [pc, #108]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002c06:	430a      	orrs	r2, r1
 8002c08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8002c88 <HAL_RCC_OscConfig+0x690>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	0019      	movs	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002c20:	430a      	orrs	r2, r1
 8002c22:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c24:	4b13      	ldr	r3, [pc, #76]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b12      	ldr	r3, [pc, #72]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002c2a:	2180      	movs	r1, #128	@ 0x80
 8002c2c:	0449      	lsls	r1, r1, #17
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7ff f9c1 	bl	8001fb8 <HAL_GetTick>
 8002c36:	0003      	movs	r3, r0
 8002c38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3c:	f7ff f9bc 	bl	8001fb8 <HAL_GetTick>
 8002c40:	0002      	movs	r2, r0
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e054      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c4e:	4b09      	ldr	r3, [pc, #36]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	2380      	movs	r3, #128	@ 0x80
 8002c54:	049b      	lsls	r3, r3, #18
 8002c56:	4013      	ands	r3, r2
 8002c58:	d0f0      	beq.n	8002c3c <HAL_RCC_OscConfig+0x644>
 8002c5a:	e04c      	b.n	8002cf6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5c:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b04      	ldr	r3, [pc, #16]	@ (8002c74 <HAL_RCC_OscConfig+0x67c>)
 8002c62:	4908      	ldr	r1, [pc, #32]	@ (8002c84 <HAL_RCC_OscConfig+0x68c>)
 8002c64:	400a      	ands	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff f9a6 	bl	8001fb8 <HAL_GetTick>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c70:	e015      	b.n	8002c9e <HAL_RCC_OscConfig+0x6a6>
 8002c72:	46c0      	nop			@ (mov r8, r8)
 8002c74:	40021000 	.word	0x40021000
 8002c78:	00001388 	.word	0x00001388
 8002c7c:	efffffff 	.word	0xefffffff
 8002c80:	fffeffff 	.word	0xfffeffff
 8002c84:	feffffff 	.word	0xfeffffff
 8002c88:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7ff f994 	bl	8001fb8 <HAL_GetTick>
 8002c90:	0002      	movs	r2, r0
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e02c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9e:	4b18      	ldr	r3, [pc, #96]	@ (8002d00 <HAL_RCC_OscConfig+0x708>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	2380      	movs	r3, #128	@ 0x80
 8002ca4:	049b      	lsls	r3, r3, #18
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x694>
 8002caa:	e024      	b.n	8002cf6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e01f      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002cb8:	4b11      	ldr	r3, [pc, #68]	@ (8002d00 <HAL_RCC_OscConfig+0x708>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002cbe:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <HAL_RCC_OscConfig+0x708>)
 8002cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	23c0      	movs	r3, #192	@ 0xc0
 8002cc8:	025b      	lsls	r3, r3, #9
 8002cca:	401a      	ands	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d10e      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	220f      	movs	r2, #15
 8002cd8:	401a      	ands	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d107      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	23f0      	movs	r3, #240	@ 0xf0
 8002ce6:	039b      	lsls	r3, r3, #14
 8002ce8:	401a      	ands	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b008      	add	sp, #32
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000

08002d04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0bf      	b.n	8002e98 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b61      	ldr	r3, [pc, #388]	@ (8002ea0 <HAL_RCC_ClockConfig+0x19c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	4013      	ands	r3, r2
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d911      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b5e      	ldr	r3, [pc, #376]	@ (8002ea0 <HAL_RCC_ClockConfig+0x19c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	4393      	bics	r3, r2
 8002d2e:	0019      	movs	r1, r3
 8002d30:	4b5b      	ldr	r3, [pc, #364]	@ (8002ea0 <HAL_RCC_ClockConfig+0x19c>)
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d38:	4b59      	ldr	r3, [pc, #356]	@ (8002ea0 <HAL_RCC_ClockConfig+0x19c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	4013      	ands	r3, r2
 8002d40:	683a      	ldr	r2, [r7, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d001      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0a6      	b.n	8002e98 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	4013      	ands	r3, r2
 8002d52:	d015      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2204      	movs	r2, #4
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d006      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d5e:	4b51      	ldr	r3, [pc, #324]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1a0>)
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	4b50      	ldr	r3, [pc, #320]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1a0>)
 8002d64:	21e0      	movs	r1, #224	@ 0xe0
 8002d66:	00c9      	lsls	r1, r1, #3
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d6c:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1a0>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	22f0      	movs	r2, #240	@ 0xf0
 8002d72:	4393      	bics	r3, r2
 8002d74:	0019      	movs	r1, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689a      	ldr	r2, [r3, #8]
 8002d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1a0>)
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2201      	movs	r2, #1
 8002d86:	4013      	ands	r3, r2
 8002d88:	d04c      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d107      	bne.n	8002da2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	4b44      	ldr	r3, [pc, #272]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1a0>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	2380      	movs	r3, #128	@ 0x80
 8002d98:	029b      	lsls	r3, r3, #10
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d120      	bne.n	8002de0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e07a      	b.n	8002e98 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d107      	bne.n	8002dba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002daa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1a0>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	2380      	movs	r3, #128	@ 0x80
 8002db0:	049b      	lsls	r3, r3, #18
 8002db2:	4013      	ands	r3, r2
 8002db4:	d114      	bne.n	8002de0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e06e      	b.n	8002e98 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b03      	cmp	r3, #3
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002dc2:	4b38      	ldr	r3, [pc, #224]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1a0>)
 8002dc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dc6:	2380      	movs	r3, #128	@ 0x80
 8002dc8:	029b      	lsls	r3, r3, #10
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d108      	bne.n	8002de0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e062      	b.n	8002e98 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd2:	4b34      	ldr	r3, [pc, #208]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1a0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e05b      	b.n	8002e98 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de0:	4b30      	ldr	r3, [pc, #192]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1a0>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2203      	movs	r2, #3
 8002de6:	4393      	bics	r3, r2
 8002de8:	0019      	movs	r1, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1a0>)
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df4:	f7ff f8e0 	bl	8001fb8 <HAL_GetTick>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfc:	e009      	b.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfe:	f7ff f8db 	bl	8001fb8 <HAL_GetTick>
 8002e02:	0002      	movs	r2, r0
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	4a27      	ldr	r2, [pc, #156]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1a4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e042      	b.n	8002e98 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	4b24      	ldr	r3, [pc, #144]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1a0>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	220c      	movs	r2, #12
 8002e18:	401a      	ands	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d1ec      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e24:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea0 <HAL_RCC_ClockConfig+0x19c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d211      	bcs.n	8002e56 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea0 <HAL_RCC_ClockConfig+0x19c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2201      	movs	r2, #1
 8002e38:	4393      	bics	r3, r2
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	4b18      	ldr	r3, [pc, #96]	@ (8002ea0 <HAL_RCC_ClockConfig+0x19c>)
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e44:	4b16      	ldr	r3, [pc, #88]	@ (8002ea0 <HAL_RCC_ClockConfig+0x19c>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e020      	b.n	8002e98 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d009      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e60:	4b10      	ldr	r3, [pc, #64]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1a0>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	4a11      	ldr	r2, [pc, #68]	@ (8002eac <HAL_RCC_ClockConfig+0x1a8>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	0019      	movs	r1, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1a0>)
 8002e70:	430a      	orrs	r2, r1
 8002e72:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e74:	f000 f820 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002e78:	0001      	movs	r1, r0
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1a0>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	220f      	movs	r2, #15
 8002e82:	4013      	ands	r3, r2
 8002e84:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1ac>)
 8002e86:	5cd3      	ldrb	r3, [r2, r3]
 8002e88:	000a      	movs	r2, r1
 8002e8a:	40da      	lsrs	r2, r3
 8002e8c:	4b09      	ldr	r3, [pc, #36]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e90:	2003      	movs	r0, #3
 8002e92:	f7ff f84b 	bl	8001f2c <HAL_InitTick>
  
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b004      	add	sp, #16
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40022000 	.word	0x40022000
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	00001388 	.word	0x00001388
 8002eac:	fffff8ff 	.word	0xfffff8ff
 8002eb0:	0800514c 	.word	0x0800514c
 8002eb4:	20000000 	.word	0x20000000

08002eb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	220c      	movs	r2, #12
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b0c      	cmp	r3, #12
 8002ee0:	d046      	beq.n	8002f70 <HAL_RCC_GetSysClockFreq+0xb8>
 8002ee2:	d848      	bhi.n	8002f76 <HAL_RCC_GetSysClockFreq+0xbe>
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d002      	beq.n	8002eee <HAL_RCC_GetSysClockFreq+0x36>
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d003      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x3c>
 8002eec:	e043      	b.n	8002f76 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002eee:	4b27      	ldr	r3, [pc, #156]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002ef0:	613b      	str	r3, [r7, #16]
      break;
 8002ef2:	e043      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	0c9b      	lsrs	r3, r3, #18
 8002ef8:	220f      	movs	r2, #15
 8002efa:	4013      	ands	r3, r2
 8002efc:	4a24      	ldr	r2, [pc, #144]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002efe:	5cd3      	ldrb	r3, [r2, r3]
 8002f00:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002f02:	4b21      	ldr	r3, [pc, #132]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f06:	220f      	movs	r2, #15
 8002f08:	4013      	ands	r3, r2
 8002f0a:	4a22      	ldr	r2, [pc, #136]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0xdc>)
 8002f0c:	5cd3      	ldrb	r3, [r2, r3]
 8002f0e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	23c0      	movs	r3, #192	@ 0xc0
 8002f14:	025b      	lsls	r3, r3, #9
 8002f16:	401a      	ands	r2, r3
 8002f18:	2380      	movs	r3, #128	@ 0x80
 8002f1a:	025b      	lsls	r3, r3, #9
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d109      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f20:	68b9      	ldr	r1, [r7, #8]
 8002f22:	481a      	ldr	r0, [pc, #104]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f24:	f7fd f900 	bl	8000128 <__udivsi3>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	001a      	movs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4353      	muls	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	e01a      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	23c0      	movs	r3, #192	@ 0xc0
 8002f38:	025b      	lsls	r3, r3, #9
 8002f3a:	401a      	ands	r2, r3
 8002f3c:	23c0      	movs	r3, #192	@ 0xc0
 8002f3e:	025b      	lsls	r3, r3, #9
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d109      	bne.n	8002f58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f44:	68b9      	ldr	r1, [r7, #8]
 8002f46:	4814      	ldr	r0, [pc, #80]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002f48:	f7fd f8ee 	bl	8000128 <__udivsi3>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	001a      	movs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4353      	muls	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	480c      	ldr	r0, [pc, #48]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f5c:	f7fd f8e4 	bl	8000128 <__udivsi3>
 8002f60:	0003      	movs	r3, r0
 8002f62:	001a      	movs	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4353      	muls	r3, r2
 8002f68:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	613b      	str	r3, [r7, #16]
      break;
 8002f6e:	e005      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002f70:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0xe0>)
 8002f72:	613b      	str	r3, [r7, #16]
      break;
 8002f74:	e002      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f76:	4b05      	ldr	r3, [pc, #20]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002f78:	613b      	str	r3, [r7, #16]
      break;
 8002f7a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f7c:	693b      	ldr	r3, [r7, #16]
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b006      	add	sp, #24
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	007a1200 	.word	0x007a1200
 8002f90:	08005164 	.word	0x08005164
 8002f94:	08005174 	.word	0x08005174
 8002f98:	02dc6c00 	.word	0x02dc6c00

08002f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa0:	4b02      	ldr	r3, [pc, #8]	@ (8002fac <HAL_RCC_GetHCLKFreq+0x10>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	46c0      	nop			@ (mov r8, r8)
 8002fac:	20000000 	.word	0x20000000

08002fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002fb4:	f7ff fff2 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fb8:	0001      	movs	r1, r0
 8002fba:	4b06      	ldr	r3, [pc, #24]	@ (8002fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	2207      	movs	r2, #7
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	4a04      	ldr	r2, [pc, #16]	@ (8002fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	40d9      	lsrs	r1, r3
 8002fca:	000b      	movs	r3, r1
}    
 8002fcc:	0018      	movs	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	0800515c 	.word	0x0800515c

08002fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	2380      	movs	r3, #128	@ 0x80
 8002ff2:	025b      	lsls	r3, r3, #9
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d100      	bne.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002ff8:	e08e      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002ffa:	2017      	movs	r0, #23
 8002ffc:	183b      	adds	r3, r7, r0
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003002:	4b6e      	ldr	r3, [pc, #440]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003004:	69da      	ldr	r2, [r3, #28]
 8003006:	2380      	movs	r3, #128	@ 0x80
 8003008:	055b      	lsls	r3, r3, #21
 800300a:	4013      	ands	r3, r2
 800300c:	d110      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800300e:	4b6b      	ldr	r3, [pc, #428]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003010:	69da      	ldr	r2, [r3, #28]
 8003012:	4b6a      	ldr	r3, [pc, #424]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003014:	2180      	movs	r1, #128	@ 0x80
 8003016:	0549      	lsls	r1, r1, #21
 8003018:	430a      	orrs	r2, r1
 800301a:	61da      	str	r2, [r3, #28]
 800301c:	4b67      	ldr	r3, [pc, #412]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	2380      	movs	r3, #128	@ 0x80
 8003022:	055b      	lsls	r3, r3, #21
 8003024:	4013      	ands	r3, r2
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800302a:	183b      	adds	r3, r7, r0
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003030:	4b63      	ldr	r3, [pc, #396]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	2380      	movs	r3, #128	@ 0x80
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4013      	ands	r3, r2
 800303a:	d11a      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800303c:	4b60      	ldr	r3, [pc, #384]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b5f      	ldr	r3, [pc, #380]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003042:	2180      	movs	r1, #128	@ 0x80
 8003044:	0049      	lsls	r1, r1, #1
 8003046:	430a      	orrs	r2, r1
 8003048:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800304a:	f7fe ffb5 	bl	8001fb8 <HAL_GetTick>
 800304e:	0003      	movs	r3, r0
 8003050:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003052:	e008      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003054:	f7fe ffb0 	bl	8001fb8 <HAL_GetTick>
 8003058:	0002      	movs	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	@ 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0a6      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003066:	4b56      	ldr	r3, [pc, #344]	@ (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	2380      	movs	r3, #128	@ 0x80
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4013      	ands	r3, r2
 8003070:	d0f0      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003072:	4b52      	ldr	r3, [pc, #328]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003074:	6a1a      	ldr	r2, [r3, #32]
 8003076:	23c0      	movs	r3, #192	@ 0xc0
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4013      	ands	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d034      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	23c0      	movs	r3, #192	@ 0xc0
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4013      	ands	r3, r2
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	429a      	cmp	r2, r3
 8003092:	d02c      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003094:	4b49      	ldr	r3, [pc, #292]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4a4a      	ldr	r2, [pc, #296]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800309a:	4013      	ands	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800309e:	4b47      	ldr	r3, [pc, #284]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030a0:	6a1a      	ldr	r2, [r3, #32]
 80030a2:	4b46      	ldr	r3, [pc, #280]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030a4:	2180      	movs	r1, #128	@ 0x80
 80030a6:	0249      	lsls	r1, r1, #9
 80030a8:	430a      	orrs	r2, r1
 80030aa:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030ac:	4b43      	ldr	r3, [pc, #268]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030ae:	6a1a      	ldr	r2, [r3, #32]
 80030b0:	4b42      	ldr	r3, [pc, #264]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030b2:	4945      	ldr	r1, [pc, #276]	@ (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80030b4:	400a      	ands	r2, r1
 80030b6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030b8:	4b40      	ldr	r3, [pc, #256]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2201      	movs	r2, #1
 80030c2:	4013      	ands	r3, r2
 80030c4:	d013      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c6:	f7fe ff77 	bl	8001fb8 <HAL_GetTick>
 80030ca:	0003      	movs	r3, r0
 80030cc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ce:	e009      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fe ff72 	bl	8001fb8 <HAL_GetTick>
 80030d4:	0002      	movs	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	4a3c      	ldr	r2, [pc, #240]	@ (80031cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d901      	bls.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e067      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e4:	4b35      	ldr	r3, [pc, #212]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	2202      	movs	r2, #2
 80030ea:	4013      	ands	r3, r2
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ee:	4b33      	ldr	r3, [pc, #204]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4a34      	ldr	r2, [pc, #208]	@ (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	0019      	movs	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	4b2f      	ldr	r3, [pc, #188]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030fe:	430a      	orrs	r2, r1
 8003100:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003102:	2317      	movs	r3, #23
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d105      	bne.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310c:	4b2b      	ldr	r3, [pc, #172]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	4b2a      	ldr	r3, [pc, #168]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003112:	492f      	ldr	r1, [pc, #188]	@ (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8003114:	400a      	ands	r2, r1
 8003116:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2201      	movs	r2, #1
 800311e:	4013      	ands	r3, r2
 8003120:	d009      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003122:	4b26      	ldr	r3, [pc, #152]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003126:	2203      	movs	r2, #3
 8003128:	4393      	bics	r3, r2
 800312a:	0019      	movs	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	4b22      	ldr	r3, [pc, #136]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003132:	430a      	orrs	r2, r1
 8003134:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2202      	movs	r2, #2
 800313c:	4013      	ands	r3, r2
 800313e:	d009      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003140:	4b1e      	ldr	r3, [pc, #120]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003144:	4a23      	ldr	r2, [pc, #140]	@ (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003146:	4013      	ands	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	4b1b      	ldr	r3, [pc, #108]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003150:	430a      	orrs	r2, r1
 8003152:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	2380      	movs	r3, #128	@ 0x80
 800315a:	02db      	lsls	r3, r3, #11
 800315c:	4013      	ands	r3, r2
 800315e:	d009      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003160:	4b16      	ldr	r3, [pc, #88]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003164:	4a1c      	ldr	r2, [pc, #112]	@ (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003166:	4013      	ands	r3, r2
 8003168:	0019      	movs	r1, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	4b13      	ldr	r3, [pc, #76]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003170:	430a      	orrs	r2, r1
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2220      	movs	r2, #32
 800317a:	4013      	ands	r3, r2
 800317c:	d009      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800317e:	4b0f      	ldr	r3, [pc, #60]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	2210      	movs	r2, #16
 8003184:	4393      	bics	r3, r2
 8003186:	0019      	movs	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	4b0b      	ldr	r3, [pc, #44]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800318e:	430a      	orrs	r2, r1
 8003190:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	2380      	movs	r3, #128	@ 0x80
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4013      	ands	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800319e:	4b07      	ldr	r3, [pc, #28]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	2240      	movs	r2, #64	@ 0x40
 80031a4:	4393      	bics	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699a      	ldr	r2, [r3, #24]
 80031ac:	4b03      	ldr	r3, [pc, #12]	@ (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80031ae:	430a      	orrs	r2, r1
 80031b0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	0018      	movs	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b006      	add	sp, #24
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40007000 	.word	0x40007000
 80031c4:	fffffcff 	.word	0xfffffcff
 80031c8:	fffeffff 	.word	0xfffeffff
 80031cc:	00001388 	.word	0x00001388
 80031d0:	efffffff 	.word	0xefffffff
 80031d4:	fffcffff 	.word	0xfffcffff
 80031d8:	fff3ffff 	.word	0xfff3ffff

080031dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e044      	b.n	8003278 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d107      	bne.n	8003206 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2278      	movs	r2, #120	@ 0x78
 80031fa:	2100      	movs	r1, #0
 80031fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	0018      	movs	r0, r3
 8003202:	f7fe fd47 	bl	8001c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2224      	movs	r2, #36	@ 0x24
 800320a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2101      	movs	r1, #1
 8003218:	438a      	bics	r2, r1
 800321a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	0018      	movs	r0, r3
 8003228:	f000 fd10 	bl	8003c4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	0018      	movs	r0, r3
 8003230:	f000 fb24 	bl	800387c <UART_SetConfig>
 8003234:	0003      	movs	r3, r0
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e01c      	b.n	8003278 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	490d      	ldr	r1, [pc, #52]	@ (8003280 <HAL_UART_Init+0xa4>)
 800324a:	400a      	ands	r2, r1
 800324c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	212a      	movs	r1, #42	@ 0x2a
 800325a:	438a      	bics	r2, r1
 800325c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2101      	movs	r1, #1
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0018      	movs	r0, r3
 8003272:	f000 fd9f 	bl	8003db4 <UART_CheckIdleState>
 8003276:	0003      	movs	r3, r0
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b002      	add	sp, #8
 800327e:	bd80      	pop	{r7, pc}
 8003280:	ffffb7ff 	.word	0xffffb7ff

08003284 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b0ab      	sub	sp, #172	@ 0xac
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	22a4      	movs	r2, #164	@ 0xa4
 8003294:	18b9      	adds	r1, r7, r2
 8003296:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	20a0      	movs	r0, #160	@ 0xa0
 80032a0:	1839      	adds	r1, r7, r0
 80032a2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	219c      	movs	r1, #156	@ 0x9c
 80032ac:	1879      	adds	r1, r7, r1
 80032ae:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032b0:	0011      	movs	r1, r2
 80032b2:	18bb      	adds	r3, r7, r2
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a99      	ldr	r2, [pc, #612]	@ (800351c <HAL_UART_IRQHandler+0x298>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	2298      	movs	r2, #152	@ 0x98
 80032bc:	18bc      	adds	r4, r7, r2
 80032be:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80032c0:	18bb      	adds	r3, r7, r2
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d114      	bne.n	80032f2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032c8:	187b      	adds	r3, r7, r1
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2220      	movs	r2, #32
 80032ce:	4013      	ands	r3, r2
 80032d0:	d00f      	beq.n	80032f2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032d2:	183b      	adds	r3, r7, r0
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2220      	movs	r2, #32
 80032d8:	4013      	ands	r3, r2
 80032da:	d00a      	beq.n	80032f2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d100      	bne.n	80032e6 <HAL_UART_IRQHandler+0x62>
 80032e4:	e29e      	b.n	8003824 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	0010      	movs	r0, r2
 80032ee:	4798      	blx	r3
      }
      return;
 80032f0:	e298      	b.n	8003824 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032f2:	2398      	movs	r3, #152	@ 0x98
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d100      	bne.n	80032fe <HAL_UART_IRQHandler+0x7a>
 80032fc:	e114      	b.n	8003528 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032fe:	239c      	movs	r3, #156	@ 0x9c
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2201      	movs	r2, #1
 8003306:	4013      	ands	r3, r2
 8003308:	d106      	bne.n	8003318 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800330a:	23a0      	movs	r3, #160	@ 0xa0
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a83      	ldr	r2, [pc, #524]	@ (8003520 <HAL_UART_IRQHandler+0x29c>)
 8003312:	4013      	ands	r3, r2
 8003314:	d100      	bne.n	8003318 <HAL_UART_IRQHandler+0x94>
 8003316:	e107      	b.n	8003528 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003318:	23a4      	movs	r3, #164	@ 0xa4
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2201      	movs	r2, #1
 8003320:	4013      	ands	r3, r2
 8003322:	d012      	beq.n	800334a <HAL_UART_IRQHandler+0xc6>
 8003324:	23a0      	movs	r3, #160	@ 0xa0
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	2380      	movs	r3, #128	@ 0x80
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4013      	ands	r3, r2
 8003330:	d00b      	beq.n	800334a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2201      	movs	r2, #1
 8003338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2284      	movs	r2, #132	@ 0x84
 800333e:	589b      	ldr	r3, [r3, r2]
 8003340:	2201      	movs	r2, #1
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2184      	movs	r1, #132	@ 0x84
 8003348:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800334a:	23a4      	movs	r3, #164	@ 0xa4
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2202      	movs	r2, #2
 8003352:	4013      	ands	r3, r2
 8003354:	d011      	beq.n	800337a <HAL_UART_IRQHandler+0xf6>
 8003356:	239c      	movs	r3, #156	@ 0x9c
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2201      	movs	r2, #1
 800335e:	4013      	ands	r3, r2
 8003360:	d00b      	beq.n	800337a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2202      	movs	r2, #2
 8003368:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2284      	movs	r2, #132	@ 0x84
 800336e:	589b      	ldr	r3, [r3, r2]
 8003370:	2204      	movs	r2, #4
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2184      	movs	r1, #132	@ 0x84
 8003378:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800337a:	23a4      	movs	r3, #164	@ 0xa4
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2204      	movs	r2, #4
 8003382:	4013      	ands	r3, r2
 8003384:	d011      	beq.n	80033aa <HAL_UART_IRQHandler+0x126>
 8003386:	239c      	movs	r3, #156	@ 0x9c
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2201      	movs	r2, #1
 800338e:	4013      	ands	r3, r2
 8003390:	d00b      	beq.n	80033aa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2204      	movs	r2, #4
 8003398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2284      	movs	r2, #132	@ 0x84
 800339e:	589b      	ldr	r3, [r3, r2]
 80033a0:	2202      	movs	r2, #2
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2184      	movs	r1, #132	@ 0x84
 80033a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033aa:	23a4      	movs	r3, #164	@ 0xa4
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2208      	movs	r2, #8
 80033b2:	4013      	ands	r3, r2
 80033b4:	d017      	beq.n	80033e6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033b6:	23a0      	movs	r3, #160	@ 0xa0
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2220      	movs	r2, #32
 80033be:	4013      	ands	r3, r2
 80033c0:	d105      	bne.n	80033ce <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033c2:	239c      	movs	r3, #156	@ 0x9c
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2201      	movs	r2, #1
 80033ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033cc:	d00b      	beq.n	80033e6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2208      	movs	r2, #8
 80033d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2284      	movs	r2, #132	@ 0x84
 80033da:	589b      	ldr	r3, [r3, r2]
 80033dc:	2208      	movs	r2, #8
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2184      	movs	r1, #132	@ 0x84
 80033e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80033e6:	23a4      	movs	r3, #164	@ 0xa4
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	2380      	movs	r3, #128	@ 0x80
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	4013      	ands	r3, r2
 80033f2:	d013      	beq.n	800341c <HAL_UART_IRQHandler+0x198>
 80033f4:	23a0      	movs	r3, #160	@ 0xa0
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	04db      	lsls	r3, r3, #19
 80033fe:	4013      	ands	r3, r2
 8003400:	d00c      	beq.n	800341c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2280      	movs	r2, #128	@ 0x80
 8003408:	0112      	lsls	r2, r2, #4
 800340a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2284      	movs	r2, #132	@ 0x84
 8003410:	589b      	ldr	r3, [r3, r2]
 8003412:	2220      	movs	r2, #32
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2184      	movs	r1, #132	@ 0x84
 800341a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2284      	movs	r2, #132	@ 0x84
 8003420:	589b      	ldr	r3, [r3, r2]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d100      	bne.n	8003428 <HAL_UART_IRQHandler+0x1a4>
 8003426:	e1ff      	b.n	8003828 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003428:	23a4      	movs	r3, #164	@ 0xa4
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2220      	movs	r2, #32
 8003430:	4013      	ands	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003434:	23a0      	movs	r3, #160	@ 0xa0
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2220      	movs	r2, #32
 800343c:	4013      	ands	r3, r2
 800343e:	d008      	beq.n	8003452 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003444:	2b00      	cmp	r3, #0
 8003446:	d004      	beq.n	8003452 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	0010      	movs	r0, r2
 8003450:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2284      	movs	r2, #132	@ 0x84
 8003456:	589b      	ldr	r3, [r3, r2]
 8003458:	2194      	movs	r1, #148	@ 0x94
 800345a:	187a      	adds	r2, r7, r1
 800345c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2240      	movs	r2, #64	@ 0x40
 8003466:	4013      	ands	r3, r2
 8003468:	2b40      	cmp	r3, #64	@ 0x40
 800346a:	d004      	beq.n	8003476 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800346c:	187b      	adds	r3, r7, r1
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2228      	movs	r2, #40	@ 0x28
 8003472:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003474:	d047      	beq.n	8003506 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	0018      	movs	r0, r3
 800347a:	f000 fdb3 	bl	8003fe4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2240      	movs	r2, #64	@ 0x40
 8003486:	4013      	ands	r3, r2
 8003488:	2b40      	cmp	r3, #64	@ 0x40
 800348a:	d137      	bne.n	80034fc <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348c:	f3ef 8310 	mrs	r3, PRIMASK
 8003490:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003492:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003494:	2090      	movs	r0, #144	@ 0x90
 8003496:	183a      	adds	r2, r7, r0
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	2301      	movs	r3, #1
 800349c:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034a0:	f383 8810 	msr	PRIMASK, r3
}
 80034a4:	46c0      	nop			@ (mov r8, r8)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2140      	movs	r1, #64	@ 0x40
 80034b2:	438a      	bics	r2, r1
 80034b4:	609a      	str	r2, [r3, #8]
 80034b6:	183b      	adds	r3, r7, r0
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034be:	f383 8810 	msr	PRIMASK, r3
}
 80034c2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d012      	beq.n	80034f2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034d0:	4a14      	ldr	r2, [pc, #80]	@ (8003524 <HAL_UART_IRQHandler+0x2a0>)
 80034d2:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034d8:	0018      	movs	r0, r3
 80034da:	f7fe feb1 	bl	8002240 <HAL_DMA_Abort_IT>
 80034de:	1e03      	subs	r3, r0, #0
 80034e0:	d01a      	beq.n	8003518 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ec:	0018      	movs	r0, r3
 80034ee:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f0:	e012      	b.n	8003518 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	0018      	movs	r0, r3
 80034f6:	f000 f9ad 	bl	8003854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fa:	e00d      	b.n	8003518 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0018      	movs	r0, r3
 8003500:	f000 f9a8 	bl	8003854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003504:	e008      	b.n	8003518 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	0018      	movs	r0, r3
 800350a:	f000 f9a3 	bl	8003854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2284      	movs	r2, #132	@ 0x84
 8003512:	2100      	movs	r1, #0
 8003514:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003516:	e187      	b.n	8003828 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003518:	46c0      	nop			@ (mov r8, r8)
    return;
 800351a:	e185      	b.n	8003828 <HAL_UART_IRQHandler+0x5a4>
 800351c:	0000080f 	.word	0x0000080f
 8003520:	04000120 	.word	0x04000120
 8003524:	080040ad 	.word	0x080040ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352c:	2b01      	cmp	r3, #1
 800352e:	d000      	beq.n	8003532 <HAL_UART_IRQHandler+0x2ae>
 8003530:	e139      	b.n	80037a6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003532:	23a4      	movs	r3, #164	@ 0xa4
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2210      	movs	r2, #16
 800353a:	4013      	ands	r3, r2
 800353c:	d100      	bne.n	8003540 <HAL_UART_IRQHandler+0x2bc>
 800353e:	e132      	b.n	80037a6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003540:	23a0      	movs	r3, #160	@ 0xa0
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2210      	movs	r2, #16
 8003548:	4013      	ands	r3, r2
 800354a:	d100      	bne.n	800354e <HAL_UART_IRQHandler+0x2ca>
 800354c:	e12b      	b.n	80037a6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2210      	movs	r2, #16
 8003554:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2240      	movs	r2, #64	@ 0x40
 800355e:	4013      	ands	r3, r2
 8003560:	2b40      	cmp	r3, #64	@ 0x40
 8003562:	d000      	beq.n	8003566 <HAL_UART_IRQHandler+0x2e2>
 8003564:	e09f      	b.n	80036a6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	217e      	movs	r1, #126	@ 0x7e
 8003570:	187b      	adds	r3, r7, r1
 8003572:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003574:	187b      	adds	r3, r7, r1
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d100      	bne.n	800357e <HAL_UART_IRQHandler+0x2fa>
 800357c:	e156      	b.n	800382c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2258      	movs	r2, #88	@ 0x58
 8003582:	5a9b      	ldrh	r3, [r3, r2]
 8003584:	187a      	adds	r2, r7, r1
 8003586:	8812      	ldrh	r2, [r2, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d300      	bcc.n	800358e <HAL_UART_IRQHandler+0x30a>
 800358c:	e14e      	b.n	800382c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	187a      	adds	r2, r7, r1
 8003592:	215a      	movs	r1, #90	@ 0x5a
 8003594:	8812      	ldrh	r2, [r2, #0]
 8003596:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d06f      	beq.n	8003682 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035a2:	f3ef 8310 	mrs	r3, PRIMASK
 80035a6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80035a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035ac:	2301      	movs	r3, #1
 80035ae:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b2:	f383 8810 	msr	PRIMASK, r3
}
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	499e      	ldr	r1, [pc, #632]	@ (800383c <HAL_UART_IRQHandler+0x5b8>)
 80035c4:	400a      	ands	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ce:	f383 8810 	msr	PRIMASK, r3
}
 80035d2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d4:	f3ef 8310 	mrs	r3, PRIMASK
 80035d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80035da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80035de:	2301      	movs	r3, #1
 80035e0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035e4:	f383 8810 	msr	PRIMASK, r3
}
 80035e8:	46c0      	nop			@ (mov r8, r8)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2101      	movs	r1, #1
 80035f6:	438a      	bics	r2, r1
 80035f8:	609a      	str	r2, [r3, #8]
 80035fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035fc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003600:	f383 8810 	msr	PRIMASK, r3
}
 8003604:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003606:	f3ef 8310 	mrs	r3, PRIMASK
 800360a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800360c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800360e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003610:	2301      	movs	r3, #1
 8003612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003616:	f383 8810 	msr	PRIMASK, r3
}
 800361a:	46c0      	nop			@ (mov r8, r8)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2140      	movs	r1, #64	@ 0x40
 8003628:	438a      	bics	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800362e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003632:	f383 8810 	msr	PRIMASK, r3
}
 8003636:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2280      	movs	r2, #128	@ 0x80
 800363c:	2120      	movs	r1, #32
 800363e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003646:	f3ef 8310 	mrs	r3, PRIMASK
 800364a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800364c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800364e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003650:	2301      	movs	r3, #1
 8003652:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003654:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003656:	f383 8810 	msr	PRIMASK, r3
}
 800365a:	46c0      	nop			@ (mov r8, r8)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2110      	movs	r1, #16
 8003668:	438a      	bics	r2, r1
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800366e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003670:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003672:	f383 8810 	msr	PRIMASK, r3
}
 8003676:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800367c:	0018      	movs	r0, r3
 800367e:	f7fe fda7 	bl	80021d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2258      	movs	r2, #88	@ 0x58
 800368c:	5a9a      	ldrh	r2, [r3, r2]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	215a      	movs	r1, #90	@ 0x5a
 8003692:	5a5b      	ldrh	r3, [r3, r1]
 8003694:	b29b      	uxth	r3, r3
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	b29a      	uxth	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	0011      	movs	r1, r2
 800369e:	0018      	movs	r0, r3
 80036a0:	f000 f8e0 	bl	8003864 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036a4:	e0c2      	b.n	800382c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2258      	movs	r2, #88	@ 0x58
 80036aa:	5a99      	ldrh	r1, [r3, r2]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	225a      	movs	r2, #90	@ 0x5a
 80036b0:	5a9b      	ldrh	r3, [r3, r2]
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	208e      	movs	r0, #142	@ 0x8e
 80036b6:	183b      	adds	r3, r7, r0
 80036b8:	1a8a      	subs	r2, r1, r2
 80036ba:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	225a      	movs	r2, #90	@ 0x5a
 80036c0:	5a9b      	ldrh	r3, [r3, r2]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d100      	bne.n	80036ca <HAL_UART_IRQHandler+0x446>
 80036c8:	e0b2      	b.n	8003830 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80036ca:	183b      	adds	r3, r7, r0
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d100      	bne.n	80036d4 <HAL_UART_IRQHandler+0x450>
 80036d2:	e0ad      	b.n	8003830 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d4:	f3ef 8310 	mrs	r3, PRIMASK
 80036d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80036da:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036dc:	2488      	movs	r4, #136	@ 0x88
 80036de:	193a      	adds	r2, r7, r4
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	2301      	movs	r3, #1
 80036e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f383 8810 	msr	PRIMASK, r3
}
 80036ec:	46c0      	nop			@ (mov r8, r8)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4951      	ldr	r1, [pc, #324]	@ (8003840 <HAL_UART_IRQHandler+0x5bc>)
 80036fa:	400a      	ands	r2, r1
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	193b      	adds	r3, r7, r4
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f383 8810 	msr	PRIMASK, r3
}
 800370a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800370c:	f3ef 8310 	mrs	r3, PRIMASK
 8003710:	61bb      	str	r3, [r7, #24]
  return(result);
 8003712:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003714:	2484      	movs	r4, #132	@ 0x84
 8003716:	193a      	adds	r2, r7, r4
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	2301      	movs	r3, #1
 800371c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f383 8810 	msr	PRIMASK, r3
}
 8003724:	46c0      	nop			@ (mov r8, r8)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689a      	ldr	r2, [r3, #8]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2101      	movs	r1, #1
 8003732:	438a      	bics	r2, r1
 8003734:	609a      	str	r2, [r3, #8]
 8003736:	193b      	adds	r3, r7, r4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	f383 8810 	msr	PRIMASK, r3
}
 8003742:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2280      	movs	r2, #128	@ 0x80
 8003748:	2120      	movs	r1, #32
 800374a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003758:	f3ef 8310 	mrs	r3, PRIMASK
 800375c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800375e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003760:	2480      	movs	r4, #128	@ 0x80
 8003762:	193a      	adds	r2, r7, r4
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	2301      	movs	r3, #1
 8003768:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376c:	f383 8810 	msr	PRIMASK, r3
}
 8003770:	46c0      	nop			@ (mov r8, r8)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2110      	movs	r1, #16
 800377e:	438a      	bics	r2, r1
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	193b      	adds	r3, r7, r4
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800378a:	f383 8810 	msr	PRIMASK, r3
}
 800378e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003796:	183b      	adds	r3, r7, r0
 8003798:	881a      	ldrh	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	0011      	movs	r1, r2
 800379e:	0018      	movs	r0, r3
 80037a0:	f000 f860 	bl	8003864 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037a4:	e044      	b.n	8003830 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037a6:	23a4      	movs	r3, #164	@ 0xa4
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	2380      	movs	r3, #128	@ 0x80
 80037ae:	035b      	lsls	r3, r3, #13
 80037b0:	4013      	ands	r3, r2
 80037b2:	d010      	beq.n	80037d6 <HAL_UART_IRQHandler+0x552>
 80037b4:	239c      	movs	r3, #156	@ 0x9c
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	2380      	movs	r3, #128	@ 0x80
 80037bc:	03db      	lsls	r3, r3, #15
 80037be:	4013      	ands	r3, r2
 80037c0:	d009      	beq.n	80037d6 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2280      	movs	r2, #128	@ 0x80
 80037c8:	0352      	lsls	r2, r2, #13
 80037ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	0018      	movs	r0, r3
 80037d0:	f000 fcae 	bl	8004130 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037d4:	e02f      	b.n	8003836 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037d6:	23a4      	movs	r3, #164	@ 0xa4
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2280      	movs	r2, #128	@ 0x80
 80037de:	4013      	ands	r3, r2
 80037e0:	d00f      	beq.n	8003802 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037e2:	23a0      	movs	r3, #160	@ 0xa0
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2280      	movs	r2, #128	@ 0x80
 80037ea:	4013      	ands	r3, r2
 80037ec:	d009      	beq.n	8003802 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01e      	beq.n	8003834 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	0010      	movs	r0, r2
 80037fe:	4798      	blx	r3
    }
    return;
 8003800:	e018      	b.n	8003834 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003802:	23a4      	movs	r3, #164	@ 0xa4
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2240      	movs	r2, #64	@ 0x40
 800380a:	4013      	ands	r3, r2
 800380c:	d013      	beq.n	8003836 <HAL_UART_IRQHandler+0x5b2>
 800380e:	23a0      	movs	r3, #160	@ 0xa0
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2240      	movs	r2, #64	@ 0x40
 8003816:	4013      	ands	r3, r2
 8003818:	d00d      	beq.n	8003836 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0018      	movs	r0, r3
 800381e:	f000 fc5c 	bl	80040da <UART_EndTransmit_IT>
    return;
 8003822:	e008      	b.n	8003836 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003824:	46c0      	nop			@ (mov r8, r8)
 8003826:	e006      	b.n	8003836 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003828:	46c0      	nop			@ (mov r8, r8)
 800382a:	e004      	b.n	8003836 <HAL_UART_IRQHandler+0x5b2>
      return;
 800382c:	46c0      	nop			@ (mov r8, r8)
 800382e:	e002      	b.n	8003836 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003830:	46c0      	nop			@ (mov r8, r8)
 8003832:	e000      	b.n	8003836 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003834:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003836:	46bd      	mov	sp, r7
 8003838:	b02b      	add	sp, #172	@ 0xac
 800383a:	bd90      	pop	{r4, r7, pc}
 800383c:	fffffeff 	.word	0xfffffeff
 8003840:	fffffedf 	.word	0xfffffedf

08003844 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800384c:	46c0      	nop			@ (mov r8, r8)
 800384e:	46bd      	mov	sp, r7
 8003850:	b002      	add	sp, #8
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800385c:	46c0      	nop			@ (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	000a      	movs	r2, r1
 800386e:	1cbb      	adds	r3, r7, #2
 8003870:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003884:	231e      	movs	r3, #30
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	431a      	orrs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4abe      	ldr	r2, [pc, #760]	@ (8003ba4 <UART_SetConfig+0x328>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	0019      	movs	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4ab9      	ldr	r2, [pc, #740]	@ (8003ba8 <UART_SetConfig+0x32c>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	0019      	movs	r1, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	4ab0      	ldr	r2, [pc, #704]	@ (8003bac <UART_SetConfig+0x330>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	0019      	movs	r1, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4aac      	ldr	r2, [pc, #688]	@ (8003bb0 <UART_SetConfig+0x334>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d127      	bne.n	8003952 <UART_SetConfig+0xd6>
 8003902:	4bac      	ldr	r3, [pc, #688]	@ (8003bb4 <UART_SetConfig+0x338>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	2203      	movs	r2, #3
 8003908:	4013      	ands	r3, r2
 800390a:	2b03      	cmp	r3, #3
 800390c:	d00d      	beq.n	800392a <UART_SetConfig+0xae>
 800390e:	d81b      	bhi.n	8003948 <UART_SetConfig+0xcc>
 8003910:	2b02      	cmp	r3, #2
 8003912:	d014      	beq.n	800393e <UART_SetConfig+0xc2>
 8003914:	d818      	bhi.n	8003948 <UART_SetConfig+0xcc>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <UART_SetConfig+0xa4>
 800391a:	2b01      	cmp	r3, #1
 800391c:	d00a      	beq.n	8003934 <UART_SetConfig+0xb8>
 800391e:	e013      	b.n	8003948 <UART_SetConfig+0xcc>
 8003920:	231f      	movs	r3, #31
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	2200      	movs	r2, #0
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e0bd      	b.n	8003aa6 <UART_SetConfig+0x22a>
 800392a:	231f      	movs	r3, #31
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	2202      	movs	r2, #2
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e0b8      	b.n	8003aa6 <UART_SetConfig+0x22a>
 8003934:	231f      	movs	r3, #31
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	2204      	movs	r2, #4
 800393a:	701a      	strb	r2, [r3, #0]
 800393c:	e0b3      	b.n	8003aa6 <UART_SetConfig+0x22a>
 800393e:	231f      	movs	r3, #31
 8003940:	18fb      	adds	r3, r7, r3
 8003942:	2208      	movs	r2, #8
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	e0ae      	b.n	8003aa6 <UART_SetConfig+0x22a>
 8003948:	231f      	movs	r3, #31
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	2210      	movs	r2, #16
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	e0a9      	b.n	8003aa6 <UART_SetConfig+0x22a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a98      	ldr	r2, [pc, #608]	@ (8003bb8 <UART_SetConfig+0x33c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d134      	bne.n	80039c6 <UART_SetConfig+0x14a>
 800395c:	4b95      	ldr	r3, [pc, #596]	@ (8003bb4 <UART_SetConfig+0x338>)
 800395e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003960:	23c0      	movs	r3, #192	@ 0xc0
 8003962:	029b      	lsls	r3, r3, #10
 8003964:	4013      	ands	r3, r2
 8003966:	22c0      	movs	r2, #192	@ 0xc0
 8003968:	0292      	lsls	r2, r2, #10
 800396a:	4293      	cmp	r3, r2
 800396c:	d017      	beq.n	800399e <UART_SetConfig+0x122>
 800396e:	22c0      	movs	r2, #192	@ 0xc0
 8003970:	0292      	lsls	r2, r2, #10
 8003972:	4293      	cmp	r3, r2
 8003974:	d822      	bhi.n	80039bc <UART_SetConfig+0x140>
 8003976:	2280      	movs	r2, #128	@ 0x80
 8003978:	0292      	lsls	r2, r2, #10
 800397a:	4293      	cmp	r3, r2
 800397c:	d019      	beq.n	80039b2 <UART_SetConfig+0x136>
 800397e:	2280      	movs	r2, #128	@ 0x80
 8003980:	0292      	lsls	r2, r2, #10
 8003982:	4293      	cmp	r3, r2
 8003984:	d81a      	bhi.n	80039bc <UART_SetConfig+0x140>
 8003986:	2b00      	cmp	r3, #0
 8003988:	d004      	beq.n	8003994 <UART_SetConfig+0x118>
 800398a:	2280      	movs	r2, #128	@ 0x80
 800398c:	0252      	lsls	r2, r2, #9
 800398e:	4293      	cmp	r3, r2
 8003990:	d00a      	beq.n	80039a8 <UART_SetConfig+0x12c>
 8003992:	e013      	b.n	80039bc <UART_SetConfig+0x140>
 8003994:	231f      	movs	r3, #31
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
 800399c:	e083      	b.n	8003aa6 <UART_SetConfig+0x22a>
 800399e:	231f      	movs	r3, #31
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	2202      	movs	r2, #2
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	e07e      	b.n	8003aa6 <UART_SetConfig+0x22a>
 80039a8:	231f      	movs	r3, #31
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	2204      	movs	r2, #4
 80039ae:	701a      	strb	r2, [r3, #0]
 80039b0:	e079      	b.n	8003aa6 <UART_SetConfig+0x22a>
 80039b2:	231f      	movs	r3, #31
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	2208      	movs	r2, #8
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	e074      	b.n	8003aa6 <UART_SetConfig+0x22a>
 80039bc:	231f      	movs	r3, #31
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	2210      	movs	r2, #16
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	e06f      	b.n	8003aa6 <UART_SetConfig+0x22a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a7c      	ldr	r2, [pc, #496]	@ (8003bbc <UART_SetConfig+0x340>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d134      	bne.n	8003a3a <UART_SetConfig+0x1be>
 80039d0:	4b78      	ldr	r3, [pc, #480]	@ (8003bb4 <UART_SetConfig+0x338>)
 80039d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039d4:	23c0      	movs	r3, #192	@ 0xc0
 80039d6:	031b      	lsls	r3, r3, #12
 80039d8:	4013      	ands	r3, r2
 80039da:	22c0      	movs	r2, #192	@ 0xc0
 80039dc:	0312      	lsls	r2, r2, #12
 80039de:	4293      	cmp	r3, r2
 80039e0:	d017      	beq.n	8003a12 <UART_SetConfig+0x196>
 80039e2:	22c0      	movs	r2, #192	@ 0xc0
 80039e4:	0312      	lsls	r2, r2, #12
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d822      	bhi.n	8003a30 <UART_SetConfig+0x1b4>
 80039ea:	2280      	movs	r2, #128	@ 0x80
 80039ec:	0312      	lsls	r2, r2, #12
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d019      	beq.n	8003a26 <UART_SetConfig+0x1aa>
 80039f2:	2280      	movs	r2, #128	@ 0x80
 80039f4:	0312      	lsls	r2, r2, #12
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d81a      	bhi.n	8003a30 <UART_SetConfig+0x1b4>
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d004      	beq.n	8003a08 <UART_SetConfig+0x18c>
 80039fe:	2280      	movs	r2, #128	@ 0x80
 8003a00:	02d2      	lsls	r2, r2, #11
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d00a      	beq.n	8003a1c <UART_SetConfig+0x1a0>
 8003a06:	e013      	b.n	8003a30 <UART_SetConfig+0x1b4>
 8003a08:	231f      	movs	r3, #31
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
 8003a10:	e049      	b.n	8003aa6 <UART_SetConfig+0x22a>
 8003a12:	231f      	movs	r3, #31
 8003a14:	18fb      	adds	r3, r7, r3
 8003a16:	2202      	movs	r2, #2
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	e044      	b.n	8003aa6 <UART_SetConfig+0x22a>
 8003a1c:	231f      	movs	r3, #31
 8003a1e:	18fb      	adds	r3, r7, r3
 8003a20:	2204      	movs	r2, #4
 8003a22:	701a      	strb	r2, [r3, #0]
 8003a24:	e03f      	b.n	8003aa6 <UART_SetConfig+0x22a>
 8003a26:	231f      	movs	r3, #31
 8003a28:	18fb      	adds	r3, r7, r3
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	e03a      	b.n	8003aa6 <UART_SetConfig+0x22a>
 8003a30:	231f      	movs	r3, #31
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	2210      	movs	r2, #16
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	e035      	b.n	8003aa6 <UART_SetConfig+0x22a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a60      	ldr	r2, [pc, #384]	@ (8003bc0 <UART_SetConfig+0x344>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d104      	bne.n	8003a4e <UART_SetConfig+0x1d2>
 8003a44:	231f      	movs	r3, #31
 8003a46:	18fb      	adds	r3, r7, r3
 8003a48:	2200      	movs	r2, #0
 8003a4a:	701a      	strb	r2, [r3, #0]
 8003a4c:	e02b      	b.n	8003aa6 <UART_SetConfig+0x22a>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a5c      	ldr	r2, [pc, #368]	@ (8003bc4 <UART_SetConfig+0x348>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d104      	bne.n	8003a62 <UART_SetConfig+0x1e6>
 8003a58:	231f      	movs	r3, #31
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
 8003a60:	e021      	b.n	8003aa6 <UART_SetConfig+0x22a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a58      	ldr	r2, [pc, #352]	@ (8003bc8 <UART_SetConfig+0x34c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d104      	bne.n	8003a76 <UART_SetConfig+0x1fa>
 8003a6c:	231f      	movs	r3, #31
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
 8003a74:	e017      	b.n	8003aa6 <UART_SetConfig+0x22a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a54      	ldr	r2, [pc, #336]	@ (8003bcc <UART_SetConfig+0x350>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d104      	bne.n	8003a8a <UART_SetConfig+0x20e>
 8003a80:	231f      	movs	r3, #31
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	e00d      	b.n	8003aa6 <UART_SetConfig+0x22a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a50      	ldr	r2, [pc, #320]	@ (8003bd0 <UART_SetConfig+0x354>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d104      	bne.n	8003a9e <UART_SetConfig+0x222>
 8003a94:	231f      	movs	r3, #31
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	e003      	b.n	8003aa6 <UART_SetConfig+0x22a>
 8003a9e:	231f      	movs	r3, #31
 8003aa0:	18fb      	adds	r3, r7, r3
 8003aa2:	2210      	movs	r2, #16
 8003aa4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69da      	ldr	r2, [r3, #28]
 8003aaa:	2380      	movs	r3, #128	@ 0x80
 8003aac:	021b      	lsls	r3, r3, #8
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d15c      	bne.n	8003b6c <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8003ab2:	231f      	movs	r3, #31
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d015      	beq.n	8003ae8 <UART_SetConfig+0x26c>
 8003abc:	dc18      	bgt.n	8003af0 <UART_SetConfig+0x274>
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d00d      	beq.n	8003ade <UART_SetConfig+0x262>
 8003ac2:	dc15      	bgt.n	8003af0 <UART_SetConfig+0x274>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d002      	beq.n	8003ace <UART_SetConfig+0x252>
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d005      	beq.n	8003ad8 <UART_SetConfig+0x25c>
 8003acc:	e010      	b.n	8003af0 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ace:	f7ff fa6f 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8003ad2:	0003      	movs	r3, r0
 8003ad4:	61bb      	str	r3, [r7, #24]
        break;
 8003ad6:	e012      	b.n	8003afe <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd4 <UART_SetConfig+0x358>)
 8003ada:	61bb      	str	r3, [r7, #24]
        break;
 8003adc:	e00f      	b.n	8003afe <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ade:	f7ff f9eb 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	61bb      	str	r3, [r7, #24]
        break;
 8003ae6:	e00a      	b.n	8003afe <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ae8:	2380      	movs	r3, #128	@ 0x80
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	61bb      	str	r3, [r7, #24]
        break;
 8003aee:	e006      	b.n	8003afe <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003af4:	231e      	movs	r3, #30
 8003af6:	18fb      	adds	r3, r7, r3
 8003af8:	2201      	movs	r2, #1
 8003afa:	701a      	strb	r2, [r3, #0]
        break;
 8003afc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d100      	bne.n	8003b06 <UART_SetConfig+0x28a>
 8003b04:	e095      	b.n	8003c32 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	005a      	lsls	r2, r3, #1
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	18d2      	adds	r2, r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	0019      	movs	r1, r3
 8003b18:	0010      	movs	r0, r2
 8003b1a:	f7fc fb05 	bl	8000128 <__udivsi3>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	2b0f      	cmp	r3, #15
 8003b26:	d91c      	bls.n	8003b62 <UART_SetConfig+0x2e6>
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	2380      	movs	r3, #128	@ 0x80
 8003b2c:	025b      	lsls	r3, r3, #9
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d217      	bcs.n	8003b62 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	200e      	movs	r0, #14
 8003b38:	183b      	adds	r3, r7, r0
 8003b3a:	210f      	movs	r1, #15
 8003b3c:	438a      	bics	r2, r1
 8003b3e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	085b      	lsrs	r3, r3, #1
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2207      	movs	r2, #7
 8003b48:	4013      	ands	r3, r2
 8003b4a:	b299      	uxth	r1, r3
 8003b4c:	183b      	adds	r3, r7, r0
 8003b4e:	183a      	adds	r2, r7, r0
 8003b50:	8812      	ldrh	r2, [r2, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	183a      	adds	r2, r7, r0
 8003b5c:	8812      	ldrh	r2, [r2, #0]
 8003b5e:	60da      	str	r2, [r3, #12]
 8003b60:	e067      	b.n	8003c32 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003b62:	231e      	movs	r3, #30
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	e062      	b.n	8003c32 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b6c:	231f      	movs	r3, #31
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d030      	beq.n	8003bd8 <UART_SetConfig+0x35c>
 8003b76:	dc33      	bgt.n	8003be0 <UART_SetConfig+0x364>
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d00d      	beq.n	8003b98 <UART_SetConfig+0x31c>
 8003b7c:	dc30      	bgt.n	8003be0 <UART_SetConfig+0x364>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <UART_SetConfig+0x30c>
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d005      	beq.n	8003b92 <UART_SetConfig+0x316>
 8003b86:	e02b      	b.n	8003be0 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b88:	f7ff fa12 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	61bb      	str	r3, [r7, #24]
        break;
 8003b90:	e02d      	b.n	8003bee <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b92:	4b10      	ldr	r3, [pc, #64]	@ (8003bd4 <UART_SetConfig+0x358>)
 8003b94:	61bb      	str	r3, [r7, #24]
        break;
 8003b96:	e02a      	b.n	8003bee <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b98:	f7ff f98e 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	61bb      	str	r3, [r7, #24]
        break;
 8003ba0:	e025      	b.n	8003bee <UART_SetConfig+0x372>
 8003ba2:	46c0      	nop			@ (mov r8, r8)
 8003ba4:	efff69f3 	.word	0xefff69f3
 8003ba8:	ffffcfff 	.word	0xffffcfff
 8003bac:	fffff4ff 	.word	0xfffff4ff
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	40004400 	.word	0x40004400
 8003bbc:	40004800 	.word	0x40004800
 8003bc0:	40004c00 	.word	0x40004c00
 8003bc4:	40005000 	.word	0x40005000
 8003bc8:	40011400 	.word	0x40011400
 8003bcc:	40011800 	.word	0x40011800
 8003bd0:	40011c00 	.word	0x40011c00
 8003bd4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bd8:	2380      	movs	r3, #128	@ 0x80
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	61bb      	str	r3, [r7, #24]
        break;
 8003bde:	e006      	b.n	8003bee <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003be4:	231e      	movs	r3, #30
 8003be6:	18fb      	adds	r3, r7, r3
 8003be8:	2201      	movs	r2, #1
 8003bea:	701a      	strb	r2, [r3, #0]
        break;
 8003bec:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01e      	beq.n	8003c32 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	085a      	lsrs	r2, r3, #1
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	18d2      	adds	r2, r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	0019      	movs	r1, r3
 8003c04:	0010      	movs	r0, r2
 8003c06:	f7fc fa8f 	bl	8000128 <__udivsi3>
 8003c0a:	0003      	movs	r3, r0
 8003c0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b0f      	cmp	r3, #15
 8003c12:	d90a      	bls.n	8003c2a <UART_SetConfig+0x3ae>
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	2380      	movs	r3, #128	@ 0x80
 8003c18:	025b      	lsls	r3, r3, #9
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d205      	bcs.n	8003c2a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60da      	str	r2, [r3, #12]
 8003c28:	e003      	b.n	8003c32 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003c2a:	231e      	movs	r3, #30
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	2201      	movs	r2, #1
 8003c30:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c3e:	231e      	movs	r3, #30
 8003c40:	18fb      	adds	r3, r7, r3
 8003c42:	781b      	ldrb	r3, [r3, #0]
}
 8003c44:	0018      	movs	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b008      	add	sp, #32
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	2208      	movs	r2, #8
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d00b      	beq.n	8003c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a4a      	ldr	r2, [pc, #296]	@ (8003d90 <UART_AdvFeatureConfig+0x144>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	0019      	movs	r1, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d00b      	beq.n	8003c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4a43      	ldr	r2, [pc, #268]	@ (8003d94 <UART_AdvFeatureConfig+0x148>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d00b      	beq.n	8003cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8003d98 <UART_AdvFeatureConfig+0x14c>)
 8003caa:	4013      	ands	r3, r2
 8003cac:	0019      	movs	r1, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d00b      	beq.n	8003cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	4a34      	ldr	r2, [pc, #208]	@ (8003d9c <UART_AdvFeatureConfig+0x150>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	0019      	movs	r1, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	2210      	movs	r2, #16
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d00b      	beq.n	8003cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	4a2c      	ldr	r2, [pc, #176]	@ (8003da0 <UART_AdvFeatureConfig+0x154>)
 8003cee:	4013      	ands	r3, r2
 8003cf0:	0019      	movs	r1, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	2220      	movs	r2, #32
 8003d04:	4013      	ands	r3, r2
 8003d06:	d00b      	beq.n	8003d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	4a25      	ldr	r2, [pc, #148]	@ (8003da4 <UART_AdvFeatureConfig+0x158>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	0019      	movs	r1, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	2240      	movs	r2, #64	@ 0x40
 8003d26:	4013      	ands	r3, r2
 8003d28:	d01d      	beq.n	8003d66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4a1d      	ldr	r2, [pc, #116]	@ (8003da8 <UART_AdvFeatureConfig+0x15c>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	0019      	movs	r1, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d46:	2380      	movs	r3, #128	@ 0x80
 8003d48:	035b      	lsls	r3, r3, #13
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d10b      	bne.n	8003d66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	4a15      	ldr	r2, [pc, #84]	@ (8003dac <UART_AdvFeatureConfig+0x160>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	0019      	movs	r1, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	2280      	movs	r2, #128	@ 0x80
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d00b      	beq.n	8003d88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	4a0e      	ldr	r2, [pc, #56]	@ (8003db0 <UART_AdvFeatureConfig+0x164>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	605a      	str	r2, [r3, #4]
  }
}
 8003d88:	46c0      	nop			@ (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b002      	add	sp, #8
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	ffff7fff 	.word	0xffff7fff
 8003d94:	fffdffff 	.word	0xfffdffff
 8003d98:	fffeffff 	.word	0xfffeffff
 8003d9c:	fffbffff 	.word	0xfffbffff
 8003da0:	ffffefff 	.word	0xffffefff
 8003da4:	ffffdfff 	.word	0xffffdfff
 8003da8:	ffefffff 	.word	0xffefffff
 8003dac:	ff9fffff 	.word	0xff9fffff
 8003db0:	fff7ffff 	.word	0xfff7ffff

08003db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b092      	sub	sp, #72	@ 0x48
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2284      	movs	r2, #132	@ 0x84
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dc4:	f7fe f8f8 	bl	8001fb8 <HAL_GetTick>
 8003dc8:	0003      	movs	r3, r0
 8003dca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2208      	movs	r2, #8
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d12c      	bne.n	8003e34 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ddc:	2280      	movs	r2, #128	@ 0x80
 8003dde:	0391      	lsls	r1, r2, #14
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	4a46      	ldr	r2, [pc, #280]	@ (8003efc <UART_CheckIdleState+0x148>)
 8003de4:	9200      	str	r2, [sp, #0]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f000 f88c 	bl	8003f04 <UART_WaitOnFlagUntilTimeout>
 8003dec:	1e03      	subs	r3, r0, #0
 8003dee:	d021      	beq.n	8003e34 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df0:	f3ef 8310 	mrs	r3, PRIMASK
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003df8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e00:	f383 8810 	msr	PRIMASK, r3
}
 8003e04:	46c0      	nop			@ (mov r8, r8)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2180      	movs	r1, #128	@ 0x80
 8003e12:	438a      	bics	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1c:	f383 8810 	msr	PRIMASK, r3
}
 8003e20:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2278      	movs	r2, #120	@ 0x78
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e05f      	b.n	8003ef4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d146      	bne.n	8003ed0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e44:	2280      	movs	r2, #128	@ 0x80
 8003e46:	03d1      	lsls	r1, r2, #15
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	4a2c      	ldr	r2, [pc, #176]	@ (8003efc <UART_CheckIdleState+0x148>)
 8003e4c:	9200      	str	r2, [sp, #0]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f000 f858 	bl	8003f04 <UART_WaitOnFlagUntilTimeout>
 8003e54:	1e03      	subs	r3, r0, #0
 8003e56:	d03b      	beq.n	8003ed0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e58:	f3ef 8310 	mrs	r3, PRIMASK
 8003e5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e62:	2301      	movs	r3, #1
 8003e64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f383 8810 	msr	PRIMASK, r3
}
 8003e6c:	46c0      	nop			@ (mov r8, r8)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4921      	ldr	r1, [pc, #132]	@ (8003f00 <UART_CheckIdleState+0x14c>)
 8003e7a:	400a      	ands	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f383 8810 	msr	PRIMASK, r3
}
 8003e88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e90:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e92:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e94:	2301      	movs	r3, #1
 8003e96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f383 8810 	msr	PRIMASK, r3
}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2101      	movs	r1, #1
 8003eac:	438a      	bics	r2, r1
 8003eae:	609a      	str	r2, [r3, #8]
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	f383 8810 	msr	PRIMASK, r3
}
 8003eba:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2280      	movs	r2, #128	@ 0x80
 8003ec0:	2120      	movs	r1, #32
 8003ec2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2278      	movs	r2, #120	@ 0x78
 8003ec8:	2100      	movs	r1, #0
 8003eca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e011      	b.n	8003ef4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2280      	movs	r2, #128	@ 0x80
 8003eda:	2120      	movs	r1, #32
 8003edc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2278      	movs	r2, #120	@ 0x78
 8003eee:	2100      	movs	r1, #0
 8003ef0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b010      	add	sp, #64	@ 0x40
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	01ffffff 	.word	0x01ffffff
 8003f00:	fffffedf 	.word	0xfffffedf

08003f04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	1dfb      	adds	r3, r7, #7
 8003f12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f14:	e051      	b.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	3301      	adds	r3, #1
 8003f1a:	d04e      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1c:	f7fe f84c 	bl	8001fb8 <HAL_GetTick>
 8003f20:	0002      	movs	r2, r0
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d302      	bcc.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e051      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d03b      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb6>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b80      	cmp	r3, #128	@ 0x80
 8003f46:	d038      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb6>
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b40      	cmp	r3, #64	@ 0x40
 8003f4c:	d035      	beq.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	2208      	movs	r2, #8
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b08      	cmp	r3, #8
 8003f5a:	d111      	bne.n	8003f80 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2208      	movs	r2, #8
 8003f62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	0018      	movs	r0, r3
 8003f68:	f000 f83c 	bl	8003fe4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2284      	movs	r2, #132	@ 0x84
 8003f70:	2108      	movs	r1, #8
 8003f72:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2278      	movs	r2, #120	@ 0x78
 8003f78:	2100      	movs	r1, #0
 8003f7a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e02c      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	69da      	ldr	r2, [r3, #28]
 8003f86:	2380      	movs	r3, #128	@ 0x80
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	401a      	ands	r2, r3
 8003f8c:	2380      	movs	r3, #128	@ 0x80
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d112      	bne.n	8003fba <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2280      	movs	r2, #128	@ 0x80
 8003f9a:	0112      	lsls	r2, r2, #4
 8003f9c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f000 f81f 	bl	8003fe4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2284      	movs	r2, #132	@ 0x84
 8003faa:	2120      	movs	r1, #32
 8003fac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2278      	movs	r2, #120	@ 0x78
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e00f      	b.n	8003fda <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	425a      	negs	r2, r3
 8003fca:	4153      	adcs	r3, r2
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	001a      	movs	r2, r3
 8003fd0:	1dfb      	adds	r3, r7, #7
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d09e      	beq.n	8003f16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	0018      	movs	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b004      	add	sp, #16
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08e      	sub	sp, #56	@ 0x38
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fec:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ff2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	f383 8810 	msr	PRIMASK, r3
}
 8004000:	46c0      	nop			@ (mov r8, r8)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4926      	ldr	r1, [pc, #152]	@ (80040a8 <UART_EndRxTransfer+0xc4>)
 800400e:	400a      	ands	r2, r1
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004014:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f383 8810 	msr	PRIMASK, r3
}
 800401c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800401e:	f3ef 8310 	mrs	r3, PRIMASK
 8004022:	623b      	str	r3, [r7, #32]
  return(result);
 8004024:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004026:	633b      	str	r3, [r7, #48]	@ 0x30
 8004028:	2301      	movs	r3, #1
 800402a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402e:	f383 8810 	msr	PRIMASK, r3
}
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2101      	movs	r1, #1
 8004040:	438a      	bics	r2, r1
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004046:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404a:	f383 8810 	msr	PRIMASK, r3
}
 800404e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004054:	2b01      	cmp	r3, #1
 8004056:	d118      	bne.n	800408a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004058:	f3ef 8310 	mrs	r3, PRIMASK
 800405c:	60bb      	str	r3, [r7, #8]
  return(result);
 800405e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004062:	2301      	movs	r3, #1
 8004064:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f383 8810 	msr	PRIMASK, r3
}
 800406c:	46c0      	nop			@ (mov r8, r8)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2110      	movs	r1, #16
 800407a:	438a      	bics	r2, r1
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004080:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f383 8810 	msr	PRIMASK, r3
}
 8004088:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2280      	movs	r2, #128	@ 0x80
 800408e:	2120      	movs	r1, #32
 8004090:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800409e:	46c0      	nop			@ (mov r8, r8)
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b00e      	add	sp, #56	@ 0x38
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	fffffedf 	.word	0xfffffedf

080040ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	225a      	movs	r2, #90	@ 0x5a
 80040be:	2100      	movs	r1, #0
 80040c0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2252      	movs	r2, #82	@ 0x52
 80040c6:	2100      	movs	r1, #0
 80040c8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7ff fbc1 	bl	8003854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d2:	46c0      	nop			@ (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b004      	add	sp, #16
 80040d8:	bd80      	pop	{r7, pc}

080040da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b086      	sub	sp, #24
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040e2:	f3ef 8310 	mrs	r3, PRIMASK
 80040e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80040e8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	2301      	movs	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f383 8810 	msr	PRIMASK, r3
}
 80040f6:	46c0      	nop			@ (mov r8, r8)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2140      	movs	r1, #64	@ 0x40
 8004104:	438a      	bics	r2, r1
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f383 8810 	msr	PRIMASK, r3
}
 8004112:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	0018      	movs	r0, r3
 8004124:	f7ff fb8e 	bl	8003844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004128:	46c0      	nop			@ (mov r8, r8)
 800412a:	46bd      	mov	sp, r7
 800412c:	b006      	add	sp, #24
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004138:	46c0      	nop			@ (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	b002      	add	sp, #8
 800413e:	bd80      	pop	{r7, pc}

08004140 <siprintf>:
 8004140:	b40e      	push	{r1, r2, r3}
 8004142:	b500      	push	{lr}
 8004144:	490b      	ldr	r1, [pc, #44]	@ (8004174 <siprintf+0x34>)
 8004146:	b09c      	sub	sp, #112	@ 0x70
 8004148:	ab1d      	add	r3, sp, #116	@ 0x74
 800414a:	9002      	str	r0, [sp, #8]
 800414c:	9006      	str	r0, [sp, #24]
 800414e:	9107      	str	r1, [sp, #28]
 8004150:	9104      	str	r1, [sp, #16]
 8004152:	4809      	ldr	r0, [pc, #36]	@ (8004178 <siprintf+0x38>)
 8004154:	4909      	ldr	r1, [pc, #36]	@ (800417c <siprintf+0x3c>)
 8004156:	cb04      	ldmia	r3!, {r2}
 8004158:	9105      	str	r1, [sp, #20]
 800415a:	6800      	ldr	r0, [r0, #0]
 800415c:	a902      	add	r1, sp, #8
 800415e:	9301      	str	r3, [sp, #4]
 8004160:	f000 f9c2 	bl	80044e8 <_svfiprintf_r>
 8004164:	2200      	movs	r2, #0
 8004166:	9b02      	ldr	r3, [sp, #8]
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	b01c      	add	sp, #112	@ 0x70
 800416c:	bc08      	pop	{r3}
 800416e:	b003      	add	sp, #12
 8004170:	4718      	bx	r3
 8004172:	46c0      	nop			@ (mov r8, r8)
 8004174:	7fffffff 	.word	0x7fffffff
 8004178:	2000000c 	.word	0x2000000c
 800417c:	ffff0208 	.word	0xffff0208

08004180 <memset>:
 8004180:	0003      	movs	r3, r0
 8004182:	1882      	adds	r2, r0, r2
 8004184:	4293      	cmp	r3, r2
 8004186:	d100      	bne.n	800418a <memset+0xa>
 8004188:	4770      	bx	lr
 800418a:	7019      	strb	r1, [r3, #0]
 800418c:	3301      	adds	r3, #1
 800418e:	e7f9      	b.n	8004184 <memset+0x4>

08004190 <strchr>:
 8004190:	b2c9      	uxtb	r1, r1
 8004192:	7803      	ldrb	r3, [r0, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d004      	beq.n	80041a2 <strchr+0x12>
 8004198:	428b      	cmp	r3, r1
 800419a:	d100      	bne.n	800419e <strchr+0xe>
 800419c:	4770      	bx	lr
 800419e:	3001      	adds	r0, #1
 80041a0:	e7f7      	b.n	8004192 <strchr+0x2>
 80041a2:	424b      	negs	r3, r1
 80041a4:	4159      	adcs	r1, r3
 80041a6:	4249      	negs	r1, r1
 80041a8:	4008      	ands	r0, r1
 80041aa:	e7f7      	b.n	800419c <strchr+0xc>

080041ac <strstr>:
 80041ac:	780a      	ldrb	r2, [r1, #0]
 80041ae:	b530      	push	{r4, r5, lr}
 80041b0:	2a00      	cmp	r2, #0
 80041b2:	d10c      	bne.n	80041ce <strstr+0x22>
 80041b4:	bd30      	pop	{r4, r5, pc}
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d108      	bne.n	80041cc <strstr+0x20>
 80041ba:	2301      	movs	r3, #1
 80041bc:	5ccc      	ldrb	r4, [r1, r3]
 80041be:	2c00      	cmp	r4, #0
 80041c0:	d0f8      	beq.n	80041b4 <strstr+0x8>
 80041c2:	5cc5      	ldrb	r5, [r0, r3]
 80041c4:	42a5      	cmp	r5, r4
 80041c6:	d101      	bne.n	80041cc <strstr+0x20>
 80041c8:	3301      	adds	r3, #1
 80041ca:	e7f7      	b.n	80041bc <strstr+0x10>
 80041cc:	3001      	adds	r0, #1
 80041ce:	7803      	ldrb	r3, [r0, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1f0      	bne.n	80041b6 <strstr+0xa>
 80041d4:	0018      	movs	r0, r3
 80041d6:	e7ed      	b.n	80041b4 <strstr+0x8>

080041d8 <__errno>:
 80041d8:	4b01      	ldr	r3, [pc, #4]	@ (80041e0 <__errno+0x8>)
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	4770      	bx	lr
 80041de:	46c0      	nop			@ (mov r8, r8)
 80041e0:	2000000c 	.word	0x2000000c

080041e4 <__libc_init_array>:
 80041e4:	b570      	push	{r4, r5, r6, lr}
 80041e6:	2600      	movs	r6, #0
 80041e8:	4c0c      	ldr	r4, [pc, #48]	@ (800421c <__libc_init_array+0x38>)
 80041ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004220 <__libc_init_array+0x3c>)
 80041ec:	1b64      	subs	r4, r4, r5
 80041ee:	10a4      	asrs	r4, r4, #2
 80041f0:	42a6      	cmp	r6, r4
 80041f2:	d109      	bne.n	8004208 <__libc_init_array+0x24>
 80041f4:	2600      	movs	r6, #0
 80041f6:	f000 fc65 	bl	8004ac4 <_init>
 80041fa:	4c0a      	ldr	r4, [pc, #40]	@ (8004224 <__libc_init_array+0x40>)
 80041fc:	4d0a      	ldr	r5, [pc, #40]	@ (8004228 <__libc_init_array+0x44>)
 80041fe:	1b64      	subs	r4, r4, r5
 8004200:	10a4      	asrs	r4, r4, #2
 8004202:	42a6      	cmp	r6, r4
 8004204:	d105      	bne.n	8004212 <__libc_init_array+0x2e>
 8004206:	bd70      	pop	{r4, r5, r6, pc}
 8004208:	00b3      	lsls	r3, r6, #2
 800420a:	58eb      	ldr	r3, [r5, r3]
 800420c:	4798      	blx	r3
 800420e:	3601      	adds	r6, #1
 8004210:	e7ee      	b.n	80041f0 <__libc_init_array+0xc>
 8004212:	00b3      	lsls	r3, r6, #2
 8004214:	58eb      	ldr	r3, [r5, r3]
 8004216:	4798      	blx	r3
 8004218:	3601      	adds	r6, #1
 800421a:	e7f2      	b.n	8004202 <__libc_init_array+0x1e>
 800421c:	080051b8 	.word	0x080051b8
 8004220:	080051b8 	.word	0x080051b8
 8004224:	080051bc 	.word	0x080051bc
 8004228:	080051b8 	.word	0x080051b8

0800422c <__retarget_lock_acquire_recursive>:
 800422c:	4770      	bx	lr

0800422e <__retarget_lock_release_recursive>:
 800422e:	4770      	bx	lr

08004230 <_free_r>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	0005      	movs	r5, r0
 8004234:	1e0c      	subs	r4, r1, #0
 8004236:	d010      	beq.n	800425a <_free_r+0x2a>
 8004238:	3c04      	subs	r4, #4
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	da00      	bge.n	8004242 <_free_r+0x12>
 8004240:	18e4      	adds	r4, r4, r3
 8004242:	0028      	movs	r0, r5
 8004244:	f000 f8e0 	bl	8004408 <__malloc_lock>
 8004248:	4a1d      	ldr	r2, [pc, #116]	@ (80042c0 <_free_r+0x90>)
 800424a:	6813      	ldr	r3, [r2, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d105      	bne.n	800425c <_free_r+0x2c>
 8004250:	6063      	str	r3, [r4, #4]
 8004252:	6014      	str	r4, [r2, #0]
 8004254:	0028      	movs	r0, r5
 8004256:	f000 f8df 	bl	8004418 <__malloc_unlock>
 800425a:	bd70      	pop	{r4, r5, r6, pc}
 800425c:	42a3      	cmp	r3, r4
 800425e:	d908      	bls.n	8004272 <_free_r+0x42>
 8004260:	6820      	ldr	r0, [r4, #0]
 8004262:	1821      	adds	r1, r4, r0
 8004264:	428b      	cmp	r3, r1
 8004266:	d1f3      	bne.n	8004250 <_free_r+0x20>
 8004268:	6819      	ldr	r1, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	1809      	adds	r1, r1, r0
 800426e:	6021      	str	r1, [r4, #0]
 8004270:	e7ee      	b.n	8004250 <_free_r+0x20>
 8004272:	001a      	movs	r2, r3
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <_free_r+0x4e>
 800427a:	42a3      	cmp	r3, r4
 800427c:	d9f9      	bls.n	8004272 <_free_r+0x42>
 800427e:	6811      	ldr	r1, [r2, #0]
 8004280:	1850      	adds	r0, r2, r1
 8004282:	42a0      	cmp	r0, r4
 8004284:	d10b      	bne.n	800429e <_free_r+0x6e>
 8004286:	6820      	ldr	r0, [r4, #0]
 8004288:	1809      	adds	r1, r1, r0
 800428a:	1850      	adds	r0, r2, r1
 800428c:	6011      	str	r1, [r2, #0]
 800428e:	4283      	cmp	r3, r0
 8004290:	d1e0      	bne.n	8004254 <_free_r+0x24>
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	1841      	adds	r1, r0, r1
 8004298:	6011      	str	r1, [r2, #0]
 800429a:	6053      	str	r3, [r2, #4]
 800429c:	e7da      	b.n	8004254 <_free_r+0x24>
 800429e:	42a0      	cmp	r0, r4
 80042a0:	d902      	bls.n	80042a8 <_free_r+0x78>
 80042a2:	230c      	movs	r3, #12
 80042a4:	602b      	str	r3, [r5, #0]
 80042a6:	e7d5      	b.n	8004254 <_free_r+0x24>
 80042a8:	6820      	ldr	r0, [r4, #0]
 80042aa:	1821      	adds	r1, r4, r0
 80042ac:	428b      	cmp	r3, r1
 80042ae:	d103      	bne.n	80042b8 <_free_r+0x88>
 80042b0:	6819      	ldr	r1, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	1809      	adds	r1, r1, r0
 80042b6:	6021      	str	r1, [r4, #0]
 80042b8:	6063      	str	r3, [r4, #4]
 80042ba:	6054      	str	r4, [r2, #4]
 80042bc:	e7ca      	b.n	8004254 <_free_r+0x24>
 80042be:	46c0      	nop			@ (mov r8, r8)
 80042c0:	20000418 	.word	0x20000418

080042c4 <sbrk_aligned>:
 80042c4:	b570      	push	{r4, r5, r6, lr}
 80042c6:	4e0f      	ldr	r6, [pc, #60]	@ (8004304 <sbrk_aligned+0x40>)
 80042c8:	000d      	movs	r5, r1
 80042ca:	6831      	ldr	r1, [r6, #0]
 80042cc:	0004      	movs	r4, r0
 80042ce:	2900      	cmp	r1, #0
 80042d0:	d102      	bne.n	80042d8 <sbrk_aligned+0x14>
 80042d2:	f000 fb99 	bl	8004a08 <_sbrk_r>
 80042d6:	6030      	str	r0, [r6, #0]
 80042d8:	0029      	movs	r1, r5
 80042da:	0020      	movs	r0, r4
 80042dc:	f000 fb94 	bl	8004a08 <_sbrk_r>
 80042e0:	1c43      	adds	r3, r0, #1
 80042e2:	d103      	bne.n	80042ec <sbrk_aligned+0x28>
 80042e4:	2501      	movs	r5, #1
 80042e6:	426d      	negs	r5, r5
 80042e8:	0028      	movs	r0, r5
 80042ea:	bd70      	pop	{r4, r5, r6, pc}
 80042ec:	2303      	movs	r3, #3
 80042ee:	1cc5      	adds	r5, r0, #3
 80042f0:	439d      	bics	r5, r3
 80042f2:	42a8      	cmp	r0, r5
 80042f4:	d0f8      	beq.n	80042e8 <sbrk_aligned+0x24>
 80042f6:	1a29      	subs	r1, r5, r0
 80042f8:	0020      	movs	r0, r4
 80042fa:	f000 fb85 	bl	8004a08 <_sbrk_r>
 80042fe:	3001      	adds	r0, #1
 8004300:	d1f2      	bne.n	80042e8 <sbrk_aligned+0x24>
 8004302:	e7ef      	b.n	80042e4 <sbrk_aligned+0x20>
 8004304:	20000414 	.word	0x20000414

08004308 <_malloc_r>:
 8004308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800430a:	2203      	movs	r2, #3
 800430c:	1ccb      	adds	r3, r1, #3
 800430e:	4393      	bics	r3, r2
 8004310:	3308      	adds	r3, #8
 8004312:	0005      	movs	r5, r0
 8004314:	001f      	movs	r7, r3
 8004316:	2b0c      	cmp	r3, #12
 8004318:	d234      	bcs.n	8004384 <_malloc_r+0x7c>
 800431a:	270c      	movs	r7, #12
 800431c:	42b9      	cmp	r1, r7
 800431e:	d833      	bhi.n	8004388 <_malloc_r+0x80>
 8004320:	0028      	movs	r0, r5
 8004322:	f000 f871 	bl	8004408 <__malloc_lock>
 8004326:	4e37      	ldr	r6, [pc, #220]	@ (8004404 <_malloc_r+0xfc>)
 8004328:	6833      	ldr	r3, [r6, #0]
 800432a:	001c      	movs	r4, r3
 800432c:	2c00      	cmp	r4, #0
 800432e:	d12f      	bne.n	8004390 <_malloc_r+0x88>
 8004330:	0039      	movs	r1, r7
 8004332:	0028      	movs	r0, r5
 8004334:	f7ff ffc6 	bl	80042c4 <sbrk_aligned>
 8004338:	0004      	movs	r4, r0
 800433a:	1c43      	adds	r3, r0, #1
 800433c:	d15f      	bne.n	80043fe <_malloc_r+0xf6>
 800433e:	6834      	ldr	r4, [r6, #0]
 8004340:	9400      	str	r4, [sp, #0]
 8004342:	9b00      	ldr	r3, [sp, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d14a      	bne.n	80043de <_malloc_r+0xd6>
 8004348:	2c00      	cmp	r4, #0
 800434a:	d052      	beq.n	80043f2 <_malloc_r+0xea>
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	0028      	movs	r0, r5
 8004350:	18e3      	adds	r3, r4, r3
 8004352:	9900      	ldr	r1, [sp, #0]
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	f000 fb57 	bl	8004a08 <_sbrk_r>
 800435a:	9b01      	ldr	r3, [sp, #4]
 800435c:	4283      	cmp	r3, r0
 800435e:	d148      	bne.n	80043f2 <_malloc_r+0xea>
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	0028      	movs	r0, r5
 8004364:	1aff      	subs	r7, r7, r3
 8004366:	0039      	movs	r1, r7
 8004368:	f7ff ffac 	bl	80042c4 <sbrk_aligned>
 800436c:	3001      	adds	r0, #1
 800436e:	d040      	beq.n	80043f2 <_malloc_r+0xea>
 8004370:	6823      	ldr	r3, [r4, #0]
 8004372:	19db      	adds	r3, r3, r7
 8004374:	6023      	str	r3, [r4, #0]
 8004376:	6833      	ldr	r3, [r6, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	2a00      	cmp	r2, #0
 800437c:	d133      	bne.n	80043e6 <_malloc_r+0xde>
 800437e:	9b00      	ldr	r3, [sp, #0]
 8004380:	6033      	str	r3, [r6, #0]
 8004382:	e019      	b.n	80043b8 <_malloc_r+0xb0>
 8004384:	2b00      	cmp	r3, #0
 8004386:	dac9      	bge.n	800431c <_malloc_r+0x14>
 8004388:	230c      	movs	r3, #12
 800438a:	602b      	str	r3, [r5, #0]
 800438c:	2000      	movs	r0, #0
 800438e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004390:	6821      	ldr	r1, [r4, #0]
 8004392:	1bc9      	subs	r1, r1, r7
 8004394:	d420      	bmi.n	80043d8 <_malloc_r+0xd0>
 8004396:	290b      	cmp	r1, #11
 8004398:	d90a      	bls.n	80043b0 <_malloc_r+0xa8>
 800439a:	19e2      	adds	r2, r4, r7
 800439c:	6027      	str	r7, [r4, #0]
 800439e:	42a3      	cmp	r3, r4
 80043a0:	d104      	bne.n	80043ac <_malloc_r+0xa4>
 80043a2:	6032      	str	r2, [r6, #0]
 80043a4:	6863      	ldr	r3, [r4, #4]
 80043a6:	6011      	str	r1, [r2, #0]
 80043a8:	6053      	str	r3, [r2, #4]
 80043aa:	e005      	b.n	80043b8 <_malloc_r+0xb0>
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	e7f9      	b.n	80043a4 <_malloc_r+0x9c>
 80043b0:	6862      	ldr	r2, [r4, #4]
 80043b2:	42a3      	cmp	r3, r4
 80043b4:	d10e      	bne.n	80043d4 <_malloc_r+0xcc>
 80043b6:	6032      	str	r2, [r6, #0]
 80043b8:	0028      	movs	r0, r5
 80043ba:	f000 f82d 	bl	8004418 <__malloc_unlock>
 80043be:	0020      	movs	r0, r4
 80043c0:	2207      	movs	r2, #7
 80043c2:	300b      	adds	r0, #11
 80043c4:	1d23      	adds	r3, r4, #4
 80043c6:	4390      	bics	r0, r2
 80043c8:	1ac2      	subs	r2, r0, r3
 80043ca:	4298      	cmp	r0, r3
 80043cc:	d0df      	beq.n	800438e <_malloc_r+0x86>
 80043ce:	1a1b      	subs	r3, r3, r0
 80043d0:	50a3      	str	r3, [r4, r2]
 80043d2:	e7dc      	b.n	800438e <_malloc_r+0x86>
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	e7ef      	b.n	80043b8 <_malloc_r+0xb0>
 80043d8:	0023      	movs	r3, r4
 80043da:	6864      	ldr	r4, [r4, #4]
 80043dc:	e7a6      	b.n	800432c <_malloc_r+0x24>
 80043de:	9c00      	ldr	r4, [sp, #0]
 80043e0:	6863      	ldr	r3, [r4, #4]
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	e7ad      	b.n	8004342 <_malloc_r+0x3a>
 80043e6:	001a      	movs	r2, r3
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	42a3      	cmp	r3, r4
 80043ec:	d1fb      	bne.n	80043e6 <_malloc_r+0xde>
 80043ee:	2300      	movs	r3, #0
 80043f0:	e7da      	b.n	80043a8 <_malloc_r+0xa0>
 80043f2:	230c      	movs	r3, #12
 80043f4:	0028      	movs	r0, r5
 80043f6:	602b      	str	r3, [r5, #0]
 80043f8:	f000 f80e 	bl	8004418 <__malloc_unlock>
 80043fc:	e7c6      	b.n	800438c <_malloc_r+0x84>
 80043fe:	6007      	str	r7, [r0, #0]
 8004400:	e7da      	b.n	80043b8 <_malloc_r+0xb0>
 8004402:	46c0      	nop			@ (mov r8, r8)
 8004404:	20000418 	.word	0x20000418

08004408 <__malloc_lock>:
 8004408:	b510      	push	{r4, lr}
 800440a:	4802      	ldr	r0, [pc, #8]	@ (8004414 <__malloc_lock+0xc>)
 800440c:	f7ff ff0e 	bl	800422c <__retarget_lock_acquire_recursive>
 8004410:	bd10      	pop	{r4, pc}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	20000410 	.word	0x20000410

08004418 <__malloc_unlock>:
 8004418:	b510      	push	{r4, lr}
 800441a:	4802      	ldr	r0, [pc, #8]	@ (8004424 <__malloc_unlock+0xc>)
 800441c:	f7ff ff07 	bl	800422e <__retarget_lock_release_recursive>
 8004420:	bd10      	pop	{r4, pc}
 8004422:	46c0      	nop			@ (mov r8, r8)
 8004424:	20000410 	.word	0x20000410

08004428 <__ssputs_r>:
 8004428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442a:	688e      	ldr	r6, [r1, #8]
 800442c:	b085      	sub	sp, #20
 800442e:	001f      	movs	r7, r3
 8004430:	000c      	movs	r4, r1
 8004432:	680b      	ldr	r3, [r1, #0]
 8004434:	9002      	str	r0, [sp, #8]
 8004436:	9203      	str	r2, [sp, #12]
 8004438:	42be      	cmp	r6, r7
 800443a:	d830      	bhi.n	800449e <__ssputs_r+0x76>
 800443c:	210c      	movs	r1, #12
 800443e:	5e62      	ldrsh	r2, [r4, r1]
 8004440:	2190      	movs	r1, #144	@ 0x90
 8004442:	00c9      	lsls	r1, r1, #3
 8004444:	420a      	tst	r2, r1
 8004446:	d028      	beq.n	800449a <__ssputs_r+0x72>
 8004448:	2003      	movs	r0, #3
 800444a:	6921      	ldr	r1, [r4, #16]
 800444c:	1a5b      	subs	r3, r3, r1
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	6963      	ldr	r3, [r4, #20]
 8004452:	4343      	muls	r3, r0
 8004454:	9801      	ldr	r0, [sp, #4]
 8004456:	0fdd      	lsrs	r5, r3, #31
 8004458:	18ed      	adds	r5, r5, r3
 800445a:	1c7b      	adds	r3, r7, #1
 800445c:	181b      	adds	r3, r3, r0
 800445e:	106d      	asrs	r5, r5, #1
 8004460:	42ab      	cmp	r3, r5
 8004462:	d900      	bls.n	8004466 <__ssputs_r+0x3e>
 8004464:	001d      	movs	r5, r3
 8004466:	0552      	lsls	r2, r2, #21
 8004468:	d528      	bpl.n	80044bc <__ssputs_r+0x94>
 800446a:	0029      	movs	r1, r5
 800446c:	9802      	ldr	r0, [sp, #8]
 800446e:	f7ff ff4b 	bl	8004308 <_malloc_r>
 8004472:	1e06      	subs	r6, r0, #0
 8004474:	d02c      	beq.n	80044d0 <__ssputs_r+0xa8>
 8004476:	9a01      	ldr	r2, [sp, #4]
 8004478:	6921      	ldr	r1, [r4, #16]
 800447a:	f000 fae2 	bl	8004a42 <memcpy>
 800447e:	89a2      	ldrh	r2, [r4, #12]
 8004480:	4b18      	ldr	r3, [pc, #96]	@ (80044e4 <__ssputs_r+0xbc>)
 8004482:	401a      	ands	r2, r3
 8004484:	2380      	movs	r3, #128	@ 0x80
 8004486:	4313      	orrs	r3, r2
 8004488:	81a3      	strh	r3, [r4, #12]
 800448a:	9b01      	ldr	r3, [sp, #4]
 800448c:	6126      	str	r6, [r4, #16]
 800448e:	18f6      	adds	r6, r6, r3
 8004490:	6026      	str	r6, [r4, #0]
 8004492:	003e      	movs	r6, r7
 8004494:	6165      	str	r5, [r4, #20]
 8004496:	1aed      	subs	r5, r5, r3
 8004498:	60a5      	str	r5, [r4, #8]
 800449a:	42be      	cmp	r6, r7
 800449c:	d900      	bls.n	80044a0 <__ssputs_r+0x78>
 800449e:	003e      	movs	r6, r7
 80044a0:	0032      	movs	r2, r6
 80044a2:	9903      	ldr	r1, [sp, #12]
 80044a4:	6820      	ldr	r0, [r4, #0]
 80044a6:	f000 fa9b 	bl	80049e0 <memmove>
 80044aa:	2000      	movs	r0, #0
 80044ac:	68a3      	ldr	r3, [r4, #8]
 80044ae:	1b9b      	subs	r3, r3, r6
 80044b0:	60a3      	str	r3, [r4, #8]
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	199b      	adds	r3, r3, r6
 80044b6:	6023      	str	r3, [r4, #0]
 80044b8:	b005      	add	sp, #20
 80044ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044bc:	002a      	movs	r2, r5
 80044be:	9802      	ldr	r0, [sp, #8]
 80044c0:	f000 fac8 	bl	8004a54 <_realloc_r>
 80044c4:	1e06      	subs	r6, r0, #0
 80044c6:	d1e0      	bne.n	800448a <__ssputs_r+0x62>
 80044c8:	6921      	ldr	r1, [r4, #16]
 80044ca:	9802      	ldr	r0, [sp, #8]
 80044cc:	f7ff feb0 	bl	8004230 <_free_r>
 80044d0:	230c      	movs	r3, #12
 80044d2:	2001      	movs	r0, #1
 80044d4:	9a02      	ldr	r2, [sp, #8]
 80044d6:	4240      	negs	r0, r0
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	89a2      	ldrh	r2, [r4, #12]
 80044dc:	3334      	adds	r3, #52	@ 0x34
 80044de:	4313      	orrs	r3, r2
 80044e0:	81a3      	strh	r3, [r4, #12]
 80044e2:	e7e9      	b.n	80044b8 <__ssputs_r+0x90>
 80044e4:	fffffb7f 	.word	0xfffffb7f

080044e8 <_svfiprintf_r>:
 80044e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ea:	b0a1      	sub	sp, #132	@ 0x84
 80044ec:	9003      	str	r0, [sp, #12]
 80044ee:	001d      	movs	r5, r3
 80044f0:	898b      	ldrh	r3, [r1, #12]
 80044f2:	000f      	movs	r7, r1
 80044f4:	0016      	movs	r6, r2
 80044f6:	061b      	lsls	r3, r3, #24
 80044f8:	d511      	bpl.n	800451e <_svfiprintf_r+0x36>
 80044fa:	690b      	ldr	r3, [r1, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10e      	bne.n	800451e <_svfiprintf_r+0x36>
 8004500:	2140      	movs	r1, #64	@ 0x40
 8004502:	f7ff ff01 	bl	8004308 <_malloc_r>
 8004506:	6038      	str	r0, [r7, #0]
 8004508:	6138      	str	r0, [r7, #16]
 800450a:	2800      	cmp	r0, #0
 800450c:	d105      	bne.n	800451a <_svfiprintf_r+0x32>
 800450e:	230c      	movs	r3, #12
 8004510:	9a03      	ldr	r2, [sp, #12]
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	2001      	movs	r0, #1
 8004516:	4240      	negs	r0, r0
 8004518:	e0cf      	b.n	80046ba <_svfiprintf_r+0x1d2>
 800451a:	2340      	movs	r3, #64	@ 0x40
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	2300      	movs	r3, #0
 8004520:	ac08      	add	r4, sp, #32
 8004522:	6163      	str	r3, [r4, #20]
 8004524:	3320      	adds	r3, #32
 8004526:	7663      	strb	r3, [r4, #25]
 8004528:	3310      	adds	r3, #16
 800452a:	76a3      	strb	r3, [r4, #26]
 800452c:	9507      	str	r5, [sp, #28]
 800452e:	0035      	movs	r5, r6
 8004530:	782b      	ldrb	r3, [r5, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <_svfiprintf_r+0x52>
 8004536:	2b25      	cmp	r3, #37	@ 0x25
 8004538:	d148      	bne.n	80045cc <_svfiprintf_r+0xe4>
 800453a:	1bab      	subs	r3, r5, r6
 800453c:	9305      	str	r3, [sp, #20]
 800453e:	42b5      	cmp	r5, r6
 8004540:	d00b      	beq.n	800455a <_svfiprintf_r+0x72>
 8004542:	0032      	movs	r2, r6
 8004544:	0039      	movs	r1, r7
 8004546:	9803      	ldr	r0, [sp, #12]
 8004548:	f7ff ff6e 	bl	8004428 <__ssputs_r>
 800454c:	3001      	adds	r0, #1
 800454e:	d100      	bne.n	8004552 <_svfiprintf_r+0x6a>
 8004550:	e0ae      	b.n	80046b0 <_svfiprintf_r+0x1c8>
 8004552:	6963      	ldr	r3, [r4, #20]
 8004554:	9a05      	ldr	r2, [sp, #20]
 8004556:	189b      	adds	r3, r3, r2
 8004558:	6163      	str	r3, [r4, #20]
 800455a:	782b      	ldrb	r3, [r5, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d100      	bne.n	8004562 <_svfiprintf_r+0x7a>
 8004560:	e0a6      	b.n	80046b0 <_svfiprintf_r+0x1c8>
 8004562:	2201      	movs	r2, #1
 8004564:	2300      	movs	r3, #0
 8004566:	4252      	negs	r2, r2
 8004568:	6062      	str	r2, [r4, #4]
 800456a:	a904      	add	r1, sp, #16
 800456c:	3254      	adds	r2, #84	@ 0x54
 800456e:	1852      	adds	r2, r2, r1
 8004570:	1c6e      	adds	r6, r5, #1
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	60e3      	str	r3, [r4, #12]
 8004576:	60a3      	str	r3, [r4, #8]
 8004578:	7013      	strb	r3, [r2, #0]
 800457a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800457c:	4b54      	ldr	r3, [pc, #336]	@ (80046d0 <_svfiprintf_r+0x1e8>)
 800457e:	2205      	movs	r2, #5
 8004580:	0018      	movs	r0, r3
 8004582:	7831      	ldrb	r1, [r6, #0]
 8004584:	9305      	str	r3, [sp, #20]
 8004586:	f000 fa51 	bl	8004a2c <memchr>
 800458a:	1c75      	adds	r5, r6, #1
 800458c:	2800      	cmp	r0, #0
 800458e:	d11f      	bne.n	80045d0 <_svfiprintf_r+0xe8>
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	06d3      	lsls	r3, r2, #27
 8004594:	d504      	bpl.n	80045a0 <_svfiprintf_r+0xb8>
 8004596:	2353      	movs	r3, #83	@ 0x53
 8004598:	a904      	add	r1, sp, #16
 800459a:	185b      	adds	r3, r3, r1
 800459c:	2120      	movs	r1, #32
 800459e:	7019      	strb	r1, [r3, #0]
 80045a0:	0713      	lsls	r3, r2, #28
 80045a2:	d504      	bpl.n	80045ae <_svfiprintf_r+0xc6>
 80045a4:	2353      	movs	r3, #83	@ 0x53
 80045a6:	a904      	add	r1, sp, #16
 80045a8:	185b      	adds	r3, r3, r1
 80045aa:	212b      	movs	r1, #43	@ 0x2b
 80045ac:	7019      	strb	r1, [r3, #0]
 80045ae:	7833      	ldrb	r3, [r6, #0]
 80045b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80045b2:	d016      	beq.n	80045e2 <_svfiprintf_r+0xfa>
 80045b4:	0035      	movs	r5, r6
 80045b6:	2100      	movs	r1, #0
 80045b8:	200a      	movs	r0, #10
 80045ba:	68e3      	ldr	r3, [r4, #12]
 80045bc:	782a      	ldrb	r2, [r5, #0]
 80045be:	1c6e      	adds	r6, r5, #1
 80045c0:	3a30      	subs	r2, #48	@ 0x30
 80045c2:	2a09      	cmp	r2, #9
 80045c4:	d950      	bls.n	8004668 <_svfiprintf_r+0x180>
 80045c6:	2900      	cmp	r1, #0
 80045c8:	d111      	bne.n	80045ee <_svfiprintf_r+0x106>
 80045ca:	e017      	b.n	80045fc <_svfiprintf_r+0x114>
 80045cc:	3501      	adds	r5, #1
 80045ce:	e7af      	b.n	8004530 <_svfiprintf_r+0x48>
 80045d0:	9b05      	ldr	r3, [sp, #20]
 80045d2:	6822      	ldr	r2, [r4, #0]
 80045d4:	1ac0      	subs	r0, r0, r3
 80045d6:	2301      	movs	r3, #1
 80045d8:	4083      	lsls	r3, r0
 80045da:	4313      	orrs	r3, r2
 80045dc:	002e      	movs	r6, r5
 80045de:	6023      	str	r3, [r4, #0]
 80045e0:	e7cc      	b.n	800457c <_svfiprintf_r+0x94>
 80045e2:	9b07      	ldr	r3, [sp, #28]
 80045e4:	1d19      	adds	r1, r3, #4
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	9107      	str	r1, [sp, #28]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	db01      	blt.n	80045f2 <_svfiprintf_r+0x10a>
 80045ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045f0:	e004      	b.n	80045fc <_svfiprintf_r+0x114>
 80045f2:	425b      	negs	r3, r3
 80045f4:	60e3      	str	r3, [r4, #12]
 80045f6:	2302      	movs	r3, #2
 80045f8:	4313      	orrs	r3, r2
 80045fa:	6023      	str	r3, [r4, #0]
 80045fc:	782b      	ldrb	r3, [r5, #0]
 80045fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8004600:	d10c      	bne.n	800461c <_svfiprintf_r+0x134>
 8004602:	786b      	ldrb	r3, [r5, #1]
 8004604:	2b2a      	cmp	r3, #42	@ 0x2a
 8004606:	d134      	bne.n	8004672 <_svfiprintf_r+0x18a>
 8004608:	9b07      	ldr	r3, [sp, #28]
 800460a:	3502      	adds	r5, #2
 800460c:	1d1a      	adds	r2, r3, #4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	9207      	str	r2, [sp, #28]
 8004612:	2b00      	cmp	r3, #0
 8004614:	da01      	bge.n	800461a <_svfiprintf_r+0x132>
 8004616:	2301      	movs	r3, #1
 8004618:	425b      	negs	r3, r3
 800461a:	9309      	str	r3, [sp, #36]	@ 0x24
 800461c:	4e2d      	ldr	r6, [pc, #180]	@ (80046d4 <_svfiprintf_r+0x1ec>)
 800461e:	2203      	movs	r2, #3
 8004620:	0030      	movs	r0, r6
 8004622:	7829      	ldrb	r1, [r5, #0]
 8004624:	f000 fa02 	bl	8004a2c <memchr>
 8004628:	2800      	cmp	r0, #0
 800462a:	d006      	beq.n	800463a <_svfiprintf_r+0x152>
 800462c:	2340      	movs	r3, #64	@ 0x40
 800462e:	1b80      	subs	r0, r0, r6
 8004630:	4083      	lsls	r3, r0
 8004632:	6822      	ldr	r2, [r4, #0]
 8004634:	3501      	adds	r5, #1
 8004636:	4313      	orrs	r3, r2
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	7829      	ldrb	r1, [r5, #0]
 800463c:	2206      	movs	r2, #6
 800463e:	4826      	ldr	r0, [pc, #152]	@ (80046d8 <_svfiprintf_r+0x1f0>)
 8004640:	1c6e      	adds	r6, r5, #1
 8004642:	7621      	strb	r1, [r4, #24]
 8004644:	f000 f9f2 	bl	8004a2c <memchr>
 8004648:	2800      	cmp	r0, #0
 800464a:	d038      	beq.n	80046be <_svfiprintf_r+0x1d6>
 800464c:	4b23      	ldr	r3, [pc, #140]	@ (80046dc <_svfiprintf_r+0x1f4>)
 800464e:	2b00      	cmp	r3, #0
 8004650:	d122      	bne.n	8004698 <_svfiprintf_r+0x1b0>
 8004652:	2207      	movs	r2, #7
 8004654:	9b07      	ldr	r3, [sp, #28]
 8004656:	3307      	adds	r3, #7
 8004658:	4393      	bics	r3, r2
 800465a:	3308      	adds	r3, #8
 800465c:	9307      	str	r3, [sp, #28]
 800465e:	6963      	ldr	r3, [r4, #20]
 8004660:	9a04      	ldr	r2, [sp, #16]
 8004662:	189b      	adds	r3, r3, r2
 8004664:	6163      	str	r3, [r4, #20]
 8004666:	e762      	b.n	800452e <_svfiprintf_r+0x46>
 8004668:	4343      	muls	r3, r0
 800466a:	0035      	movs	r5, r6
 800466c:	2101      	movs	r1, #1
 800466e:	189b      	adds	r3, r3, r2
 8004670:	e7a4      	b.n	80045bc <_svfiprintf_r+0xd4>
 8004672:	2300      	movs	r3, #0
 8004674:	200a      	movs	r0, #10
 8004676:	0019      	movs	r1, r3
 8004678:	3501      	adds	r5, #1
 800467a:	6063      	str	r3, [r4, #4]
 800467c:	782a      	ldrb	r2, [r5, #0]
 800467e:	1c6e      	adds	r6, r5, #1
 8004680:	3a30      	subs	r2, #48	@ 0x30
 8004682:	2a09      	cmp	r2, #9
 8004684:	d903      	bls.n	800468e <_svfiprintf_r+0x1a6>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0c8      	beq.n	800461c <_svfiprintf_r+0x134>
 800468a:	9109      	str	r1, [sp, #36]	@ 0x24
 800468c:	e7c6      	b.n	800461c <_svfiprintf_r+0x134>
 800468e:	4341      	muls	r1, r0
 8004690:	0035      	movs	r5, r6
 8004692:	2301      	movs	r3, #1
 8004694:	1889      	adds	r1, r1, r2
 8004696:	e7f1      	b.n	800467c <_svfiprintf_r+0x194>
 8004698:	aa07      	add	r2, sp, #28
 800469a:	9200      	str	r2, [sp, #0]
 800469c:	0021      	movs	r1, r4
 800469e:	003a      	movs	r2, r7
 80046a0:	4b0f      	ldr	r3, [pc, #60]	@ (80046e0 <_svfiprintf_r+0x1f8>)
 80046a2:	9803      	ldr	r0, [sp, #12]
 80046a4:	e000      	b.n	80046a8 <_svfiprintf_r+0x1c0>
 80046a6:	bf00      	nop
 80046a8:	9004      	str	r0, [sp, #16]
 80046aa:	9b04      	ldr	r3, [sp, #16]
 80046ac:	3301      	adds	r3, #1
 80046ae:	d1d6      	bne.n	800465e <_svfiprintf_r+0x176>
 80046b0:	89bb      	ldrh	r3, [r7, #12]
 80046b2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80046b4:	065b      	lsls	r3, r3, #25
 80046b6:	d500      	bpl.n	80046ba <_svfiprintf_r+0x1d2>
 80046b8:	e72c      	b.n	8004514 <_svfiprintf_r+0x2c>
 80046ba:	b021      	add	sp, #132	@ 0x84
 80046bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046be:	aa07      	add	r2, sp, #28
 80046c0:	9200      	str	r2, [sp, #0]
 80046c2:	0021      	movs	r1, r4
 80046c4:	003a      	movs	r2, r7
 80046c6:	4b06      	ldr	r3, [pc, #24]	@ (80046e0 <_svfiprintf_r+0x1f8>)
 80046c8:	9803      	ldr	r0, [sp, #12]
 80046ca:	f000 f87b 	bl	80047c4 <_printf_i>
 80046ce:	e7eb      	b.n	80046a8 <_svfiprintf_r+0x1c0>
 80046d0:	08005184 	.word	0x08005184
 80046d4:	0800518a 	.word	0x0800518a
 80046d8:	0800518e 	.word	0x0800518e
 80046dc:	00000000 	.word	0x00000000
 80046e0:	08004429 	.word	0x08004429

080046e4 <_printf_common>:
 80046e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046e6:	0016      	movs	r6, r2
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	688a      	ldr	r2, [r1, #8]
 80046ec:	690b      	ldr	r3, [r1, #16]
 80046ee:	000c      	movs	r4, r1
 80046f0:	9000      	str	r0, [sp, #0]
 80046f2:	4293      	cmp	r3, r2
 80046f4:	da00      	bge.n	80046f8 <_printf_common+0x14>
 80046f6:	0013      	movs	r3, r2
 80046f8:	0022      	movs	r2, r4
 80046fa:	6033      	str	r3, [r6, #0]
 80046fc:	3243      	adds	r2, #67	@ 0x43
 80046fe:	7812      	ldrb	r2, [r2, #0]
 8004700:	2a00      	cmp	r2, #0
 8004702:	d001      	beq.n	8004708 <_printf_common+0x24>
 8004704:	3301      	adds	r3, #1
 8004706:	6033      	str	r3, [r6, #0]
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	069b      	lsls	r3, r3, #26
 800470c:	d502      	bpl.n	8004714 <_printf_common+0x30>
 800470e:	6833      	ldr	r3, [r6, #0]
 8004710:	3302      	adds	r3, #2
 8004712:	6033      	str	r3, [r6, #0]
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	2306      	movs	r3, #6
 8004718:	0015      	movs	r5, r2
 800471a:	401d      	ands	r5, r3
 800471c:	421a      	tst	r2, r3
 800471e:	d027      	beq.n	8004770 <_printf_common+0x8c>
 8004720:	0023      	movs	r3, r4
 8004722:	3343      	adds	r3, #67	@ 0x43
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	1e5a      	subs	r2, r3, #1
 8004728:	4193      	sbcs	r3, r2
 800472a:	6822      	ldr	r2, [r4, #0]
 800472c:	0692      	lsls	r2, r2, #26
 800472e:	d430      	bmi.n	8004792 <_printf_common+0xae>
 8004730:	0022      	movs	r2, r4
 8004732:	9901      	ldr	r1, [sp, #4]
 8004734:	9800      	ldr	r0, [sp, #0]
 8004736:	9d08      	ldr	r5, [sp, #32]
 8004738:	3243      	adds	r2, #67	@ 0x43
 800473a:	47a8      	blx	r5
 800473c:	3001      	adds	r0, #1
 800473e:	d025      	beq.n	800478c <_printf_common+0xa8>
 8004740:	2206      	movs	r2, #6
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	2500      	movs	r5, #0
 8004746:	4013      	ands	r3, r2
 8004748:	2b04      	cmp	r3, #4
 800474a:	d105      	bne.n	8004758 <_printf_common+0x74>
 800474c:	6833      	ldr	r3, [r6, #0]
 800474e:	68e5      	ldr	r5, [r4, #12]
 8004750:	1aed      	subs	r5, r5, r3
 8004752:	43eb      	mvns	r3, r5
 8004754:	17db      	asrs	r3, r3, #31
 8004756:	401d      	ands	r5, r3
 8004758:	68a3      	ldr	r3, [r4, #8]
 800475a:	6922      	ldr	r2, [r4, #16]
 800475c:	4293      	cmp	r3, r2
 800475e:	dd01      	ble.n	8004764 <_printf_common+0x80>
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	18ed      	adds	r5, r5, r3
 8004764:	2600      	movs	r6, #0
 8004766:	42b5      	cmp	r5, r6
 8004768:	d120      	bne.n	80047ac <_printf_common+0xc8>
 800476a:	2000      	movs	r0, #0
 800476c:	e010      	b.n	8004790 <_printf_common+0xac>
 800476e:	3501      	adds	r5, #1
 8004770:	68e3      	ldr	r3, [r4, #12]
 8004772:	6832      	ldr	r2, [r6, #0]
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	42ab      	cmp	r3, r5
 8004778:	ddd2      	ble.n	8004720 <_printf_common+0x3c>
 800477a:	0022      	movs	r2, r4
 800477c:	2301      	movs	r3, #1
 800477e:	9901      	ldr	r1, [sp, #4]
 8004780:	9800      	ldr	r0, [sp, #0]
 8004782:	9f08      	ldr	r7, [sp, #32]
 8004784:	3219      	adds	r2, #25
 8004786:	47b8      	blx	r7
 8004788:	3001      	adds	r0, #1
 800478a:	d1f0      	bne.n	800476e <_printf_common+0x8a>
 800478c:	2001      	movs	r0, #1
 800478e:	4240      	negs	r0, r0
 8004790:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004792:	2030      	movs	r0, #48	@ 0x30
 8004794:	18e1      	adds	r1, r4, r3
 8004796:	3143      	adds	r1, #67	@ 0x43
 8004798:	7008      	strb	r0, [r1, #0]
 800479a:	0021      	movs	r1, r4
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	3145      	adds	r1, #69	@ 0x45
 80047a0:	7809      	ldrb	r1, [r1, #0]
 80047a2:	18a2      	adds	r2, r4, r2
 80047a4:	3243      	adds	r2, #67	@ 0x43
 80047a6:	3302      	adds	r3, #2
 80047a8:	7011      	strb	r1, [r2, #0]
 80047aa:	e7c1      	b.n	8004730 <_printf_common+0x4c>
 80047ac:	0022      	movs	r2, r4
 80047ae:	2301      	movs	r3, #1
 80047b0:	9901      	ldr	r1, [sp, #4]
 80047b2:	9800      	ldr	r0, [sp, #0]
 80047b4:	9f08      	ldr	r7, [sp, #32]
 80047b6:	321a      	adds	r2, #26
 80047b8:	47b8      	blx	r7
 80047ba:	3001      	adds	r0, #1
 80047bc:	d0e6      	beq.n	800478c <_printf_common+0xa8>
 80047be:	3601      	adds	r6, #1
 80047c0:	e7d1      	b.n	8004766 <_printf_common+0x82>
	...

080047c4 <_printf_i>:
 80047c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047c6:	b08b      	sub	sp, #44	@ 0x2c
 80047c8:	9206      	str	r2, [sp, #24]
 80047ca:	000a      	movs	r2, r1
 80047cc:	3243      	adds	r2, #67	@ 0x43
 80047ce:	9307      	str	r3, [sp, #28]
 80047d0:	9005      	str	r0, [sp, #20]
 80047d2:	9203      	str	r2, [sp, #12]
 80047d4:	7e0a      	ldrb	r2, [r1, #24]
 80047d6:	000c      	movs	r4, r1
 80047d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80047da:	2a78      	cmp	r2, #120	@ 0x78
 80047dc:	d809      	bhi.n	80047f2 <_printf_i+0x2e>
 80047de:	2a62      	cmp	r2, #98	@ 0x62
 80047e0:	d80b      	bhi.n	80047fa <_printf_i+0x36>
 80047e2:	2a00      	cmp	r2, #0
 80047e4:	d100      	bne.n	80047e8 <_printf_i+0x24>
 80047e6:	e0bc      	b.n	8004962 <_printf_i+0x19e>
 80047e8:	497b      	ldr	r1, [pc, #492]	@ (80049d8 <_printf_i+0x214>)
 80047ea:	9104      	str	r1, [sp, #16]
 80047ec:	2a58      	cmp	r2, #88	@ 0x58
 80047ee:	d100      	bne.n	80047f2 <_printf_i+0x2e>
 80047f0:	e090      	b.n	8004914 <_printf_i+0x150>
 80047f2:	0025      	movs	r5, r4
 80047f4:	3542      	adds	r5, #66	@ 0x42
 80047f6:	702a      	strb	r2, [r5, #0]
 80047f8:	e022      	b.n	8004840 <_printf_i+0x7c>
 80047fa:	0010      	movs	r0, r2
 80047fc:	3863      	subs	r0, #99	@ 0x63
 80047fe:	2815      	cmp	r0, #21
 8004800:	d8f7      	bhi.n	80047f2 <_printf_i+0x2e>
 8004802:	f7fb fc87 	bl	8000114 <__gnu_thumb1_case_shi>
 8004806:	0016      	.short	0x0016
 8004808:	fff6001f 	.word	0xfff6001f
 800480c:	fff6fff6 	.word	0xfff6fff6
 8004810:	001ffff6 	.word	0x001ffff6
 8004814:	fff6fff6 	.word	0xfff6fff6
 8004818:	fff6fff6 	.word	0xfff6fff6
 800481c:	003600a1 	.word	0x003600a1
 8004820:	fff60080 	.word	0xfff60080
 8004824:	00b2fff6 	.word	0x00b2fff6
 8004828:	0036fff6 	.word	0x0036fff6
 800482c:	fff6fff6 	.word	0xfff6fff6
 8004830:	0084      	.short	0x0084
 8004832:	0025      	movs	r5, r4
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	3542      	adds	r5, #66	@ 0x42
 8004838:	1d11      	adds	r1, r2, #4
 800483a:	6019      	str	r1, [r3, #0]
 800483c:	6813      	ldr	r3, [r2, #0]
 800483e:	702b      	strb	r3, [r5, #0]
 8004840:	2301      	movs	r3, #1
 8004842:	e0a0      	b.n	8004986 <_printf_i+0x1c2>
 8004844:	6818      	ldr	r0, [r3, #0]
 8004846:	6809      	ldr	r1, [r1, #0]
 8004848:	1d02      	adds	r2, r0, #4
 800484a:	060d      	lsls	r5, r1, #24
 800484c:	d50b      	bpl.n	8004866 <_printf_i+0xa2>
 800484e:	6806      	ldr	r6, [r0, #0]
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	2e00      	cmp	r6, #0
 8004854:	da03      	bge.n	800485e <_printf_i+0x9a>
 8004856:	232d      	movs	r3, #45	@ 0x2d
 8004858:	9a03      	ldr	r2, [sp, #12]
 800485a:	4276      	negs	r6, r6
 800485c:	7013      	strb	r3, [r2, #0]
 800485e:	4b5e      	ldr	r3, [pc, #376]	@ (80049d8 <_printf_i+0x214>)
 8004860:	270a      	movs	r7, #10
 8004862:	9304      	str	r3, [sp, #16]
 8004864:	e018      	b.n	8004898 <_printf_i+0xd4>
 8004866:	6806      	ldr	r6, [r0, #0]
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	0649      	lsls	r1, r1, #25
 800486c:	d5f1      	bpl.n	8004852 <_printf_i+0x8e>
 800486e:	b236      	sxth	r6, r6
 8004870:	e7ef      	b.n	8004852 <_printf_i+0x8e>
 8004872:	6808      	ldr	r0, [r1, #0]
 8004874:	6819      	ldr	r1, [r3, #0]
 8004876:	c940      	ldmia	r1!, {r6}
 8004878:	0605      	lsls	r5, r0, #24
 800487a:	d402      	bmi.n	8004882 <_printf_i+0xbe>
 800487c:	0640      	lsls	r0, r0, #25
 800487e:	d500      	bpl.n	8004882 <_printf_i+0xbe>
 8004880:	b2b6      	uxth	r6, r6
 8004882:	6019      	str	r1, [r3, #0]
 8004884:	4b54      	ldr	r3, [pc, #336]	@ (80049d8 <_printf_i+0x214>)
 8004886:	270a      	movs	r7, #10
 8004888:	9304      	str	r3, [sp, #16]
 800488a:	2a6f      	cmp	r2, #111	@ 0x6f
 800488c:	d100      	bne.n	8004890 <_printf_i+0xcc>
 800488e:	3f02      	subs	r7, #2
 8004890:	0023      	movs	r3, r4
 8004892:	2200      	movs	r2, #0
 8004894:	3343      	adds	r3, #67	@ 0x43
 8004896:	701a      	strb	r2, [r3, #0]
 8004898:	6863      	ldr	r3, [r4, #4]
 800489a:	60a3      	str	r3, [r4, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	db03      	blt.n	80048a8 <_printf_i+0xe4>
 80048a0:	2104      	movs	r1, #4
 80048a2:	6822      	ldr	r2, [r4, #0]
 80048a4:	438a      	bics	r2, r1
 80048a6:	6022      	str	r2, [r4, #0]
 80048a8:	2e00      	cmp	r6, #0
 80048aa:	d102      	bne.n	80048b2 <_printf_i+0xee>
 80048ac:	9d03      	ldr	r5, [sp, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00c      	beq.n	80048cc <_printf_i+0x108>
 80048b2:	9d03      	ldr	r5, [sp, #12]
 80048b4:	0030      	movs	r0, r6
 80048b6:	0039      	movs	r1, r7
 80048b8:	f7fb fcbc 	bl	8000234 <__aeabi_uidivmod>
 80048bc:	9b04      	ldr	r3, [sp, #16]
 80048be:	3d01      	subs	r5, #1
 80048c0:	5c5b      	ldrb	r3, [r3, r1]
 80048c2:	702b      	strb	r3, [r5, #0]
 80048c4:	0033      	movs	r3, r6
 80048c6:	0006      	movs	r6, r0
 80048c8:	429f      	cmp	r7, r3
 80048ca:	d9f3      	bls.n	80048b4 <_printf_i+0xf0>
 80048cc:	2f08      	cmp	r7, #8
 80048ce:	d109      	bne.n	80048e4 <_printf_i+0x120>
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	07db      	lsls	r3, r3, #31
 80048d4:	d506      	bpl.n	80048e4 <_printf_i+0x120>
 80048d6:	6862      	ldr	r2, [r4, #4]
 80048d8:	6923      	ldr	r3, [r4, #16]
 80048da:	429a      	cmp	r2, r3
 80048dc:	dc02      	bgt.n	80048e4 <_printf_i+0x120>
 80048de:	2330      	movs	r3, #48	@ 0x30
 80048e0:	3d01      	subs	r5, #1
 80048e2:	702b      	strb	r3, [r5, #0]
 80048e4:	9b03      	ldr	r3, [sp, #12]
 80048e6:	1b5b      	subs	r3, r3, r5
 80048e8:	6123      	str	r3, [r4, #16]
 80048ea:	9b07      	ldr	r3, [sp, #28]
 80048ec:	0021      	movs	r1, r4
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	9805      	ldr	r0, [sp, #20]
 80048f2:	9b06      	ldr	r3, [sp, #24]
 80048f4:	aa09      	add	r2, sp, #36	@ 0x24
 80048f6:	f7ff fef5 	bl	80046e4 <_printf_common>
 80048fa:	3001      	adds	r0, #1
 80048fc:	d148      	bne.n	8004990 <_printf_i+0x1cc>
 80048fe:	2001      	movs	r0, #1
 8004900:	4240      	negs	r0, r0
 8004902:	b00b      	add	sp, #44	@ 0x2c
 8004904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004906:	2220      	movs	r2, #32
 8004908:	6809      	ldr	r1, [r1, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	6022      	str	r2, [r4, #0]
 800490e:	2278      	movs	r2, #120	@ 0x78
 8004910:	4932      	ldr	r1, [pc, #200]	@ (80049dc <_printf_i+0x218>)
 8004912:	9104      	str	r1, [sp, #16]
 8004914:	0021      	movs	r1, r4
 8004916:	3145      	adds	r1, #69	@ 0x45
 8004918:	700a      	strb	r2, [r1, #0]
 800491a:	6819      	ldr	r1, [r3, #0]
 800491c:	6822      	ldr	r2, [r4, #0]
 800491e:	c940      	ldmia	r1!, {r6}
 8004920:	0610      	lsls	r0, r2, #24
 8004922:	d402      	bmi.n	800492a <_printf_i+0x166>
 8004924:	0650      	lsls	r0, r2, #25
 8004926:	d500      	bpl.n	800492a <_printf_i+0x166>
 8004928:	b2b6      	uxth	r6, r6
 800492a:	6019      	str	r1, [r3, #0]
 800492c:	07d3      	lsls	r3, r2, #31
 800492e:	d502      	bpl.n	8004936 <_printf_i+0x172>
 8004930:	2320      	movs	r3, #32
 8004932:	4313      	orrs	r3, r2
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	2e00      	cmp	r6, #0
 8004938:	d001      	beq.n	800493e <_printf_i+0x17a>
 800493a:	2710      	movs	r7, #16
 800493c:	e7a8      	b.n	8004890 <_printf_i+0xcc>
 800493e:	2220      	movs	r2, #32
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	4393      	bics	r3, r2
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	e7f8      	b.n	800493a <_printf_i+0x176>
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	680d      	ldr	r5, [r1, #0]
 800494c:	1d10      	adds	r0, r2, #4
 800494e:	6949      	ldr	r1, [r1, #20]
 8004950:	6018      	str	r0, [r3, #0]
 8004952:	6813      	ldr	r3, [r2, #0]
 8004954:	062e      	lsls	r6, r5, #24
 8004956:	d501      	bpl.n	800495c <_printf_i+0x198>
 8004958:	6019      	str	r1, [r3, #0]
 800495a:	e002      	b.n	8004962 <_printf_i+0x19e>
 800495c:	066d      	lsls	r5, r5, #25
 800495e:	d5fb      	bpl.n	8004958 <_printf_i+0x194>
 8004960:	8019      	strh	r1, [r3, #0]
 8004962:	2300      	movs	r3, #0
 8004964:	9d03      	ldr	r5, [sp, #12]
 8004966:	6123      	str	r3, [r4, #16]
 8004968:	e7bf      	b.n	80048ea <_printf_i+0x126>
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	1d11      	adds	r1, r2, #4
 800496e:	6019      	str	r1, [r3, #0]
 8004970:	6815      	ldr	r5, [r2, #0]
 8004972:	2100      	movs	r1, #0
 8004974:	0028      	movs	r0, r5
 8004976:	6862      	ldr	r2, [r4, #4]
 8004978:	f000 f858 	bl	8004a2c <memchr>
 800497c:	2800      	cmp	r0, #0
 800497e:	d001      	beq.n	8004984 <_printf_i+0x1c0>
 8004980:	1b40      	subs	r0, r0, r5
 8004982:	6060      	str	r0, [r4, #4]
 8004984:	6863      	ldr	r3, [r4, #4]
 8004986:	6123      	str	r3, [r4, #16]
 8004988:	2300      	movs	r3, #0
 800498a:	9a03      	ldr	r2, [sp, #12]
 800498c:	7013      	strb	r3, [r2, #0]
 800498e:	e7ac      	b.n	80048ea <_printf_i+0x126>
 8004990:	002a      	movs	r2, r5
 8004992:	6923      	ldr	r3, [r4, #16]
 8004994:	9906      	ldr	r1, [sp, #24]
 8004996:	9805      	ldr	r0, [sp, #20]
 8004998:	9d07      	ldr	r5, [sp, #28]
 800499a:	47a8      	blx	r5
 800499c:	3001      	adds	r0, #1
 800499e:	d0ae      	beq.n	80048fe <_printf_i+0x13a>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	079b      	lsls	r3, r3, #30
 80049a4:	d415      	bmi.n	80049d2 <_printf_i+0x20e>
 80049a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049a8:	68e0      	ldr	r0, [r4, #12]
 80049aa:	4298      	cmp	r0, r3
 80049ac:	daa9      	bge.n	8004902 <_printf_i+0x13e>
 80049ae:	0018      	movs	r0, r3
 80049b0:	e7a7      	b.n	8004902 <_printf_i+0x13e>
 80049b2:	0022      	movs	r2, r4
 80049b4:	2301      	movs	r3, #1
 80049b6:	9906      	ldr	r1, [sp, #24]
 80049b8:	9805      	ldr	r0, [sp, #20]
 80049ba:	9e07      	ldr	r6, [sp, #28]
 80049bc:	3219      	adds	r2, #25
 80049be:	47b0      	blx	r6
 80049c0:	3001      	adds	r0, #1
 80049c2:	d09c      	beq.n	80048fe <_printf_i+0x13a>
 80049c4:	3501      	adds	r5, #1
 80049c6:	68e3      	ldr	r3, [r4, #12]
 80049c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	42ab      	cmp	r3, r5
 80049ce:	dcf0      	bgt.n	80049b2 <_printf_i+0x1ee>
 80049d0:	e7e9      	b.n	80049a6 <_printf_i+0x1e2>
 80049d2:	2500      	movs	r5, #0
 80049d4:	e7f7      	b.n	80049c6 <_printf_i+0x202>
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	08005195 	.word	0x08005195
 80049dc:	080051a6 	.word	0x080051a6

080049e0 <memmove>:
 80049e0:	b510      	push	{r4, lr}
 80049e2:	4288      	cmp	r0, r1
 80049e4:	d806      	bhi.n	80049f4 <memmove+0x14>
 80049e6:	2300      	movs	r3, #0
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d008      	beq.n	80049fe <memmove+0x1e>
 80049ec:	5ccc      	ldrb	r4, [r1, r3]
 80049ee:	54c4      	strb	r4, [r0, r3]
 80049f0:	3301      	adds	r3, #1
 80049f2:	e7f9      	b.n	80049e8 <memmove+0x8>
 80049f4:	188b      	adds	r3, r1, r2
 80049f6:	4298      	cmp	r0, r3
 80049f8:	d2f5      	bcs.n	80049e6 <memmove+0x6>
 80049fa:	3a01      	subs	r2, #1
 80049fc:	d200      	bcs.n	8004a00 <memmove+0x20>
 80049fe:	bd10      	pop	{r4, pc}
 8004a00:	5c8b      	ldrb	r3, [r1, r2]
 8004a02:	5483      	strb	r3, [r0, r2]
 8004a04:	e7f9      	b.n	80049fa <memmove+0x1a>
	...

08004a08 <_sbrk_r>:
 8004a08:	2300      	movs	r3, #0
 8004a0a:	b570      	push	{r4, r5, r6, lr}
 8004a0c:	4d06      	ldr	r5, [pc, #24]	@ (8004a28 <_sbrk_r+0x20>)
 8004a0e:	0004      	movs	r4, r0
 8004a10:	0008      	movs	r0, r1
 8004a12:	602b      	str	r3, [r5, #0]
 8004a14:	f7fd fa10 	bl	8001e38 <_sbrk>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d103      	bne.n	8004a24 <_sbrk_r+0x1c>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d000      	beq.n	8004a24 <_sbrk_r+0x1c>
 8004a22:	6023      	str	r3, [r4, #0]
 8004a24:	bd70      	pop	{r4, r5, r6, pc}
 8004a26:	46c0      	nop			@ (mov r8, r8)
 8004a28:	2000040c 	.word	0x2000040c

08004a2c <memchr>:
 8004a2c:	b2c9      	uxtb	r1, r1
 8004a2e:	1882      	adds	r2, r0, r2
 8004a30:	4290      	cmp	r0, r2
 8004a32:	d101      	bne.n	8004a38 <memchr+0xc>
 8004a34:	2000      	movs	r0, #0
 8004a36:	4770      	bx	lr
 8004a38:	7803      	ldrb	r3, [r0, #0]
 8004a3a:	428b      	cmp	r3, r1
 8004a3c:	d0fb      	beq.n	8004a36 <memchr+0xa>
 8004a3e:	3001      	adds	r0, #1
 8004a40:	e7f6      	b.n	8004a30 <memchr+0x4>

08004a42 <memcpy>:
 8004a42:	2300      	movs	r3, #0
 8004a44:	b510      	push	{r4, lr}
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d100      	bne.n	8004a4c <memcpy+0xa>
 8004a4a:	bd10      	pop	{r4, pc}
 8004a4c:	5ccc      	ldrb	r4, [r1, r3]
 8004a4e:	54c4      	strb	r4, [r0, r3]
 8004a50:	3301      	adds	r3, #1
 8004a52:	e7f8      	b.n	8004a46 <memcpy+0x4>

08004a54 <_realloc_r>:
 8004a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a56:	0006      	movs	r6, r0
 8004a58:	000c      	movs	r4, r1
 8004a5a:	0015      	movs	r5, r2
 8004a5c:	2900      	cmp	r1, #0
 8004a5e:	d105      	bne.n	8004a6c <_realloc_r+0x18>
 8004a60:	0011      	movs	r1, r2
 8004a62:	f7ff fc51 	bl	8004308 <_malloc_r>
 8004a66:	0004      	movs	r4, r0
 8004a68:	0020      	movs	r0, r4
 8004a6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a6c:	2a00      	cmp	r2, #0
 8004a6e:	d103      	bne.n	8004a78 <_realloc_r+0x24>
 8004a70:	f7ff fbde 	bl	8004230 <_free_r>
 8004a74:	2400      	movs	r4, #0
 8004a76:	e7f7      	b.n	8004a68 <_realloc_r+0x14>
 8004a78:	f000 f81b 	bl	8004ab2 <_malloc_usable_size_r>
 8004a7c:	0007      	movs	r7, r0
 8004a7e:	4285      	cmp	r5, r0
 8004a80:	d802      	bhi.n	8004a88 <_realloc_r+0x34>
 8004a82:	0843      	lsrs	r3, r0, #1
 8004a84:	42ab      	cmp	r3, r5
 8004a86:	d3ef      	bcc.n	8004a68 <_realloc_r+0x14>
 8004a88:	0029      	movs	r1, r5
 8004a8a:	0030      	movs	r0, r6
 8004a8c:	f7ff fc3c 	bl	8004308 <_malloc_r>
 8004a90:	9001      	str	r0, [sp, #4]
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d0ee      	beq.n	8004a74 <_realloc_r+0x20>
 8004a96:	002a      	movs	r2, r5
 8004a98:	42bd      	cmp	r5, r7
 8004a9a:	d900      	bls.n	8004a9e <_realloc_r+0x4a>
 8004a9c:	003a      	movs	r2, r7
 8004a9e:	0021      	movs	r1, r4
 8004aa0:	9801      	ldr	r0, [sp, #4]
 8004aa2:	f7ff ffce 	bl	8004a42 <memcpy>
 8004aa6:	0021      	movs	r1, r4
 8004aa8:	0030      	movs	r0, r6
 8004aaa:	f7ff fbc1 	bl	8004230 <_free_r>
 8004aae:	9c01      	ldr	r4, [sp, #4]
 8004ab0:	e7da      	b.n	8004a68 <_realloc_r+0x14>

08004ab2 <_malloc_usable_size_r>:
 8004ab2:	1f0b      	subs	r3, r1, #4
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	1f18      	subs	r0, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	da01      	bge.n	8004ac0 <_malloc_usable_size_r+0xe>
 8004abc:	580b      	ldr	r3, [r1, r0]
 8004abe:	18c0      	adds	r0, r0, r3
 8004ac0:	4770      	bx	lr
	...

08004ac4 <_init>:
 8004ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ac6:	46c0      	nop			@ (mov r8, r8)
 8004ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aca:	bc08      	pop	{r3}
 8004acc:	469e      	mov	lr, r3
 8004ace:	4770      	bx	lr

08004ad0 <_fini>:
 8004ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad2:	46c0      	nop			@ (mov r8, r8)
 8004ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ad6:	bc08      	pop	{r3}
 8004ad8:	469e      	mov	lr, r3
 8004ada:	4770      	bx	lr
